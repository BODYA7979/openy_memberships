(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-vendors"],{"00ee":function(t,e,n){var r=n("b622"),o=r("toStringTag"),i={};i[o]="z",t.exports="[object z]"===String(i)},"0366":function(t,e,n){var r=n("1c0b");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},"057f":function(t,e,n){var r=n("fc6a"),o=n("241c").f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(t){try{return o(t)}catch(e){return a.slice()}};t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?s(t):o(r(t))}},"06cf":function(t,e,n){var r=n("83ab"),o=n("d1e7"),i=n("5c6c"),a=n("fc6a"),s=n("c04e"),c=n("5135"),u=n("0cfb"),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=a(t),e=s(e,!0),u)try{return f(t,e)}catch(n){}if(c(t,e))return i(!o.f.call(t,e),t[e])}},"0cfb":function(t,e,n){var r=n("83ab"),o=n("d039"),i=n("cc12");t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},"13d5":function(t,e,n){"use strict";var r=n("23e7"),o=n("d58f").left,i=n("a640"),a=n("ae40"),s=i("reduce"),c=a("reduce",{1:0});r({target:"Array",proto:!0,forced:!s||!c},{reduce:function(t){return o(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},"159b":function(t,e,n){var r=n("da84"),o=n("fdbc"),i=n("17c2"),a=n("9112");for(var s in o){var c=r[s],u=c&&c.prototype;if(u&&u.forEach!==i)try{a(u,"forEach",i)}catch(f){u.forEach=i}}},"17c2":function(t,e,n){"use strict";var r=n("b727").forEach,o=n("a640"),i=n("ae40"),a=o("forEach"),s=i("forEach");t.exports=a&&s?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},"19aa":function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},"1be4":function(t,e,n){var r=n("d066");t.exports=r("document","documentElement")},"1c0b":function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},"1c7e":function(t,e,n){var r=n("b622"),o=r("iterator"),i=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){i=!0}};s[o]=function(){return this},Array.from(s,(function(){throw 2}))}catch(c){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var r={};r[o]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(c){}return n}},"1cdc":function(t,e,n){var r=n("342f");t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},"1d80":function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on "+t);return t}},"1da1":function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));n("d3b7"),n("e6cf");function r(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(u){return void n(u)}s.done?e(c):Promise.resolve(c).then(r,o)}function o(t){return function(){var e=this,n=arguments;return new Promise((function(o,i){var a=t.apply(e,n);function s(t){r(a,o,i,s,c,"next",t)}function c(t){r(a,o,i,s,c,"throw",t)}s(void 0)}))}}},"1dde":function(t,e,n){var r=n("d039"),o=n("b622"),i=n("2d00"),a=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[],n=e.constructor={};return n[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2266:function(t,e,n){var r=n("825a"),o=n("e95a"),i=n("50c4"),a=n("0366"),s=n("35a1"),c=n("9bdd"),u=function(t,e){this.stopped=t,this.result=e},f=t.exports=function(t,e,n,f,l){var p,h,d,v,y,m,g,b=a(e,n,f?2:1);if(l)p=t;else{if(h=s(t),"function"!=typeof h)throw TypeError("Target is not iterable");if(o(h)){for(d=0,v=i(t.length);v>d;d++)if(y=f?b(r(g=t[d])[0],g[1]):b(t[d]),y&&y instanceof u)return y;return new u(!1)}p=h.call(t)}m=p.next;while(!(g=m.call(p)).done)if(y=c(p,b,g.value,f),"object"==typeof y&&y&&y instanceof u)return y;return new u(!1)};f.stop=function(t){return new u(!0,t)}},"23cb":function(t,e,n){var r=n("a691"),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},"23e7":function(t,e,n){var r=n("da84"),o=n("06cf").f,i=n("9112"),a=n("6eeb"),s=n("ce4e"),c=n("e893"),u=n("94ca");t.exports=function(t,e){var n,f,l,p,h,d,v=t.target,y=t.global,m=t.stat;if(f=y?r:m?r[v]||s(v,{}):(r[v]||{}).prototype,f)for(l in e){if(h=e[l],t.noTargetGet?(d=o(f,l),p=d&&d.value):p=f[l],n=u(y?l:v+(m?".":"#")+l,t.forced),!n&&void 0!==p){if(typeof h===typeof p)continue;c(h,p)}(t.sham||p&&p.sham)&&i(h,"sham",!0),a(f,l,h,t)}}},"241c":function(t,e,n){var r=n("ca84"),o=n("7839"),i=o.concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},2626:function(t,e,n){"use strict";var r=n("d066"),o=n("9bf2"),i=n("b622"),a=n("83ab"),s=i("species");t.exports=function(t){var e=r(t),n=o.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},2877:function(t,e,n){"use strict";function r(t,e,n,r,o,i,a,s){var c,u="function"===typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(c=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||"undefined"===typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var f=u.render;u.render=function(t,e){return c.call(e),f(t,e)}}else{var l=u.beforeCreate;u.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:u}}n.d(e,"a",(function(){return r}))},"2b0e":function(t,e,n){"use strict";(function(t){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var n=Object.freeze({});function r(t){return void 0===t||null===t}function o(t){return void 0!==t&&null!==t}function i(t){return!0===t}function a(t){return!1===t}function s(t){return"string"===typeof t||"number"===typeof t||"symbol"===typeof t||"boolean"===typeof t}function c(t){return null!==t&&"object"===typeof t}var u=Object.prototype.toString;function f(t){return"[object Object]"===u.call(t)}function l(t){return"[object RegExp]"===u.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function h(t){return o(t)&&"function"===typeof t.then&&"function"===typeof t.catch}function d(t){return null==t?"":Array.isArray(t)||f(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function v(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}y("slot,component",!0);var m=y("key,ref,slot,slot-scope,is");function g(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(t,e){return b.call(t,e)}function w(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var O=/-(\w)/g,x=w((function(t){return t.replace(O,(function(t,e){return e?e.toUpperCase():""}))})),S=w((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),C=/\B([A-Z])/g,j=w((function(t){return t.replace(C,"-$1").toLowerCase()}));function A(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function k(t,e){return t.bind(e)}var $=Function.prototype.bind?k:A;function E(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function T(t,e){for(var n in e)t[n]=e[n];return t}function P(t){for(var e={},n=0;n<t.length;n++)t[n]&&T(e,t[n]);return e}function L(t,e,n){}var I=function(t,e,n){return!1},M=function(t){return t};function N(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return N(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return N(t[n],e[n])}))}catch(u){return!1}}function R(t,e){for(var n=0;n<t.length;n++)if(N(t[n],e))return n;return-1}function D(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var F="data-server-rendered",V=["component","directive","filter"],B=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:I,isReservedAttr:I,isUnknownElement:I,getTagNamespace:L,parsePlatformTagName:M,mustUseProp:I,async:!0,_lifecycleHooks:B},z=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function G(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=new RegExp("[^"+z.source+".$_\\d]");function K(t){if(!q.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}var X,W="__proto__"in{},J="undefined"!==typeof window,Y="undefined"!==typeof WXEnvironment&&!!WXEnvironment.platform,Q=Y&&WXEnvironment.platform.toLowerCase(),Z=J&&window.navigator.userAgent.toLowerCase(),tt=Z&&/msie|trident/.test(Z),et=Z&&Z.indexOf("msie 9.0")>0,nt=Z&&Z.indexOf("edge/")>0,rt=(Z&&Z.indexOf("android"),Z&&/iphone|ipad|ipod|ios/.test(Z)||"ios"===Q),ot=(Z&&/chrome\/\d+/.test(Z),Z&&/phantomjs/.test(Z),Z&&Z.match(/firefox\/(\d+)/)),it={}.watch,at=!1;if(J)try{var st={};Object.defineProperty(st,"passive",{get:function(){at=!0}}),window.addEventListener("test-passive",null,st)}catch(xa){}var ct=function(){return void 0===X&&(X=!J&&!Y&&"undefined"!==typeof t&&(t["process"]&&"server"===t["process"].env.VUE_ENV)),X},ut=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ft(t){return"function"===typeof t&&/native code/.test(t.toString())}var lt,pt="undefined"!==typeof Symbol&&ft(Symbol)&&"undefined"!==typeof Reflect&&ft(Reflect.ownKeys);lt="undefined"!==typeof Set&&ft(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ht=L,dt=0,vt=function(){this.id=dt++,this.subs=[]};vt.prototype.addSub=function(t){this.subs.push(t)},vt.prototype.removeSub=function(t){g(this.subs,t)},vt.prototype.depend=function(){vt.target&&vt.target.addDep(this)},vt.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},vt.target=null;var yt=[];function mt(t){yt.push(t),vt.target=t}function gt(){yt.pop(),vt.target=yt[yt.length-1]}var bt=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},_t={child:{configurable:!0}};_t.child.get=function(){return this.componentInstance},Object.defineProperties(bt.prototype,_t);var wt=function(t){void 0===t&&(t="");var e=new bt;return e.text=t,e.isComment=!0,e};function Ot(t){return new bt(void 0,void 0,void 0,String(t))}function xt(t){var e=new bt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var St=Array.prototype,Ct=Object.create(St),jt=["push","pop","shift","unshift","splice","sort","reverse"];jt.forEach((function(t){var e=St[t];G(Ct,t,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2);break}return o&&a.observeArray(o),a.dep.notify(),i}))}));var At=Object.getOwnPropertyNames(Ct),kt=!0;function $t(t){kt=t}var Et=function(t){this.value=t,this.dep=new vt,this.vmCount=0,G(t,"__ob__",this),Array.isArray(t)?(W?Tt(t,Ct):Pt(t,Ct,At),this.observeArray(t)):this.walk(t)};function Tt(t,e){t.__proto__=e}function Pt(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];G(t,i,e[i])}}function Lt(t,e){var n;if(c(t)&&!(t instanceof bt))return _(t,"__ob__")&&t.__ob__ instanceof Et?n=t.__ob__:kt&&!ct()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Et(t)),e&&n&&n.vmCount++,n}function It(t,e,n,r,o){var i=new vt,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&Lt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return vt.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&Rt(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!==e&&r!==r||s&&!c||(c?c.call(t,e):n=e,u=!o&&Lt(e),i.notify())}})}}function Mt(t,e,n){if(Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(It(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function Nt(t,e){if(Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||_(t,e)&&(delete t[e],n&&n.dep.notify())}}function Rt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Rt(e)}Et.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)It(t,e[n])},Et.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Lt(t[e])};var Dt=U.optionMergeStrategies;function Ft(t,e){if(!e)return t;for(var n,r,o,i=pt?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)n=i[a],"__ob__"!==n&&(r=t[n],o=e[n],_(t,n)?r!==o&&f(r)&&f(o)&&Ft(r,o):Mt(t,n,o));return t}function Vt(t,e,n){return n?function(){var r="function"===typeof e?e.call(n,n):e,o="function"===typeof t?t.call(n,n):t;return r?Ft(r,o):o}:e?t?function(){return Ft("function"===typeof e?e.call(this,this):e,"function"===typeof t?t.call(this,this):t)}:e:t}function Bt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?Ut(n):n}function Ut(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function zt(t,e,n,r){var o=Object.create(t||null);return e?T(o,e):o}Dt.data=function(t,e,n){return n?Vt(t,e,n):e&&"function"!==typeof e?t:Vt(t,e)},B.forEach((function(t){Dt[t]=Bt})),V.forEach((function(t){Dt[t+"s"]=zt})),Dt.watch=function(t,e,n,r){if(t===it&&(t=void 0),e===it&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in T(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Dt.props=Dt.methods=Dt.inject=Dt.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return T(o,t),e&&T(o,e),o},Dt.provide=Vt;var Ht=function(t,e){return void 0===e?t:e};function Gt(t,e){var n=t.props;if(n){var r,o,i,a={};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],"string"===typeof o&&(i=x(o),a[i]={type:null})}else if(f(n))for(var s in n)o=n[s],i=x(s),a[i]=f(o)?o:{type:o};else 0;t.props=a}}function qt(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var a=n[i];r[i]=f(a)?T({from:i},a):{from:a}}else 0}}function Kt(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"===typeof r&&(e[n]={bind:r,update:r})}}function Xt(t,e,n){if("function"===typeof e&&(e=e.options),Gt(e,n),qt(e,n),Kt(e),!e._base&&(e.extends&&(t=Xt(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=Xt(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)_(t,i)||s(i);function s(r){var o=Dt[r]||Ht;a[r]=o(t[r],e[r],n,r)}return a}function Wt(t,e,n,r){if("string"===typeof n){var o=t[e];if(_(o,n))return o[n];var i=x(n);if(_(o,i))return o[i];var a=S(i);if(_(o,a))return o[a];var s=o[n]||o[i]||o[a];return s}}function Jt(t,e,n,r){var o=e[t],i=!_(n,t),a=n[t],s=te(Boolean,o.type);if(s>-1)if(i&&!_(o,"default"))a=!1;else if(""===a||a===j(t)){var c=te(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=Yt(r,o,t);var u=kt;$t(!0),Lt(a),$t(u)}return a}function Yt(t,e,n){if(_(e,"default")){var r=e.default;return t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"===typeof r&&"Function"!==Qt(e.type)?r.call(t):r}}function Qt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Zt(t,e){return Qt(t)===Qt(e)}function te(t,e){if(!Array.isArray(e))return Zt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Zt(e[n],t))return n;return-1}function ee(t,e,n){mt();try{if(e){var r=e;while(r=r.$parent){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var a=!1===o[i].call(r,t,e,n);if(a)return}catch(xa){re(xa,r,"errorCaptured hook")}}}re(t,e,n)}finally{gt()}}function ne(t,e,n,r,o){var i;try{i=n?t.apply(e,n):t.call(e),i&&!i._isVue&&h(i)&&!i._handled&&(i.catch((function(t){return ee(t,r,o+" (Promise/async)")})),i._handled=!0)}catch(xa){ee(xa,r,o)}return i}function re(t,e,n){if(U.errorHandler)try{return U.errorHandler.call(null,t,e,n)}catch(xa){xa!==t&&oe(xa,null,"config.errorHandler")}oe(t,e,n)}function oe(t,e,n){if(!J&&!Y||"undefined"===typeof console)throw t;console.error(t)}var ie,ae=!1,se=[],ce=!1;function ue(){ce=!1;var t=se.slice(0);se.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!==typeof Promise&&ft(Promise)){var fe=Promise.resolve();ie=function(){fe.then(ue),rt&&setTimeout(L)},ae=!0}else if(tt||"undefined"===typeof MutationObserver||!ft(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ie="undefined"!==typeof setImmediate&&ft(setImmediate)?function(){setImmediate(ue)}:function(){setTimeout(ue,0)};else{var le=1,pe=new MutationObserver(ue),he=document.createTextNode(String(le));pe.observe(he,{characterData:!0}),ie=function(){le=(le+1)%2,he.data=String(le)},ae=!0}function de(t,e){var n;if(se.push((function(){if(t)try{t.call(e)}catch(xa){ee(xa,e,"nextTick")}else n&&n(e)})),ce||(ce=!0,ie()),!t&&"undefined"!==typeof Promise)return new Promise((function(t){n=t}))}var ve=new lt;function ye(t){me(t,ve),ve.clear()}function me(t,e){var n,r,o=Array.isArray(t);if(!(!o&&!c(t)||Object.isFrozen(t)||t instanceof bt)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(o){n=t.length;while(n--)me(t[n],e)}else{r=Object.keys(t),n=r.length;while(n--)me(t[r[n]],e)}}}var ge=w((function(t){var e="&"===t.charAt(0);t=e?t.slice(1):t;var n="~"===t.charAt(0);t=n?t.slice(1):t;var r="!"===t.charAt(0);return t=r?t.slice(1):t,{name:t,once:n,capture:r,passive:e}}));function be(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return ne(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)ne(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function _e(t,e,n,o,a,s){var c,u,f,l;for(c in t)u=t[c],f=e[c],l=ge(c),r(u)||(r(f)?(r(u.fns)&&(u=t[c]=be(u,s)),i(l.once)&&(u=t[c]=a(l.name,u,l.capture)),n(l.name,u,l.capture,l.passive,l.params)):u!==f&&(f.fns=u,t[c]=f));for(c in e)r(t[c])&&(l=ge(c),o(l.name,e[c],l.capture))}function we(t,e,n){var a;t instanceof bt&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function c(){n.apply(this,arguments),g(a.fns,c)}r(s)?a=be([c]):o(s.fns)&&i(s.merged)?(a=s,a.fns.push(c)):a=be([s,c]),a.merged=!0,t[e]=a}function Oe(t,e,n){var i=e.options.props;if(!r(i)){var a={},s=t.attrs,c=t.props;if(o(s)||o(c))for(var u in i){var f=j(u);xe(a,c,u,f,!0)||xe(a,s,u,f,!1)}return a}}function xe(t,e,n,r,i){if(o(e)){if(_(e,n))return t[n]=e[n],i||delete e[n],!0;if(_(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Se(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function Ce(t){return s(t)?[Ot(t)]:Array.isArray(t)?Ae(t):void 0}function je(t){return o(t)&&o(t.text)&&a(t.isComment)}function Ae(t,e){var n,a,c,u,f=[];for(n=0;n<t.length;n++)a=t[n],r(a)||"boolean"===typeof a||(c=f.length-1,u=f[c],Array.isArray(a)?a.length>0&&(a=Ae(a,(e||"")+"_"+n),je(a[0])&&je(u)&&(f[c]=Ot(u.text+a[0].text),a.shift()),f.push.apply(f,a)):s(a)?je(u)?f[c]=Ot(u.text+a):""!==a&&f.push(Ot(a)):je(a)&&je(u)?f[c]=Ot(u.text+a.text):(i(t._isVList)&&o(a.tag)&&r(a.key)&&o(e)&&(a.key="__vlist"+e+"_"+n+"__"),f.push(a)));return f}function ke(t){var e=t.$options.provide;e&&(t._provided="function"===typeof e?e.call(t):e)}function $e(t){var e=Ee(t.$options.inject,t);e&&($t(!1),Object.keys(e).forEach((function(n){It(t,n,e[n])})),$t(!0))}function Ee(t,e){if(t){for(var n=Object.create(null),r=pt?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){var a=t[i].from,s=e;while(s){if(s._provided&&_(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[i]){var c=t[i].default;n[i]="function"===typeof c?c.call(e):c}else 0}}return n}}function Te(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(Pe)&&delete n[u];return n}function Pe(t){return t.isComment&&!t.asyncFactory||" "===t.text}function Le(t,e,r){var o,i=Object.keys(e).length>0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},t)t[c]&&"$"!==c[0]&&(o[c]=Ie(e,c,t[c]))}else o={};for(var u in e)u in o||(o[u]=Me(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),G(o,"$stable",a),G(o,"$key",s),G(o,"$hasNormal",i),o}function Ie(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&"object"===typeof t&&!Array.isArray(t)?[t]:Ce(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function Me(t,e){return function(){return t[e]}}function Ne(t,e){var n,r,i,a,s;if(Array.isArray(t)||"string"===typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"===typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(c(t))if(pt&&t[Symbol.iterator]){n=[];var u=t[Symbol.iterator](),f=u.next();while(!f.done)n.push(e(f.value,n.length)),f=u.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r);return o(n)||(n=[]),n._isVList=!0,n}function Re(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=T(T({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function De(t){return Wt(this.$options,"filters",t,!0)||M}function Fe(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function Ve(t,e,n,r,o){var i=U.keyCodes[e]||n;return o&&r&&!U.keyCodes[e]?Fe(o,r):i?Fe(i,t):r?j(r)!==e:void 0}function Be(t,e,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=P(n));var a=function(a){if("class"===a||"style"===a||m(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||U.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=x(a),u=j(a);if(!(c in i)&&!(u in i)&&(i[a]=n[a],o)){var f=t.on||(t.on={});f["update:"+a]=function(t){n[a]=t}}};for(var s in n)a(s)}else;return t}function Ue(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),He(r,"__static__"+t,!1)),r}function ze(t,e,n){return He(t,"__once__"+e+(n?"_"+n:""),!0),t}function He(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!==typeof t[r]&&Ge(t[r],e+"_"+r,n);else Ge(t,e,n)}function Ge(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function qe(t,e){if(e)if(f(e)){var n=t.on=t.on?T({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function Ke(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?Ke(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Xe(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"===typeof r&&r&&(t[e[n]]=e[n+1])}return t}function We(t,e){return"string"===typeof t?e+t:t}function Je(t){t._o=ze,t._n=v,t._s=d,t._l=Ne,t._t=Re,t._q=N,t._i=R,t._m=Ue,t._f=De,t._k=Ve,t._b=Be,t._v=Ot,t._e=wt,t._u=Ke,t._g=qe,t._d=Xe,t._p=We}function Ye(t,e,r,o,a){var s,c=this,u=a.options;_(o,"_uid")?(s=Object.create(o),s._original=o):(s=o,o=o._original);var f=i(u._compiled),l=!f;this.data=t,this.props=e,this.children=r,this.parent=o,this.listeners=t.on||n,this.injections=Ee(u.inject,o),this.slots=function(){return c.$slots||Le(t.scopedSlots,c.$slots=Te(r,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Le(t.scopedSlots,this.slots())}}),f&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=Le(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var i=ln(s,t,e,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return ln(s,t,e,n,r,l)}}function Qe(t,e,r,i,a){var s=t.options,c={},u=s.props;if(o(u))for(var f in u)c[f]=Jt(f,u,e||n);else o(r.attrs)&&tn(c,r.attrs),o(r.props)&&tn(c,r.props);var l=new Ye(r,c,a,i,t),p=s.render.call(null,l._c,l);if(p instanceof bt)return Ze(p,r,l.parent,s,l);if(Array.isArray(p)){for(var h=Ce(p)||[],d=new Array(h.length),v=0;v<h.length;v++)d[v]=Ze(h[v],r,l.parent,s,l);return d}}function Ze(t,e,n,r,o){var i=xt(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function tn(t,e){for(var n in e)t[x(n)]=e[n]}Je(Ye.prototype);var en={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;en.prepatch(n,n)}else{var r=t.componentInstance=on(t,En);r.$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions,r=e.componentInstance=t.componentInstance;Mn(r,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,Fn(n,"mounted")),t.data.keepAlive&&(e._isMounted?Qn(n):Rn(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?Dn(e,!0):e.$destroy())}},nn=Object.keys(en);function rn(t,e,n,a,s){if(!r(t)){var u=n.$options._base;if(c(t)&&(t=u.extend(t)),"function"===typeof t){var f;if(r(t.cid)&&(f=t,t=wn(f,u),void 0===t))return _n(f,e,n,a,s);e=e||{},wr(t),o(e.model)&&cn(t.options,e);var l=Oe(e,t,s);if(i(t.options.functional))return Qe(t,l,e,n,a);var p=e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}an(e);var d=t.options.name||s,v=new bt("vue-component-"+t.cid+(d?"-"+d:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:l,listeners:p,tag:s,children:a},f);return v}}}function on(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}function an(t){for(var e=t.hook||(t.hook={}),n=0;n<nn.length;n++){var r=nn[n],o=e[r],i=en[r];o===i||o&&o._merged||(e[r]=o?sn(i,o):i)}}function sn(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function cn(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[r],s=e.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[r]=[s].concat(a)):i[r]=s}var un=1,fn=2;function ln(t,e,n,r,o,a){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(a)&&(o=fn),pn(t,e,n,r,o)}function pn(t,e,n,r,i){if(o(n)&&o(n.__ob__))return wt();if(o(n)&&o(n.is)&&(e=n.is),!e)return wt();var a,s,c;(Array.isArray(r)&&"function"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===fn?r=Ce(r):i===un&&(r=Se(r)),"string"===typeof e)?(s=t.$vnode&&t.$vnode.ns||U.getTagNamespace(e),a=U.isReservedTag(e)?new bt(U.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!o(c=Wt(t.$options,"components",e))?new bt(e,n,r,void 0,void 0,t):rn(c,n,t,r,e)):a=rn(e,n,t,r);return Array.isArray(a)?a:o(a)?(o(s)&&hn(a,s),o(n)&&dn(n),a):wt()}function hn(t,e,n){if(t.ns=e,"foreignObject"===t.tag&&(e=void 0,n=!0),o(t.children))for(var a=0,s=t.children.length;a<s;a++){var c=t.children[a];o(c.tag)&&(r(c.ns)||i(n)&&"svg"!==c.tag)&&hn(c,e,n)}}function dn(t){c(t.style)&&ye(t.style),c(t.class)&&ye(t.class)}function vn(t){t._vnode=null,t._staticTrees=null;var e=t.$options,r=t.$vnode=e._parentVnode,o=r&&r.context;t.$slots=Te(e._renderChildren,o),t.$scopedSlots=n,t._c=function(e,n,r,o){return ln(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return ln(t,e,n,r,o,!0)};var i=r&&r.data;It(t,"$attrs",i&&i.attrs||n,null,!0),It(t,"$listeners",e._parentListeners||n,null,!0)}var yn,mn=null;function gn(t){Je(t.prototype),t.prototype.$nextTick=function(t){return de(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=Le(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{mn=e,t=r.call(e._renderProxy,e.$createElement)}catch(xa){ee(xa,e,"render"),t=e._vnode}finally{mn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof bt||(t=wt()),t.parent=o,t}}function bn(t,e){return(t.__esModule||pt&&"Module"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function _n(t,e,n,r,o){var i=wt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}function wn(t,e){if(i(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;var n=mn;if(n&&o(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),i(t.loading)&&o(t.loadingComp))return t.loadingComp;if(n&&!o(t.owners)){var a=t.owners=[n],s=!0,u=null,f=null;n.$on("hook:destroyed",(function(){return g(a,n)}));var l=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==u&&(clearTimeout(u),u=null),null!==f&&(clearTimeout(f),f=null))},p=D((function(n){t.resolved=bn(n,e),s?a.length=0:l(!0)})),d=D((function(e){o(t.errorComp)&&(t.error=!0,l(!0))})),v=t(p,d);return c(v)&&(h(v)?r(t.resolved)&&v.then(p,d):h(v.component)&&(v.component.then(p,d),o(v.error)&&(t.errorComp=bn(v.error,e)),o(v.loading)&&(t.loadingComp=bn(v.loading,e),0===v.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,l(!1))}),v.delay||200)),o(v.timeout)&&(f=setTimeout((function(){f=null,r(t.resolved)&&d(null)}),v.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}function On(t){return t.isComment&&t.asyncFactory}function xn(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||On(n)))return n}}function Sn(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&kn(t,e)}function Cn(t,e){yn.$on(t,e)}function jn(t,e){yn.$off(t,e)}function An(t,e){var n=yn;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function kn(t,e,n){yn=t,_e(e,n||{},Cn,jn,An,t),yn=void 0}function $n(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;var s=a.length;while(s--)if(i=a[s],i===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?E(n):n;for(var r=E(arguments,1),o='event handler for "'+t+'"',i=0,a=n.length;i<a;i++)ne(n[i],e,r,e,o)}return e}}var En=null;function Tn(t){var e=En;return En=t,function(){En=e}}function Pn(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function Ln(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Tn(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Fn(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||g(e.$children,t),t._watcher&&t._watcher.teardown();var n=t._watchers.length;while(n--)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Fn(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}function In(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=wt),Fn(t,"beforeMount"),r=function(){t._update(t._render(),n)},new nr(t,r,L,{before:function(){t._isMounted&&!t._isDestroyed&&Fn(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Fn(t,"mounted")),t}function Mn(t,e,r,o,i){var a=o.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||c);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){$t(!1);for(var f=t._props,l=t.$options._propKeys||[],p=0;p<l.length;p++){var h=l[p],d=t.$options.props;f[h]=Jt(h,d,e,t)}$t(!0),t.$options.propsData=e}r=r||n;var v=t.$options._parentListeners;t.$options._parentListeners=r,kn(t,r,v),u&&(t.$slots=Te(i,o.context),t.$forceUpdate())}function Nn(t){while(t&&(t=t.$parent))if(t._inactive)return!0;return!1}function Rn(t,e){if(e){if(t._directInactive=!1,Nn(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Rn(t.$children[n]);Fn(t,"activated")}}function Dn(t,e){if((!e||(t._directInactive=!0,!Nn(t)))&&!t._inactive){t._inactive=!0;for(var n=0;n<t.$children.length;n++)Dn(t.$children[n]);Fn(t,"deactivated")}}function Fn(t,e){mt();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)ne(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),gt()}var Vn=[],Bn=[],Un={},zn=!1,Hn=!1,Gn=0;function qn(){Gn=Vn.length=Bn.length=0,Un={},zn=Hn=!1}var Kn=0,Xn=Date.now;if(J&&!tt){var Wn=window.performance;Wn&&"function"===typeof Wn.now&&Xn()>document.createEvent("Event").timeStamp&&(Xn=function(){return Wn.now()})}function Jn(){var t,e;for(Kn=Xn(),Hn=!0,Vn.sort((function(t,e){return t.id-e.id})),Gn=0;Gn<Vn.length;Gn++)t=Vn[Gn],t.before&&t.before(),e=t.id,Un[e]=null,t.run();var n=Bn.slice(),r=Vn.slice();qn(),Zn(n),Yn(r),ut&&U.devtools&&ut.emit("flush")}function Yn(t){var e=t.length;while(e--){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Fn(r,"updated")}}function Qn(t){t._inactive=!1,Bn.push(t)}function Zn(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Rn(t[e],!0)}function tr(t){var e=t.id;if(null==Un[e]){if(Un[e]=!0,Hn){var n=Vn.length-1;while(n>Gn&&Vn[n].id>t.id)n--;Vn.splice(n+1,0,t)}else Vn.push(t);zn||(zn=!0,de(Jn))}}var er=0,nr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++er,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new lt,this.newDepIds=new lt,this.expression="","function"===typeof e?this.getter=e:(this.getter=K(e),this.getter||(this.getter=L)),this.value=this.lazy?void 0:this.get()};nr.prototype.get=function(){var t;mt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(xa){if(!this.user)throw xa;ee(xa,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ye(t),gt(),this.cleanupDeps()}return t},nr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},nr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},nr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():tr(this)},nr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(xa){ee(xa,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},nr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},nr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},nr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var rr={enumerable:!0,configurable:!0,get:L,set:L};function or(t,e,n){rr.get=function(){return this[e][n]},rr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,rr)}function ir(t){t._watchers=[];var e=t.$options;e.props&&ar(t,e.props),e.methods&&dr(t,e.methods),e.data?sr(t):Lt(t._data={},!0),e.computed&&fr(t,e.computed),e.watch&&e.watch!==it&&vr(t,e.watch)}function ar(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[],i=!t.$parent;i||$t(!1);var a=function(i){o.push(i);var a=Jt(i,e,n,t);It(r,i,a),i in t||or(t,"_props",i)};for(var s in e)a(s);$t(!0)}function sr(t){var e=t.$options.data;e=t._data="function"===typeof e?cr(e,t):e||{},f(e)||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);while(o--){var i=n[o];0,r&&_(r,i)||H(i)||or(t,"_data",i)}Lt(e,!0)}function cr(t,e){mt();try{return t.call(e,e)}catch(xa){return ee(xa,e,"data()"),{}}finally{gt()}}var ur={lazy:!0};function fr(t,e){var n=t._computedWatchers=Object.create(null),r=ct();for(var o in e){var i=e[o],a="function"===typeof i?i:i.get;0,r||(n[o]=new nr(t,a||L,L,ur)),o in t||lr(t,o,i)}}function lr(t,e,n){var r=!ct();"function"===typeof n?(rr.get=r?pr(e):hr(n),rr.set=L):(rr.get=n.get?r&&!1!==n.cache?pr(e):hr(n.get):L,rr.set=n.set||L),Object.defineProperty(t,e,rr)}function pr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),vt.target&&e.depend(),e.value}}function hr(t){return function(){return t.call(this,this)}}function dr(t,e){t.$options.props;for(var n in e)t[n]="function"!==typeof e[n]?L:$(e[n],t)}function vr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)yr(t,n,r[o]);else yr(t,n,r)}}function yr(t,e,n,r){return f(n)&&(r=n,n=n.handler),"string"===typeof n&&(n=t[n]),t.$watch(e,n,r)}function mr(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=Mt,t.prototype.$delete=Nt,t.prototype.$watch=function(t,e,n){var r=this;if(f(e))return yr(r,t,e,n);n=n||{},n.user=!0;var o=new nr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(i){ee(i,r,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}var gr=0;function br(t){t.prototype._init=function(t){var e=this;e._uid=gr++,e._isVue=!0,t&&t._isComponent?_r(e,t):e.$options=Xt(wr(e.constructor),t||{},e),e._renderProxy=e,e._self=e,Pn(e),Sn(e),vn(e),Fn(e,"beforeCreate"),$e(e),ir(e),ke(e),Fn(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}function _r(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function wr(t){var e=t.options;if(t.super){var n=wr(t.super),r=t.superOptions;if(n!==r){t.superOptions=n;var o=Or(t);o&&T(t.extendOptions,o),e=t.options=Xt(n,t.extendOptions),e.name&&(e.components[e.name]=t)}}return e}function Or(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}function xr(t){this._init(t)}function Sr(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=E(arguments,1);return n.unshift(this),"function"===typeof t.install?t.install.apply(t,n):"function"===typeof t&&t.apply(null,n),e.push(t),this}}function Cr(t){t.mixin=function(t){return this.options=Xt(this.options,t),this}}function jr(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=Xt(n.options,t),a["super"]=n,a.options.props&&Ar(a),a.options.computed&&kr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,V.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=T({},a.options),o[r]=a,a}}function Ar(t){var e=t.options.props;for(var n in e)or(t.prototype,"_props",n)}function kr(t){var e=t.options.computed;for(var n in e)lr(t.prototype,n,e[n])}function $r(t){V.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&f(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"===typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}function Er(t){return t&&(t.Ctor.options.name||t.tag)}function Tr(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"===typeof t?t.split(",").indexOf(e)>-1:!!l(t)&&t.test(e)}function Pr(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=Er(a.componentOptions);s&&!e(s)&&Lr(n,i,r,o)}}}function Lr(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}br(xr),mr(xr),$n(xr),Ln(xr),gn(xr);var Ir=[String,RegExp,Array],Mr={name:"keep-alive",abstract:!0,props:{include:Ir,exclude:Ir,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Lr(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){Pr(t,(function(t){return Tr(e,t)}))})),this.$watch("exclude",(function(e){Pr(t,(function(t){return!Tr(e,t)}))}))},render:function(){var t=this.$slots.default,e=xn(t),n=e&&e.componentOptions;if(n){var r=Er(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!Tr(i,r))||a&&r&&Tr(a,r))return e;var s=this,c=s.cache,u=s.keys,f=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;c[f]?(e.componentInstance=c[f].componentInstance,g(u,f),u.push(f)):(c[f]=e,u.push(f),this.max&&u.length>parseInt(this.max)&&Lr(c,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},Nr={KeepAlive:Mr};function Rr(t){var e={get:function(){return U}};Object.defineProperty(t,"config",e),t.util={warn:ht,extend:T,mergeOptions:Xt,defineReactive:It},t.set=Mt,t.delete=Nt,t.nextTick=de,t.observable=function(t){return Lt(t),t},t.options=Object.create(null),V.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,T(t.options.components,Nr),Sr(t),Cr(t),jr(t),$r(t)}Rr(xr),Object.defineProperty(xr.prototype,"$isServer",{get:ct}),Object.defineProperty(xr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(xr,"FunctionalRenderContext",{value:Ye}),xr.version="2.6.11";var Dr=y("style,class"),Fr=y("input,textarea,option,select,progress"),Vr=function(t,e,n){return"value"===n&&Fr(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Br=y("contenteditable,draggable,spellcheck"),Ur=y("events,caret,typing,plaintext-only"),zr=function(t,e){return Xr(e)||"false"===e?"false":"contenteditable"===t&&Ur(e)?e:"true"},Hr=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Gr="http://www.w3.org/1999/xlink",qr=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Kr=function(t){return qr(t)?t.slice(6,t.length):""},Xr=function(t){return null==t||!1===t};function Wr(t){var e=t.data,n=t,r=t;while(o(r.componentInstance))r=r.componentInstance._vnode,r&&r.data&&(e=Jr(r.data,e));while(o(n=n.parent))n&&n.data&&(e=Jr(e,n.data));return Yr(e.staticClass,e.class)}function Jr(t,e){return{staticClass:Qr(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function Yr(t,e){return o(t)||o(e)?Qr(t,Zr(e)):""}function Qr(t,e){return t?e?t+" "+e:t:e||""}function Zr(t){return Array.isArray(t)?to(t):c(t)?eo(t):"string"===typeof t?t:""}function to(t){for(var e,n="",r=0,i=t.length;r<i;r++)o(e=Zr(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}function eo(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}var no={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ro=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),oo=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),io=function(t){return ro(t)||oo(t)};function ao(t){return oo(t)?"svg":"math"===t?"math":void 0}var so=Object.create(null);function co(t){if(!J)return!0;if(io(t))return!1;if(t=t.toLowerCase(),null!=so[t])return so[t];var e=document.createElement(t);return t.indexOf("-")>-1?so[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:so[t]=/HTMLUnknownElement/.test(e.toString())}var uo=y("text,number,password,search,email,tel,url");function fo(t){if("string"===typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}function lo(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n}function po(t,e){return document.createElementNS(no[t],e)}function ho(t){return document.createTextNode(t)}function vo(t){return document.createComment(t)}function yo(t,e,n){t.insertBefore(e,n)}function mo(t,e){t.removeChild(e)}function go(t,e){t.appendChild(e)}function bo(t){return t.parentNode}function _o(t){return t.nextSibling}function wo(t){return t.tagName}function Oo(t,e){t.textContent=e}function xo(t,e){t.setAttribute(e,"")}var So=Object.freeze({createElement:lo,createElementNS:po,createTextNode:ho,createComment:vo,insertBefore:yo,removeChild:mo,appendChild:go,parentNode:bo,nextSibling:_o,tagName:wo,setTextContent:Oo,setStyleScope:xo}),Co={create:function(t,e){jo(e)},update:function(t,e){t.data.ref!==e.data.ref&&(jo(t,!0),jo(e))},destroy:function(t){jo(t,!0)}};function jo(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var Ao=new bt("",{},[]),ko=["create","activate","update","remove","destroy"];function $o(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&Eo(t,e)||i(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function Eo(t,e){if("input"!==t.tag)return!0;var n,r=o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return r===i||uo(r)&&uo(i)}function To(t,e,n){var r,i,a={};for(r=e;r<=n;++r)i=t[r].key,o(i)&&(a[i]=r);return a}function Po(t){var e,n,a={},c=t.modules,u=t.nodeOps;for(e=0;e<ko.length;++e)for(a[ko[e]]=[],n=0;n<c.length;++n)o(c[n][ko[e]])&&a[ko[e]].push(c[n][ko[e]]);function f(t){return new bt(u.tagName(t).toLowerCase(),{},[],void 0,t)}function l(t,e){function n(){0===--n.listeners&&p(t)}return n.listeners=e,n}function p(t){var e=u.parentNode(t);o(e)&&u.removeChild(e,t)}function h(t,e,n,r,a,s,c){if(o(t.elm)&&o(s)&&(t=s[c]=xt(t)),t.isRootInsert=!a,!d(t,e,n,r)){var f=t.data,l=t.children,p=t.tag;o(p)?(t.elm=t.ns?u.createElementNS(t.ns,p):u.createElement(p,t),O(t),b(t,l,e),o(f)&&w(t,e),g(n,t.elm,r)):i(t.isComment)?(t.elm=u.createComment(t.text),g(n,t.elm,r)):(t.elm=u.createTextNode(t.text),g(n,t.elm,r))}}function d(t,e,n,r){var a=t.data;if(o(a)){var s=o(t.componentInstance)&&a.keepAlive;if(o(a=a.hook)&&o(a=a.init)&&a(t,!1),o(t.componentInstance))return v(t,e),g(n,t.elm,r),i(s)&&m(t,e,n,r),!0}}function v(t,e){o(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,_(t)?(w(t,e),O(t)):(jo(t),e.push(t))}function m(t,e,n,r){var i,s=t;while(s.componentInstance)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i](Ao,s);e.push(s);break}g(n,t.elm,r)}function g(t,e,n){o(t)&&(o(n)?u.parentNode(n)===t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function b(t,e,n){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)h(e[r],n,t.elm,null,!0,e,r)}else s(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function _(t){while(t.componentInstance)t=t.componentInstance._vnode;return o(t.tag)}function w(t,n){for(var r=0;r<a.create.length;++r)a.create[r](Ao,t);e=t.data.hook,o(e)&&(o(e.create)&&e.create(Ao,t),o(e.insert)&&n.push(t))}function O(t){var e;if(o(e=t.fnScopeId))u.setStyleScope(t.elm,e);else{var n=t;while(n)o(e=n.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent}o(e=En)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function x(t,e,n,r,o,i){for(;r<=o;++r)h(n[r],i,t,e,!1,n,r)}function S(t){var e,n,r=t.data;if(o(r))for(o(e=r.hook)&&o(e=e.destroy)&&e(t),e=0;e<a.destroy.length;++e)a.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)S(t.children[n])}function C(t,e,n){for(;e<=n;++e){var r=t[e];o(r)&&(o(r.tag)?(j(r),S(r)):p(r.elm))}}function j(t,e){if(o(e)||o(t.data)){var n,r=a.remove.length+1;for(o(e)?e.listeners+=r:e=l(t.elm,r),o(n=t.componentInstance)&&o(n=n._vnode)&&o(n.data)&&j(n,e),n=0;n<a.remove.length;++n)a.remove[n](t,e);o(n=t.data.hook)&&o(n=n.remove)?n(t,e):e()}else p(t.elm)}function A(t,e,n,i,a){var s,c,f,l,p=0,d=0,v=e.length-1,y=e[0],m=e[v],g=n.length-1,b=n[0],_=n[g],w=!a;while(p<=v&&d<=g)r(y)?y=e[++p]:r(m)?m=e[--v]:$o(y,b)?($(y,b,i,n,d),y=e[++p],b=n[++d]):$o(m,_)?($(m,_,i,n,g),m=e[--v],_=n[--g]):$o(y,_)?($(y,_,i,n,g),w&&u.insertBefore(t,y.elm,u.nextSibling(m.elm)),y=e[++p],_=n[--g]):$o(m,b)?($(m,b,i,n,d),w&&u.insertBefore(t,m.elm,y.elm),m=e[--v],b=n[++d]):(r(s)&&(s=To(e,p,v)),c=o(b.key)?s[b.key]:k(b,e,p,v),r(c)?h(b,i,t,y.elm,!1,n,d):(f=e[c],$o(f,b)?($(f,b,i,n,d),e[c]=void 0,w&&u.insertBefore(t,f.elm,y.elm)):h(b,i,t,y.elm,!1,n,d)),b=n[++d]);p>v?(l=r(n[g+1])?null:n[g+1].elm,x(t,l,n,d,g,i)):d>g&&C(e,p,v)}function k(t,e,n,r){for(var i=n;i<r;i++){var a=e[i];if(o(a)&&$o(t,a))return i}}function $(t,e,n,s,c,f){if(t!==e){o(e.elm)&&o(s)&&(e=s[c]=xt(e));var l=e.elm=t.elm;if(i(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?P(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(t.isStatic)&&e.key===t.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=t.componentInstance;else{var p,h=e.data;o(h)&&o(p=h.hook)&&o(p=p.prepatch)&&p(t,e);var d=t.children,v=e.children;if(o(h)&&_(e)){for(p=0;p<a.update.length;++p)a.update[p](t,e);o(p=h.hook)&&o(p=p.update)&&p(t,e)}r(e.text)?o(d)&&o(v)?d!==v&&A(l,d,v,n,f):o(v)?(o(t.text)&&u.setTextContent(l,""),x(l,null,v,0,v.length-1,n)):o(d)?C(d,0,d.length-1):o(t.text)&&u.setTextContent(l,""):t.text!==e.text&&u.setTextContent(l,e.text),o(h)&&o(p=h.hook)&&o(p=p.postpatch)&&p(t,e)}}}function E(t,e,n){if(i(n)&&o(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=y("attrs,class,staticClass,staticStyle,key");function P(t,e,n,r){var a,s=e.tag,c=e.data,u=e.children;if(r=r||c&&c.pre,e.elm=t,i(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(c)&&(o(a=c.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return v(e,n),!0;if(o(s)){if(o(u))if(t.hasChildNodes())if(o(a=c)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var f=!0,l=t.firstChild,p=0;p<u.length;p++){if(!l||!P(l,u[p],n,r)){f=!1;break}l=l.nextSibling}if(!f||l)return!1}else b(e,u,n);if(o(c)){var h=!1;for(var d in c)if(!T(d)){h=!0,w(e,n);break}!h&&c["class"]&&ye(c["class"])}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,s){if(!r(e)){var c=!1,l=[];if(r(t))c=!0,h(e,l);else{var p=o(t.nodeType);if(!p&&$o(t,e))$(t,e,l,null,null,s);else{if(p){if(1===t.nodeType&&t.hasAttribute(F)&&(t.removeAttribute(F),n=!0),i(n)&&P(t,e,l))return E(e,l,!0),t;t=f(t)}var d=t.elm,v=u.parentNode(d);if(h(e,l,d._leaveCb?null:v,u.nextSibling(d)),o(e.parent)){var y=e.parent,m=_(e);while(y){for(var g=0;g<a.destroy.length;++g)a.destroy[g](y);if(y.elm=e.elm,m){for(var b=0;b<a.create.length;++b)a.create[b](Ao,y);var w=y.data.hook.insert;if(w.merged)for(var O=1;O<w.fns.length;O++)w.fns[O]()}else jo(y);y=y.parent}}o(v)?C([t],0,0):o(t.tag)&&S(t)}}return E(e,l,c),e.elm}o(t)&&S(t)}}var Lo={create:Io,update:Io,destroy:function(t){Io(t,Ao)}};function Io(t,e){(t.data.directives||e.data.directives)&&Mo(t,e)}function Mo(t,e){var n,r,o,i=t===Ao,a=e===Ao,s=Ro(t.data.directives,t.context),c=Ro(e.data.directives,e.context),u=[],f=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Fo(o,"update",e,t),o.def&&o.def.componentUpdated&&f.push(o)):(Fo(o,"bind",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var l=function(){for(var n=0;n<u.length;n++)Fo(u[n],"inserted",e,t)};i?we(e,"insert",l):l()}if(f.length&&we(e,"postpatch",(function(){for(var n=0;n<f.length;n++)Fo(f[n],"componentUpdated",e,t)})),!i)for(n in s)c[n]||Fo(s[n],"unbind",t,t,a)}var No=Object.create(null);function Ro(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)r=t[n],r.modifiers||(r.modifiers=No),o[Do(r)]=r,r.def=Wt(e.$options,"directives",r.name,!0);return o}function Do(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Fo(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(xa){ee(xa,n.context,"directive "+t.name+" "+e+" hook")}}var Vo=[Co,Lo];function Bo(t,e){var n=e.componentOptions;if((!o(n)||!1!==n.Ctor.options.inheritAttrs)&&(!r(t.data.attrs)||!r(e.data.attrs))){var i,a,s,c=e.elm,u=t.data.attrs||{},f=e.data.attrs||{};for(i in o(f.__ob__)&&(f=e.data.attrs=T({},f)),f)a=f[i],s=u[i],s!==a&&Uo(c,i,a);for(i in(tt||nt)&&f.value!==u.value&&Uo(c,"value",f.value),u)r(f[i])&&(qr(i)?c.removeAttributeNS(Gr,Kr(i)):Br(i)||c.removeAttribute(i))}}function Uo(t,e,n){t.tagName.indexOf("-")>-1?zo(t,e,n):Hr(e)?Xr(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Br(e)?t.setAttribute(e,zr(e,n)):qr(e)?Xr(n)?t.removeAttributeNS(Gr,Kr(e)):t.setAttributeNS(Gr,e,n):zo(t,e,n)}function zo(t,e,n){if(Xr(n))t.removeAttribute(e);else{if(tt&&!et&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var Ho={create:Bo,update:Bo};function Go(t,e){var n=e.elm,i=e.data,a=t.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=Wr(e),c=n._transitionClasses;o(c)&&(s=Qr(s,Zr(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var qo,Ko={create:Go,update:Go},Xo="__r",Wo="__c";function Jo(t){if(o(t[Xo])){var e=tt?"change":"input";t[e]=[].concat(t[Xo],t[e]||[]),delete t[Xo]}o(t[Wo])&&(t.change=[].concat(t[Wo],t.change||[]),delete t[Wo])}function Yo(t,e,n){var r=qo;return function o(){var i=e.apply(null,arguments);null!==i&&ti(t,o,n,r)}}var Qo=ae&&!(ot&&Number(ot[1])<=53);function Zo(t,e,n,r){if(Qo){var o=Kn,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}qo.addEventListener(t,e,at?{capture:n,passive:r}:n)}function ti(t,e,n,r){(r||qo).removeEventListener(t,e._wrapper||e,n)}function ei(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=e.data.on||{},o=t.data.on||{};qo=e.elm,Jo(n),_e(n,o,Zo,ti,Yo,e.context),qo=void 0}}var ni,ri={create:ei,update:ei};function oi(t,e){if(!r(t.data.domProps)||!r(e.data.domProps)){var n,i,a=e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n in o(c.__ob__)&&(c=e.data.domProps=T({},c)),s)n in c||(a[n]="");for(n in c){if(i=c[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),i===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=i;var u=r(i)?"":String(i);ii(a,u)&&(a.value=u)}else if("innerHTML"===n&&oo(a.tagName)&&r(a.innerHTML)){ni=ni||document.createElement("div"),ni.innerHTML="<svg>"+i+"</svg>";var f=ni.firstChild;while(a.firstChild)a.removeChild(a.firstChild);while(f.firstChild)a.appendChild(f.firstChild)}else if(i!==s[n])try{a[n]=i}catch(xa){}}}}function ii(t,e){return!t.composing&&("OPTION"===t.tagName||ai(t,e)||si(t,e))}function ai(t,e){var n=!0;try{n=document.activeElement!==t}catch(xa){}return n&&t.value!==e}function si(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.number)return v(n)!==v(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}var ci={create:oi,update:oi},ui=w((function(t){var e={},n=/;(?![^(]*\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function fi(t){var e=li(t.style);return t.staticStyle?T(t.staticStyle,e):e}function li(t){return Array.isArray(t)?P(t):"string"===typeof t?ui(t):t}function pi(t,e){var n,r={};if(e){var o=t;while(o.componentInstance)o=o.componentInstance._vnode,o&&o.data&&(n=fi(o.data))&&T(r,n)}(n=fi(t.data))&&T(r,n);var i=t;while(i=i.parent)i.data&&(n=fi(i.data))&&T(r,n);return r}var hi,di=/^--/,vi=/\s*!important$/,yi=function(t,e,n){if(di.test(e))t.style.setProperty(e,n);else if(vi.test(n))t.style.setProperty(j(e),n.replace(vi,""),"important");else{var r=gi(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},mi=["Webkit","Moz","ms"],gi=w((function(t){if(hi=hi||document.createElement("div").style,t=x(t),"filter"!==t&&t in hi)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<mi.length;n++){var r=mi[n]+e;if(r in hi)return r}}));function bi(t,e){var n=e.data,i=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var a,s,c=e.elm,u=i.staticStyle,f=i.normalizedStyle||i.style||{},l=u||f,p=li(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?T({},p):p;var h=pi(e,!0);for(s in l)r(h[s])&&yi(c,s,"");for(s in h)a=h[s],a!==l[s]&&yi(c,s,null==a?"":a)}}var _i={create:bi,update:bi},wi=/\s+/;function Oi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(wi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function xi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(wi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";while(n.indexOf(r)>=0)n=n.replace(r," ");n=n.trim(),n?t.setAttribute("class",n):t.removeAttribute("class")}}function Si(t){if(t){if("object"===typeof t){var e={};return!1!==t.css&&T(e,Ci(t.name||"v")),T(e,t),e}return"string"===typeof t?Ci(t):void 0}}var Ci=w((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),ji=J&&!et,Ai="transition",ki="animation",$i="transition",Ei="transitionend",Ti="animation",Pi="animationend";ji&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&($i="WebkitTransition",Ei="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ti="WebkitAnimation",Pi="webkitAnimationEnd"));var Li=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Ii(t){Li((function(){Li(t)}))}function Mi(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Oi(t,e))}function Ni(t,e){t._transitionClasses&&g(t._transitionClasses,e),xi(t,e)}function Ri(t,e,n){var r=Fi(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===Ai?Ei:Pi,c=0,u=function(){t.removeEventListener(s,f),n()},f=function(e){e.target===t&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,f)}var Di=/\b(transform|all)(,|$)/;function Fi(t,e){var n,r=window.getComputedStyle(t),o=(r[$i+"Delay"]||"").split(", "),i=(r[$i+"Duration"]||"").split(", "),a=Vi(o,i),s=(r[Ti+"Delay"]||"").split(", "),c=(r[Ti+"Duration"]||"").split(", "),u=Vi(s,c),f=0,l=0;e===Ai?a>0&&(n=Ai,f=a,l=i.length):e===ki?u>0&&(n=ki,f=u,l=c.length):(f=Math.max(a,u),n=f>0?a>u?Ai:ki:null,l=n?n===Ai?i.length:c.length:0);var p=n===Ai&&Di.test(r[$i+"Property"]);return{type:n,timeout:f,propCount:l,hasTransform:p}}function Vi(t,e){while(t.length<e.length)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return Bi(e)+Bi(t[n])})))}function Bi(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Ui(t,e){var n=t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Si(t.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){var a=i.css,s=i.type,u=i.enterClass,f=i.enterToClass,l=i.enterActiveClass,p=i.appearClass,h=i.appearToClass,d=i.appearActiveClass,y=i.beforeEnter,m=i.enter,g=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,w=i.appear,O=i.afterAppear,x=i.appearCancelled,S=i.duration,C=En,j=En.$vnode;while(j&&j.parent)C=j.context,j=j.parent;var A=!C._isMounted||!t.isRootInsert;if(!A||w||""===w){var k=A&&p?p:u,$=A&&d?d:l,E=A&&h?h:f,T=A&&_||y,P=A&&"function"===typeof w?w:m,L=A&&O||g,I=A&&x||b,M=v(c(S)?S.enter:S);0;var N=!1!==a&&!et,R=Gi(P),F=n._enterCb=D((function(){N&&(Ni(n,E),Ni(n,$)),F.cancelled?(N&&Ni(n,k),I&&I(n)):L&&L(n),n._enterCb=null}));t.data.show||we(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),P&&P(n,F)})),T&&T(n),N&&(Mi(n,k),Mi(n,$),Ii((function(){Ni(n,k),F.cancelled||(Mi(n,E),R||(Hi(M)?setTimeout(F,M):Ri(n,s,F)))}))),t.data.show&&(e&&e(),P&&P(n,F)),N||R||F()}}}function zi(t,e){var n=t.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Si(t.data.transition);if(r(i)||1!==n.nodeType)return e();if(!o(n._leaveCb)){var a=i.css,s=i.type,u=i.leaveClass,f=i.leaveToClass,l=i.leaveActiveClass,p=i.beforeLeave,h=i.leave,d=i.afterLeave,y=i.leaveCancelled,m=i.delayLeave,g=i.duration,b=!1!==a&&!et,_=Gi(h),w=v(c(g)?g.leave:g);0;var O=n._leaveCb=D((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(Ni(n,f),Ni(n,l)),O.cancelled?(b&&Ni(n,u),y&&y(n)):(e(),d&&d(n)),n._leaveCb=null}));m?m(x):x()}function x(){O.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),b&&(Mi(n,u),Mi(n,l),Ii((function(){Ni(n,u),O.cancelled||(Mi(n,f),_||(Hi(w)?setTimeout(O,w):Ri(n,s,O)))}))),h&&h(n,O),b||_||O())}}function Hi(t){return"number"===typeof t&&!isNaN(t)}function Gi(t){if(r(t))return!1;var e=t.fns;return o(e)?Gi(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function qi(t,e){!0!==e.data.show&&Ui(e)}var Ki=J?{create:qi,activate:qi,remove:function(t,e){!0!==t.data.show?zi(t,e):e()}}:{},Xi=[Ho,Ko,ri,ci,_i,Ki],Wi=Xi.concat(Vo),Ji=Po({nodeOps:So,modules:Wi});et&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&oa(t,"input")}));var Yi={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?we(n,"postpatch",(function(){Yi.componentUpdated(t,e,n)})):Qi(t,e,n.context),t._vOptions=[].map.call(t.options,ea)):("textarea"===n.tag||uo(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",na),t.addEventListener("compositionend",ra),t.addEventListener("change",ra),et&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Qi(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,ea);if(o.some((function(t,e){return!N(t,r[e])}))){var i=t.multiple?e.value.some((function(t){return ta(t,o)})):e.value!==e.oldValue&&ta(e.value,o);i&&oa(t,"change")}}}};function Qi(t,e,n){Zi(t,e,n),(tt||nt)&&setTimeout((function(){Zi(t,e,n)}),0)}function Zi(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=R(r,ea(a))>-1,a.selected!==i&&(a.selected=i);else if(N(ea(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function ta(t,e){return e.every((function(e){return!N(e,t)}))}function ea(t){return"_value"in t?t._value:t.value}function na(t){t.target.composing=!0}function ra(t){t.target.composing&&(t.target.composing=!1,oa(t.target,"input"))}function oa(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function ia(t){return!t.componentInstance||t.data&&t.data.transition?t:ia(t.componentInstance._vnode)}var aa={bind:function(t,e,n){var r=e.value;n=ia(n);var o=n.data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,Ui(n,(function(){t.style.display=i}))):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value,o=e.oldValue;if(!r!==!o){n=ia(n);var i=n.data&&n.data.transition;i?(n.data.show=!0,r?Ui(n,(function(){t.style.display=t.__vOriginalDisplay})):zi(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none"}},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}},sa={model:Yi,show:aa},ca={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ua(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ua(xn(e.children)):t}function fa(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[x(i)]=o[i];return e}function la(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}function pa(t){while(t=t.parent)if(t.data.transition)return!0}function ha(t,e){return e.key===t.key&&e.tag===t.tag}var da=function(t){return t.tag||On(t)},va=function(t){return"show"===t.name},ya={name:"transition",props:ca,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(da),n.length)){0;var r=this.mode;0;var o=n[0];if(pa(this.$vnode))return o;var i=ua(o);if(!i)return o;if(this._leaving)return la(t,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=fa(this),u=this._vnode,f=ua(u);if(i.data.directives&&i.data.directives.some(va)&&(i.data.show=!0),f&&f.data&&!ha(i,f)&&!On(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var l=f.data.transition=T({},c);if("out-in"===r)return this._leaving=!0,we(l,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),la(t,o);if("in-out"===r){if(On(i))return u;var p,h=function(){p()};we(c,"afterEnter",h),we(c,"enterCancelled",h),we(l,"delayLeave",(function(t){p=t}))}}return o}}},ma=T({tag:String,moveClass:String},ca);delete ma.mode;var ga={props:ma,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Tn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=fa(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var u=[],f=[],l=0;l<r.length;l++){var p=r[l];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):f.push(p)}this.kept=t(e,null,u),this.removed=f}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(ba),t.forEach(_a),t.forEach(wa),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;Mi(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Ei,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Ei,t),n._moveCb=null,Ni(n,e))})}})))},methods:{hasMove:function(t,e){if(!ji)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){xi(n,t)})),Oi(n,e),n.style.display="none",this.$el.appendChild(n);var r=Fi(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function ba(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function _a(t){t.data.newPos=t.elm.getBoundingClientRect()}function wa(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}var Oa={Transition:ya,TransitionGroup:ga};xr.config.mustUseProp=Vr,xr.config.isReservedTag=io,xr.config.isReservedAttr=Dr,xr.config.getTagNamespace=ao,xr.config.isUnknownElement=co,T(xr.options.directives,sa),T(xr.options.components,Oa),xr.prototype.__patch__=J?Ji:L,xr.prototype.$mount=function(t,e){return t=t&&J?fo(t):void 0,In(this,t,e)},J&&setTimeout((function(){U.devtools&&ut&&ut.emit("init",xr)}),0),e["a"]=xr}).call(this,n("c8ba"))},"2cf4":function(t,e,n){var r,o,i,a=n("da84"),s=n("d039"),c=n("c6b6"),u=n("0366"),f=n("1be4"),l=n("cc12"),p=n("1cdc"),h=a.location,d=a.setImmediate,v=a.clearImmediate,y=a.process,m=a.MessageChannel,g=a.Dispatch,b=0,_={},w="onreadystatechange",O=function(t){if(_.hasOwnProperty(t)){var e=_[t];delete _[t],e()}},x=function(t){return function(){O(t)}},S=function(t){O(t.data)},C=function(t){a.postMessage(t+"",h.protocol+"//"+h.host)};d&&v||(d=function(t){var e=[],n=1;while(arguments.length>n)e.push(arguments[n++]);return _[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},v=function(t){delete _[t]},"process"==c(y)?r=function(t){y.nextTick(x(t))}:g&&g.now?r=function(t){g.now(x(t))}:m&&!p?(o=new m,i=o.port2,o.port1.onmessage=S,r=u(i.postMessage,i,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||s(C)?r=w in l("script")?function(t){f.appendChild(l("script"))[w]=function(){f.removeChild(this),O(t)}}:function(t){setTimeout(x(t),0)}:(r=C,a.addEventListener("message",S,!1))),t.exports={set:d,clear:v}},"2d00":function(t,e,n){var r,o,i=n("da84"),a=n("342f"),s=i.process,c=s&&s.versions,u=c&&c.v8;u?(r=u.split("."),o=r[0]+r[1]):a&&(r=a.match(/Edge\/(\d+)/),(!r||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/),r&&(o=r[1]))),t.exports=o&&+o},"2f62":function(t,e,n){"use strict";(function(t){
/**
 * vuex v3.1.3
 * (c) 2020 Evan You
 * @license MIT
 */
function r(t){var e=Number(t.version.split(".")[0]);if(e>=2)t.mixin({beforeCreate:r});else{var n=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[r].concat(t.init):r,n.call(this,t)}}function r(){var t=this.$options;t.store?this.$store="function"===typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}}n.d(e,"b",(function(){return T}));var o="undefined"!==typeof window?window:"undefined"!==typeof t?t:{},i=o.__VUE_DEVTOOLS_GLOBAL_HOOK__;function a(t){i&&(t._devtoolHook=i,i.emit("vuex:init",t),i.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){i.emit("vuex:mutation",t,e)})))}function s(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}function c(t){return null!==t&&"object"===typeof t}function u(t){return t&&"function"===typeof t.then}function f(t,e){return function(){return t(e)}}var l=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"===typeof n?n():n)||{}},p={namespaced:{configurable:!0}};p.namespaced.get=function(){return!!this._rawModule.namespaced},l.prototype.addChild=function(t,e){this._children[t]=e},l.prototype.removeChild=function(t){delete this._children[t]},l.prototype.getChild=function(t){return this._children[t]},l.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},l.prototype.forEachChild=function(t){s(this._children,t)},l.prototype.forEachGetter=function(t){this._rawModule.getters&&s(this._rawModule.getters,t)},l.prototype.forEachAction=function(t){this._rawModule.actions&&s(this._rawModule.actions,t)},l.prototype.forEachMutation=function(t){this._rawModule.mutations&&s(this._rawModule.mutations,t)},Object.defineProperties(l.prototype,p);var h=function(t){this.register([],t,!1)};function d(t,e,n){if(e.update(n),n.modules)for(var r in n.modules){if(!e.getChild(r))return void 0;d(t.concat(r),e.getChild(r),n.modules[r])}}h.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},h.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return e=e.getChild(n),t+(e.namespaced?n+"/":"")}),"")},h.prototype.update=function(t){d([],this.root,t)},h.prototype.register=function(t,e,n){var r=this;void 0===n&&(n=!0);var o=new l(e,n);if(0===t.length)this.root=o;else{var i=this.get(t.slice(0,-1));i.addChild(t[t.length-1],o)}e.modules&&s(e.modules,(function(e,o){r.register(t.concat(o),e,n)}))},h.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];e.getChild(n).runtime&&e.removeChild(n)};var v;var y=function(t){var e=this;void 0===t&&(t={}),!v&&"undefined"!==typeof window&&window.Vue&&E(window.Vue);var n=t.plugins;void 0===n&&(n=[]);var r=t.strict;void 0===r&&(r=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new h(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new v,this._makeLocalGettersCache=Object.create(null);var o=this,i=this,s=i.dispatch,c=i.commit;this.dispatch=function(t,e){return s.call(o,t,e)},this.commit=function(t,e,n){return c.call(o,t,e,n)},this.strict=r;var u=this._modules.root.state;w(this,u,[],this._modules.root),_(this,u),n.forEach((function(t){return t(e)}));var f=void 0!==t.devtools?t.devtools:v.config.devtools;f&&a(this)},m={state:{configurable:!0}};function g(t,e){return e.indexOf(t)<0&&e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function b(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;w(t,n,[],t._modules.root,!0),_(t,n,e)}function _(t,e,n){var r=t._vm;t.getters={},t._makeLocalGettersCache=Object.create(null);var o=t._wrappedGetters,i={};s(o,(function(e,n){i[n]=f(e,t),Object.defineProperty(t.getters,n,{get:function(){return t._vm[n]},enumerable:!0})}));var a=v.config.silent;v.config.silent=!0,t._vm=new v({data:{$$state:e},computed:i}),v.config.silent=a,t.strict&&A(t),r&&(n&&t._withCommit((function(){r._data.$$state=null})),v.nextTick((function(){return r.$destroy()})))}function w(t,e,n,r,o){var i=!n.length,a=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[a],t._modulesNamespaceMap[a]=r),!i&&!o){var s=k(e,n.slice(0,-1)),c=n[n.length-1];t._withCommit((function(){v.set(s,c,r.state)}))}var u=r.context=O(t,a,n);r.forEachMutation((function(e,n){var r=a+n;S(t,r,e,u)})),r.forEachAction((function(e,n){var r=e.root?n:a+n,o=e.handler||e;C(t,r,o,u)})),r.forEachGetter((function(e,n){var r=a+n;j(t,r,e,u)})),r.forEachChild((function(r,i){w(t,e,n.concat(i),r,o)}))}function O(t,e,n){var r=""===e,o={dispatch:r?t.dispatch:function(n,r,o){var i=$(n,r,o),a=i.payload,s=i.options,c=i.type;return s&&s.root||(c=e+c),t.dispatch(c,a)},commit:r?t.commit:function(n,r,o){var i=$(n,r,o),a=i.payload,s=i.options,c=i.type;s&&s.root||(c=e+c),t.commit(c,a,s)}};return Object.defineProperties(o,{getters:{get:r?function(){return t.getters}:function(){return x(t,e)}},state:{get:function(){return k(t.state,n)}}}),o}function x(t,e){if(!t._makeLocalGettersCache[e]){var n={},r=e.length;Object.keys(t.getters).forEach((function(o){if(o.slice(0,r)===e){var i=o.slice(r);Object.defineProperty(n,i,{get:function(){return t.getters[o]},enumerable:!0})}})),t._makeLocalGettersCache[e]=n}return t._makeLocalGettersCache[e]}function S(t,e,n,r){var o=t._mutations[e]||(t._mutations[e]=[]);o.push((function(e){n.call(t,r.state,e)}))}function C(t,e,n,r){var o=t._actions[e]||(t._actions[e]=[]);o.push((function(e){var o=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e);return u(o)||(o=Promise.resolve(o)),t._devtoolHook?o.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):o}))}function j(t,e,n,r){t._wrappedGetters[e]||(t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)})}function A(t){t._vm.$watch((function(){return this._data.$$state}),(function(){0}),{deep:!0,sync:!0})}function k(t,e){return e.reduce((function(t,e){return t[e]}),t)}function $(t,e,n){return c(t)&&t.type&&(n=e,e=t,t=t.type),{type:t,payload:e,options:n}}function E(t){v&&t===v||(v=t,r(v))}m.state.get=function(){return this._vm._data.$$state},m.state.set=function(t){0},y.prototype.commit=function(t,e,n){var r=this,o=$(t,e,n),i=o.type,a=o.payload,s=(o.options,{type:i,payload:a}),c=this._mutations[i];c&&(this._withCommit((function(){c.forEach((function(t){t(a)}))})),this._subscribers.slice().forEach((function(t){return t(s,r.state)})))},y.prototype.dispatch=function(t,e){var n=this,r=$(t,e),o=r.type,i=r.payload,a={type:o,payload:i},s=this._actions[o];if(s){try{this._actionSubscribers.slice().filter((function(t){return t.before})).forEach((function(t){return t.before(a,n.state)}))}catch(u){0}var c=s.length>1?Promise.all(s.map((function(t){return t(i)}))):s[0](i);return c.then((function(t){try{n._actionSubscribers.filter((function(t){return t.after})).forEach((function(t){return t.after(a,n.state)}))}catch(u){0}return t}))}},y.prototype.subscribe=function(t){return g(t,this._subscribers)},y.prototype.subscribeAction=function(t){var e="function"===typeof t?{before:t}:t;return g(e,this._actionSubscribers)},y.prototype.watch=function(t,e,n){var r=this;return this._watcherVM.$watch((function(){return t(r.state,r.getters)}),e,n)},y.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._vm._data.$$state=t}))},y.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"===typeof t&&(t=[t]),this._modules.register(t,e),w(this,this.state,t,this._modules.get(t),n.preserveState),_(this,this.state)},y.prototype.unregisterModule=function(t){var e=this;"string"===typeof t&&(t=[t]),this._modules.unregister(t),this._withCommit((function(){var n=k(e.state,t.slice(0,-1));v.delete(n,t[t.length-1])})),b(this)},y.prototype.hotUpdate=function(t){this._modules.update(t),b(this,!0)},y.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(y.prototype,m);var T=D((function(t,e){var n={};return N(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=F(this.$store,"mapState",t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"===typeof o?o.call(this,e,n):e[o]},n[r].vuex=!0})),n})),P=D((function(t,e){var n={};return N(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.commit;if(t){var i=F(this.$store,"mapMutations",t);if(!i)return;r=i.context.commit}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),L=D((function(t,e){var n={};return N(e).forEach((function(e){var r=e.key,o=e.val;o=t+o,n[r]=function(){if(!t||F(this.$store,"mapGetters",t))return this.$store.getters[o]},n[r].vuex=!0})),n})),I=D((function(t,e){var n={};return N(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var i=F(this.$store,"mapActions",t);if(!i)return;r=i.context.dispatch}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),M=function(t){return{mapState:T.bind(null,t),mapGetters:L.bind(null,t),mapMutations:P.bind(null,t),mapActions:I.bind(null,t)}};function N(t){return R(t)?Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}})):[]}function R(t){return Array.isArray(t)||c(t)}function D(t){return function(e,n){return"string"!==typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function F(t,e,n){var r=t._modulesNamespaceMap[n];return r}var V={Store:y,install:E,version:"3.1.3",mapState:T,mapMutations:P,mapGetters:L,mapActions:I,createNamespacedHelpers:M};e["a"]=V}).call(this,n("c8ba"))},"342f":function(t,e,n){var r=n("d066");t.exports=r("navigator","userAgent")||""},"35a1":function(t,e,n){var r=n("f5df"),o=n("3f8c"),i=n("b622"),a=i("iterator");t.exports=function(t){if(void 0!=t)return t[a]||t["@@iterator"]||o[r(t)]}},"37e8":function(t,e,n){var r=n("83ab"),o=n("9bf2"),i=n("825a"),a=n("df75");t.exports=r?Object.defineProperties:function(t,e){i(t);var n,r=a(e),s=r.length,c=0;while(s>c)o.f(t,n=r[c++],e[n]);return t}},"3bbe":function(t,e,n){var r=n("861d");t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},"3bfa":function(t,e,n){},"3ca3":function(t,e,n){"use strict";var r=n("6547").charAt,o=n("69f3"),i=n("7dd0"),a="String Iterator",s=o.set,c=o.getterFor(a);i(String,"String",(function(t){s(this,{type:a,string:String(t),index:0})}),(function(){var t,e=c(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},"3f8c":function(t,e){t.exports={}},4160:function(t,e,n){"use strict";var r=n("23e7"),o=n("17c2");r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},"428f":function(t,e,n){var r=n("da84");t.exports=r},4348:function(t,e,n){"use strict";var r=n("3bfa"),o=n.n(r);o.a},"44ad":function(t,e,n){var r=n("d039"),o=n("c6b6"),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},"44d2":function(t,e,n){var r=n("b622"),o=n("7c73"),i=n("9bf2"),a=r("unscopables"),s=Array.prototype;void 0==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),t.exports=function(t){s[a][t]=!0}},"44de":function(t,e,n){var r=n("da84");t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},4840:function(t,e,n){var r=n("825a"),o=n("1c0b"),i=n("b622"),a=i("species");t.exports=function(t,e){var n,i=r(t).constructor;return void 0===i||void 0==(n=r(i)[a])?e:o(n)}},4930:function(t,e,n){var r=n("d039");t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},"4a7a":function(t,e,n){!function(e,n){t.exports=n()}("undefined"!=typeof self&&self,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=8)}([function(t,e,n){var r=n(4),o=n(5),i=n(6);t.exports=function(t){return r(t)||o(t)||i()}},function(t,e){function n(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=n=function(t){return typeof t}:t.exports=n=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(e)}t.exports=n},function(t,e,n){},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e){t.exports=function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}},function(t,e){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(t,e,n){"use strict";var r=n(2);n.n(r).a},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r),i=n(1),a=n.n(i),s=n(3),c=n.n(s),u={watch:{typeAheadPointer:function(){this.maybeAdjustScroll()}},methods:{maybeAdjustScroll:function(){var t=this.pixelsToPointerTop(),e=this.pixelsToPointerBottom();return t<=this.viewport().top?this.scrollTo(t):e>=this.viewport().bottom?this.scrollTo(this.viewport().top+this.pointerHeight()):void 0},pixelsToPointerTop:function(){var t=0;if(this.$refs.dropdownMenu&&this.dropdownOpen)for(var e=0;e<this.typeAheadPointer;e++)t+=this.$refs.dropdownMenu.children[e].offsetHeight;return t},pixelsToPointerBottom:function(){return this.pixelsToPointerTop()+this.pointerHeight()},pointerHeight:function(){var t=!!this.$refs.dropdownMenu&&this.$refs.dropdownMenu.children[this.typeAheadPointer];return t?t.offsetHeight:0},viewport:function(){return{top:this.$refs.dropdownMenu?this.$refs.dropdownMenu.scrollTop:0,bottom:this.$refs.dropdownMenu?this.$refs.dropdownMenu.offsetHeight+this.$refs.dropdownMenu.scrollTop:0}},scrollTo:function(t){return this.$refs.dropdownMenu?this.$refs.dropdownMenu.scrollTop=t:null}}},f={data:function(){return{typeAheadPointer:-1}},watch:{filteredOptions:function(){for(var t=0;t<this.filteredOptions.length;t++)if(this.selectable(this.filteredOptions[t])){this.typeAheadPointer=t;break}}},methods:{typeAheadUp:function(){for(var t=this.typeAheadPointer-1;t>=0;t--)if(this.selectable(this.filteredOptions[t])){this.typeAheadPointer=t,this.maybeAdjustScroll&&this.maybeAdjustScroll();break}},typeAheadDown:function(){for(var t=this.typeAheadPointer+1;t<this.filteredOptions.length;t++)if(this.selectable(this.filteredOptions[t])){this.typeAheadPointer=t,this.maybeAdjustScroll&&this.maybeAdjustScroll();break}},typeAheadSelect:function(){var t=this.filteredOptions[this.typeAheadPointer];t?this.select(t):this.taggable&&this.search.length&&this.select(this.createOption(this.search)),this.clearSearchOnSelect&&(this.search="")}}},l={props:{loading:{type:Boolean,default:!1}},data:function(){return{mutableLoading:!1}},watch:{search:function(){this.$emit("search",this.search,this.toggleLoading)},loading:function(t){this.mutableLoading=t}},methods:{toggleLoading:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.mutableLoading=null==t?!this.mutableLoading:t}}};function p(t,e,n,r,o,i,a,s){var c,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var f=u.render;u.render=function(t,e){return c.call(e),f(t,e)}}else{var l=u.beforeCreate;u.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:u}}var h={Deselect:p({},(function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"10",height:"10"}},[e("path",{attrs:{d:"M6.895455 5l2.842897-2.842898c.348864-.348863.348864-.914488 0-1.263636L9.106534.261648c-.348864-.348864-.914489-.348864-1.263636 0L5 3.104545 2.157102.261648c-.348863-.348864-.914488-.348864-1.263636 0L.261648.893466c-.348864.348864-.348864.914489 0 1.263636L3.104545 5 .261648 7.842898c-.348864.348863-.348864.914488 0 1.263636l.631818.631818c.348864.348864.914773.348864 1.263636 0L5 6.895455l2.842898 2.842897c.348863.348864.914772.348864 1.263636 0l.631818-.631818c.348864-.348864.348864-.914489 0-1.263636L6.895455 5z"}})])}),[],!1,null,null,null).exports,OpenIndicator:p({},(function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"10"}},[e("path",{attrs:{d:"M9.211364 7.59931l4.48338-4.867229c.407008-.441854.407008-1.158247 0-1.60046l-.73712-.80023c-.407008-.441854-1.066904-.441854-1.474243 0L7 5.198617 2.51662.33139c-.407008-.441853-1.066904-.441853-1.474243 0l-.737121.80023c-.407008.441854-.407008 1.158248 0 1.600461l4.48338 4.867228L7 10l2.211364-2.40069z"}})])}),[],!1,null,null,null).exports},d={inserted:function(t,e,n){var r=n.context;if(r.appendToBody){var o=r.$refs.toggle.getBoundingClientRect(),i=o.height,a=o.top,s=o.left,c=o.width;t.unbindPosition=r.calculatePosition(t,r,{width:c+"px",top:window.scrollY+a+i+"px",left:window.scrollX+s+"px"}),document.body.appendChild(t)}},unbind:function(t,e,n){n.context.appendToBody&&(t.unbindPosition&&"function"==typeof t.unbindPosition&&t.unbindPosition(),t.parentNode&&t.parentNode.removeChild(t))}},v=function(t){var e={};return Object.keys(t).sort().forEach((function(n){e[n]=t[n]})),JSON.stringify(e)},y=0,m=function(){return++y};function g(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function b(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?g(Object(n),!0).forEach((function(e){c()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var _={components:b({},h),mixins:[u,f,l],directives:{appendToBody:d},props:{value:{},components:{type:Object,default:function(){return{}}},options:{type:Array,default:function(){return[]}},disabled:{type:Boolean,default:!1},clearable:{type:Boolean,default:!0},searchable:{type:Boolean,default:!0},multiple:{type:Boolean,default:!1},placeholder:{type:String,default:""},transition:{type:String,default:"vs__fade"},clearSearchOnSelect:{type:Boolean,default:!0},closeOnSelect:{type:Boolean,default:!0},label:{type:String,default:"label"},autocomplete:{type:String,default:"off"},reduce:{type:Function,default:function(t){return t}},selectable:{type:Function,default:function(t){return!0}},getOptionLabel:{type:Function,default:function(t){return"object"===a()(t)?t.hasOwnProperty(this.label)?t[this.label]:console.warn('[vue-select warn]: Label key "option.'.concat(this.label,'" does not')+" exist in options object ".concat(JSON.stringify(t),".\n")+"https://vue-select.org/api/props.html#getoptionlabel"):t}},getOptionKey:{type:Function,default:function(t){if("object"!==a()(t))return t;try{return t.hasOwnProperty("id")?t.id:v(t)}catch(e){return console.warn("[vue-select warn]: Could not stringify this option to generate unique key. Please provide'getOptionKey' prop to return a unique key for each option.\nhttps://vue-select.org/api/props.html#getoptionkey",t,e)}}},onTab:{type:Function,default:function(){this.selectOnTab&&!this.isComposing&&this.typeAheadSelect()}},taggable:{type:Boolean,default:!1},tabindex:{type:Number,default:null},pushTags:{type:Boolean,default:!1},filterable:{type:Boolean,default:!0},filterBy:{type:Function,default:function(t,e,n){return(e||"").toLowerCase().indexOf(n.toLowerCase())>-1}},filter:{type:Function,default:function(t,e){var n=this;return t.filter((function(t){var r=n.getOptionLabel(t);return"number"==typeof r&&(r=r.toString()),n.filterBy(t,r,e)}))}},createOption:{type:Function,default:function(t){return"object"===a()(this.optionList[0])?c()({},this.label,t):t}},resetOnOptionsChange:{default:!1,validator:function(t){return["function","boolean"].includes(a()(t))}},clearSearchOnBlur:{type:Function,default:function(t){var e=t.clearSearchOnSelect,n=t.multiple;return e&&!n}},noDrop:{type:Boolean,default:!1},inputId:{type:String},dir:{type:String,default:"auto"},selectOnTab:{type:Boolean,default:!1},selectOnKeyCodes:{type:Array,default:function(){return[13]}},searchInputQuerySelector:{type:String,default:"[type=search]"},mapKeydown:{type:Function,default:function(t,e){return t}},appendToBody:{type:Boolean,default:!1},calculatePosition:{type:Function,default:function(t,e,n){var r=n.width,o=n.top,i=n.left;t.style.top=o,t.style.left=i,t.style.width=r}}},data:function(){return{uid:m(),search:"",open:!1,isComposing:!1,pushedTags:[],_value:[]}},watch:{options:function(t,e){var n=this;!this.taggable&&("function"==typeof n.resetOnOptionsChange?n.resetOnOptionsChange(t,e,n.selectedValue):n.resetOnOptionsChange)&&this.clearSelection(),this.value&&this.isTrackingValues&&this.setInternalValueFromOptions(this.value)},value:function(t){this.isTrackingValues&&this.setInternalValueFromOptions(t)},multiple:function(){this.clearSelection()},open:function(t){this.$emit(t?"open":"close")}},created:function(){this.mutableLoading=this.loading,void 0!==this.value&&this.isTrackingValues&&this.setInternalValueFromOptions(this.value),this.$on("option:created",this.pushTag)},methods:{setInternalValueFromOptions:function(t){var e=this;Array.isArray(t)?this.$data._value=t.map((function(t){return e.findOptionFromReducedValue(t)})):this.$data._value=this.findOptionFromReducedValue(t)},select:function(t){this.isOptionSelected(t)||(this.taggable&&!this.optionExists(t)&&this.$emit("option:created",t),this.multiple&&(t=this.selectedValue.concat(t)),this.updateValue(t)),this.onAfterSelect(t)},deselect:function(t){var e=this;this.updateValue(this.selectedValue.filter((function(n){return!e.optionComparator(n,t)})))},clearSelection:function(){this.updateValue(this.multiple?[]:null)},onAfterSelect:function(t){this.closeOnSelect&&(this.open=!this.open,this.searchEl.blur()),this.clearSearchOnSelect&&(this.search="")},updateValue:function(t){var e=this;this.isTrackingValues&&(this.$data._value=t),null!==t&&(t=Array.isArray(t)?t.map((function(t){return e.reduce(t)})):this.reduce(t)),this.$emit("input",t)},toggleDropdown:function(t){var e=t.target;[].concat(o()(this.$refs.deselectButtons||[]),o()([this.$refs.clearButton]||!1)).some((function(t){return t.contains(e)||t===e}))||(this.open?this.searchEl.blur():this.disabled||(this.open=!0,this.searchEl.focus()))},isOptionSelected:function(t){var e=this;return this.selectedValue.some((function(n){return e.optionComparator(n,t)}))},optionComparator:function(t,e){return this.getOptionKey(t)===this.getOptionKey(e)},findOptionFromReducedValue:function(t){var e=this,n=[].concat(o()(this.options),o()(this.pushedTags)).filter((function(n){return JSON.stringify(e.reduce(n))===JSON.stringify(t)}));return 1===n.length?n[0]:n.find((function(t){return e.optionComparator(t,e.$data._value)}))||t},closeSearchOptions:function(){this.open=!1,this.$emit("search:blur")},maybeDeleteValue:function(){if(!this.searchEl.value.length&&this.selectedValue&&this.selectedValue.length&&this.clearable){var t=null;this.multiple&&(t=o()(this.selectedValue.slice(0,this.selectedValue.length-1))),this.updateValue(t)}},optionExists:function(t){var e=this;return this.optionList.some((function(n){return e.optionComparator(n,t)}))},normalizeOptionForSlot:function(t){return"object"===a()(t)?t:c()({},this.label,t)},pushTag:function(t){this.pushedTags.push(t)},onEscape:function(){this.search.length?this.search="":this.searchEl.blur()},onSearchBlur:function(){if(!this.mousedown||this.searching){var t=this.clearSearchOnSelect,e=this.multiple;return this.clearSearchOnBlur({clearSearchOnSelect:t,multiple:e})&&(this.search=""),void this.closeSearchOptions()}this.mousedown=!1,0!==this.search.length||0!==this.options.length||this.closeSearchOptions()},onSearchFocus:function(){this.open=!0,this.$emit("search:focus")},onMousedown:function(){this.mousedown=!0},onMouseUp:function(){this.mousedown=!1},onSearchKeyDown:function(t){var e=this,n=function(t){return t.preventDefault(),!e.isComposing&&e.typeAheadSelect()},r={8:function(t){return e.maybeDeleteValue()},9:function(t){return e.onTab()},27:function(t){return e.onEscape()},38:function(t){return t.preventDefault(),e.typeAheadUp()},40:function(t){return t.preventDefault(),e.typeAheadDown()}};this.selectOnKeyCodes.forEach((function(t){return r[t]=n}));var o=this.mapKeydown(r,this);if("function"==typeof o[t.keyCode])return o[t.keyCode](t)}},computed:{isTrackingValues:function(){return void 0===this.value||this.$options.propsData.hasOwnProperty("reduce")},selectedValue:function(){var t=this.value;return this.isTrackingValues&&(t=this.$data._value),t?[].concat(t):[]},optionList:function(){return this.options.concat(this.pushTags?this.pushedTags:[])},searchEl:function(){return this.$scopedSlots.search?this.$refs.selectedOptions.querySelector(this.searchInputQuerySelector):this.$refs.search},scope:function(){var t=this,e={search:this.search,loading:this.loading,searching:this.searching,filteredOptions:this.filteredOptions};return{search:{attributes:b({disabled:this.disabled,placeholder:this.searchPlaceholder,tabindex:this.tabindex,readonly:!this.searchable,id:this.inputId,"aria-autocomplete":"list","aria-labelledby":"vs".concat(this.uid,"__combobox"),"aria-controls":"vs".concat(this.uid,"__listbox"),ref:"search",type:"search",autocomplete:this.autocomplete,value:this.search},this.dropdownOpen&&this.filteredOptions[this.typeAheadPointer]?{"aria-activedescendant":"vs".concat(this.uid,"__option-").concat(this.typeAheadPointer)}:{}),events:{compositionstart:function(){return t.isComposing=!0},compositionend:function(){return t.isComposing=!1},keydown:this.onSearchKeyDown,blur:this.onSearchBlur,focus:this.onSearchFocus,input:function(e){return t.search=e.target.value}}},spinner:{loading:this.mutableLoading},noOptions:{search:this.search,loading:this.loading,searching:this.searching},openIndicator:{attributes:{ref:"openIndicator",role:"presentation",class:"vs__open-indicator"}},listHeader:e,listFooter:e,header:b({},e,{deselect:this.deselect}),footer:b({},e,{deselect:this.deselect})}},childComponents:function(){return b({},h,{},this.components)},stateClasses:function(){return{"vs--open":this.dropdownOpen,"vs--single":!this.multiple,"vs--searching":this.searching&&!this.noDrop,"vs--searchable":this.searchable&&!this.noDrop,"vs--unsearchable":!this.searchable,"vs--loading":this.mutableLoading,"vs--disabled":this.disabled}},searching:function(){return!!this.search},dropdownOpen:function(){return!this.noDrop&&this.open&&!this.mutableLoading},searchPlaceholder:function(){if(this.isValueEmpty&&this.placeholder)return this.placeholder},filteredOptions:function(){var t=[].concat(this.optionList);if(!this.filterable&&!this.taggable)return t;var e=this.search.length?this.filter(t,this.search,this):t;return this.taggable&&this.search.length&&!this.optionExists(this.createOption(this.search))&&e.unshift(this.search),e},isValueEmpty:function(){return 0===this.selectedValue.length},showClearButton:function(){return!this.multiple&&this.clearable&&!this.open&&!this.isValueEmpty}}},w=(n(7),p(_,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"v-select",class:t.stateClasses,attrs:{dir:t.dir}},[t._t("header",null,null,t.scope.header),t._v(" "),n("div",{ref:"toggle",staticClass:"vs__dropdown-toggle",attrs:{id:"vs"+t.uid+"__combobox",role:"combobox","aria-expanded":t.dropdownOpen.toString(),"aria-owns":"vs"+t.uid+"__listbox","aria-label":"Search for option"},on:{mousedown:function(e){return e.preventDefault(),t.toggleDropdown(e)}}},[n("div",{ref:"selectedOptions",staticClass:"vs__selected-options"},[t._l(t.selectedValue,(function(e){return t._t("selected-option-container",[n("span",{key:t.getOptionKey(e),staticClass:"vs__selected"},[t._t("selected-option",[t._v("\n            "+t._s(t.getOptionLabel(e))+"\n          ")],null,t.normalizeOptionForSlot(e)),t._v(" "),t.multiple?n("button",{ref:"deselectButtons",refInFor:!0,staticClass:"vs__deselect",attrs:{disabled:t.disabled,type:"button",title:"Deselect "+t.getOptionLabel(e),"aria-label":"Deselect "+t.getOptionLabel(e)},on:{click:function(n){return t.deselect(e)}}},[n(t.childComponents.Deselect,{tag:"component"})],1):t._e()],2)],{option:t.normalizeOptionForSlot(e),deselect:t.deselect,multiple:t.multiple,disabled:t.disabled})})),t._v(" "),t._t("search",[n("input",t._g(t._b({staticClass:"vs__search"},"input",t.scope.search.attributes,!1),t.scope.search.events))],null,t.scope.search)],2),t._v(" "),n("div",{ref:"actions",staticClass:"vs__actions"},[n("button",{directives:[{name:"show",rawName:"v-show",value:t.showClearButton,expression:"showClearButton"}],ref:"clearButton",staticClass:"vs__clear",attrs:{disabled:t.disabled,type:"button",title:"Clear Selected","aria-label":"Clear Selected"},on:{click:t.clearSelection}},[n(t.childComponents.Deselect,{tag:"component"})],1),t._v(" "),t._t("open-indicator",[t.noDrop?t._e():n(t.childComponents.OpenIndicator,t._b({tag:"component"},"component",t.scope.openIndicator.attributes,!1))],null,t.scope.openIndicator),t._v(" "),t._t("spinner",[n("div",{directives:[{name:"show",rawName:"v-show",value:t.mutableLoading,expression:"mutableLoading"}],staticClass:"vs__spinner"},[t._v("Loading...")])],null,t.scope.spinner)],2)]),t._v(" "),n("transition",{attrs:{name:t.transition}},[t.dropdownOpen?n("ul",{directives:[{name:"append-to-body",rawName:"v-append-to-body"}],ref:"dropdownMenu",staticClass:"vs__dropdown-menu",attrs:{id:"vs"+t.uid+"__listbox",role:"listbox"},on:{mousedown:function(e){return e.preventDefault(),t.onMousedown(e)},mouseup:t.onMouseUp}},[t._t("list-header",null,null,t.scope.listHeader),t._v(" "),t._l(t.filteredOptions,(function(e,r){return n("li",{key:t.getOptionKey(e),staticClass:"vs__dropdown-option",class:{"vs__dropdown-option--selected":t.isOptionSelected(e),"vs__dropdown-option--highlight":r===t.typeAheadPointer,"vs__dropdown-option--disabled":!t.selectable(e)},attrs:{role:"option",id:"vs"+t.uid+"__option-"+r,"aria-selected":r===t.typeAheadPointer||null},on:{mouseover:function(n){t.selectable(e)&&(t.typeAheadPointer=r)},mousedown:function(n){n.preventDefault(),n.stopPropagation(),t.selectable(e)&&t.select(e)}}},[t._t("option",[t._v("\n          "+t._s(t.getOptionLabel(e))+"\n        ")],null,t.normalizeOptionForSlot(e))],2)})),t._v(" "),0===t.filteredOptions.length?n("li",{staticClass:"vs__no-options"},[t._t("no-options",[t._v("Sorry, no matching options.")],null,t.scope.noOptions)],2):t._e(),t._v(" "),t._t("list-footer",null,null,t.scope.listFooter)],2):n("ul",{staticStyle:{display:"none",visibility:"hidden"},attrs:{id:"vs"+t.uid+"__listbox",role:"listbox"}})]),t._v(" "),t._t("footer",null,null,t.scope.footer)],2)}),[],!1,null,null,null).exports),O={ajax:l,pointer:f,pointerScroll:u};n.d(e,"VueSelect",(function(){return w})),n.d(e,"mixins",(function(){return O})),e.default=w}])}))},"4d64":function(t,e,n){var r=n("fc6a"),o=n("50c4"),i=n("23cb"),a=function(t){return function(e,n,a){var s,c=r(e),u=o(c.length),f=i(a,u);if(t&&n!=n){while(u>f)if(s=c[f++],s!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},"4de4":function(t,e,n){"use strict";var r=n("23e7"),o=n("b727").filter,i=n("1dde"),a=n("ae40"),s=i("filter"),c=a("filter");r({target:"Array",proto:!0,forced:!s||!c},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},"50c4":function(t,e,n){var r=n("a691"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},5135:function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},5530:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));n("a4d3"),n("4de4"),n("4160"),n("e439"),n("dbb4"),n("b64b"),n("159b");function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}},5692:function(t,e,n){var r=n("c430"),o=n("c6cd");(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},"56ef":function(t,e,n){var r=n("d066"),o=n("241c"),i=n("7418"),a=n("825a");t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},5899:function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"58a8":function(t,e,n){var r=n("1d80"),o=n("5899"),i="["+o+"]",a=RegExp("^"+i+i+"*"),s=RegExp(i+i+"*$"),c=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(a,"")),2&t&&(n=n.replace(s,"")),n}};t.exports={start:c(1),end:c(2),trim:c(3)}},"5bc5":function(t,e,n){"use strict";n.r(e),n.d(e,"parse",(function(){return o})),n.d(e,"stringify",(function(){return i}));var r=function(t,e){
/*!
   * ISC License
   *
   * Copyright (c) 2018, Andrea Giammarchi, @WebReflection
   *
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
   * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
   * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
   * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
   * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
   * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
   * PERFORMANCE OF THIS SOFTWARE.
   */
var n={parse:function(t,e){var n=JSON.parse(t,s).map(a),i=n[0],c=e||r,u="object"===typeof i&&i?o(n,new Set,i,c):i;return c.call({"":u},"",u)},stringify:function(t,n,o){for(var a,s=new Map,c=[],u=[],f=n&&typeof n===typeof c?function(t,e){if(""===t||-1<n.indexOf(t))return e}:n||r,l=+i(s,c,f.call({"":t},"",t)),p=function(t,n){if(a)return a=!a,n;var r=f.call(this,t,n);switch(typeof r){case"object":if(null===r)return r;case e:return s.get(r)||i(s,c,r)}return r};l<c.length;l++)a=!0,u[l]=JSON.stringify(c[l],p,o);return"["+u.join(",")+"]"}};return n;function r(t,e){return e}function o(e,n,r,i){return Object.keys(r).reduce((function(r,a){var s=r[a];if(s instanceof t){var c=e[s];"object"!==typeof c||n.has(c)?r[a]=i.call(r,a,c):(n.add(c),r[a]=i.call(r,a,o(e,n,c,i)))}else r[a]=i.call(r,a,s);return r}),r)}function i(e,n,r){var o=t(n.push(r)-1);return e.set(r,o),o}function a(e){return e instanceof t?t(e):e}function s(n,r){return typeof r===e?new t(r):r}}(String,"string");e["default"]=r;var o=r.parse,i=r.stringify},"5c6c":function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},"604d":function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"int-pm",class:{"int-pm-vertical":t.vertical}},[n("button",{staticClass:"int-pm-btn",class:t.getBtnClass(!0),attrs:{"aria-label":t.decrementAriaLabel,disabled:t.disabled},on:{click:function(e){t.vertical?t.increment():t.decrement()}}},[t._t(t.vertical?"increment":"decrement",[t._v(t._s(t.vertical?"+":"-"))])],2),n("div",{ref:"spinbutton",staticClass:"int-pm-value",attrs:{role:"spinbutton",tabindex:"0","aria-valuenow":t.value,"aria-valuemin":t.min,"aria-valuemax":t.max,"aria-label":t.spinButtonAriaLabel}},[t._t("default",[t._v(t._s(t.intValue))])],2),n("input",{attrs:{type:"hidden",name:t.formName},domProps:{value:t.intValue}}),n("button",{staticClass:"int-pm-btn",class:t.getBtnClass(!1),attrs:{"aria-label":t.incrementAriaLabel,disabled:t.disabled},on:{click:function(e){t.vertical?t.decrement():t.increment()}}},[t._t(t.vertical?"decrement":"increment",[t._v(t._s(t.vertical?"-":"+"))])],2)])},o=[],i=(n("a9e3"),{name:"IntegerPlusminus",props:{value:{default:0,type:Number},min:{default:0,type:Number},max:{default:void 0,type:Number},step:{default:1,type:Number},vertical:{default:!1,type:Boolean},incrementAriaLabel:{default:null,type:String},decrementAriaLabel:{default:null,type:String},spinButtonAriaLabel:{default:null,type:String},disabled:{default:!1,type:Boolean},formName:{default:"integerPlusMinus",type:String}},data:function(){return{intValue:0}},computed:{canIncrement:function(){return!this.disabled&&(void 0===this.max||this.intValue+this.step<=this.max)},canDecrement:function(){return!this.disabled&&this.intValue-this.step>=this.min}},mounted:function(){window.addEventListener("keydown",this.keyUp)},methods:{keyUp:function(t){this.isSpinButtonFocused()&&(33!==t.keyCode&&38!==t.keyCode||(this.increment(),t.preventDefault()),34!==t.keyCode&&40!==t.keyCode||(this.decrement(),t.preventDefault()),36===t.keyCode&&(this.setToMin(),t.preventDefault()),void 0!==this.max&&35===t.keyCode&&(this.setToMax(),t.preventDefault()))},isSpinButtonFocused:function(){return document.activeElement===this.$refs.spinbutton},getBtnClass:function(t){var e="int-pm-";return t&&!this.vertical||!t&&this.vertical?(e+="decrement",this.canDecrement||(e+=" disabled")):(e+="increment",this.canIncrement||(e+=" disabled")),e},setToMin:function(){this.disabled||(this.intValue=this.min,this.$emit("input",this.intValue))},setToMax:function(){this.disabled||(this.intValue=this.max,this.$emit("input",this.intValue))},increment:function(){this.canIncrement&&(this.intValue=this.intValue+this.step,this.$emit("ipm-increment",this.intValue),this.$emit("input",this.intValue))},decrement:function(){this.canDecrement&&(this.intValue=this.intValue-this.step,this.$emit("ipm-decrement",this.intValue),this.$emit("input",this.intValue))}},watch:{value:{handler:function(t,e){this.intValue=t}}},created:function(){this.intValue=this.value,this.step<1&&(this.step=1),this.max<this.min&&(this.max=void 0)}}),a=i,s=(n("4348"),n("2877")),c=Object(s["a"])(a,r,o,!1,null,"cff1b7a4",null),u=c.exports},"60da":function(t,e,n){"use strict";var r=n("83ab"),o=n("d039"),i=n("df75"),a=n("7418"),s=n("d1e7"),c=n("7b0b"),u=n("44ad"),f=Object.assign,l=Object.defineProperty;t.exports=!f||o((function(){if(r&&1!==f({b:1},f(l({},"a",{enumerable:!0,get:function(){l(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o="abcdefghijklmnopqrst";return t[n]=7,o.split("").forEach((function(t){e[t]=t})),7!=f({},t)[n]||i(f({},e)).join("")!=o}))?function(t,e){var n=c(t),o=arguments.length,f=1,l=a.f,p=s.f;while(o>f){var h,d=u(arguments[f++]),v=l?i(d).concat(l(d)):i(d),y=v.length,m=0;while(y>m)h=v[m++],r&&!p.call(d,h)||(n[h]=d[h])}return n}:f},"62e4":function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},6547:function(t,e,n){var r=n("a691"),o=n("1d80"),i=function(t){return function(e,n){var i,a,s=String(o(e)),c=r(n),u=s.length;return c<0||c>=u?t?"":void 0:(i=s.charCodeAt(c),i<55296||i>56319||c+1===u||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):i:t?s.slice(c,c+2):a-56320+(i-55296<<10)+65536)}};t.exports={codeAt:i(!1),charAt:i(!0)}},"65f0":function(t,e,n){var r=n("861d"),o=n("e8b5"),i=n("b622"),a=i("species");t.exports=function(t,e){var n;return o(t)&&(n=t.constructor,"function"!=typeof n||n!==Array&&!o(n.prototype)?r(n)&&(n=n[a],null===n&&(n=void 0)):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},"69f3":function(t,e,n){var r,o,i,a=n("7f9a"),s=n("da84"),c=n("861d"),u=n("9112"),f=n("5135"),l=n("f772"),p=n("d012"),h=s.WeakMap,d=function(t){return i(t)?o(t):r(t,{})},v=function(t){return function(e){var n;if(!c(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}};if(a){var y=new h,m=y.get,g=y.has,b=y.set;r=function(t,e){return b.call(y,t,e),e},o=function(t){return m.call(y,t)||{}},i=function(t){return g.call(y,t)}}else{var _=l("state");p[_]=!0,r=function(t,e){return u(t,_,e),e},o=function(t){return f(t,_)?t[_]:{}},i=function(t){return f(t,_)}}t.exports={set:r,get:o,has:i,enforce:d,getterFor:v}},"6eeb":function(t,e,n){var r=n("da84"),o=n("9112"),i=n("5135"),a=n("ce4e"),s=n("8925"),c=n("69f3"),u=c.get,f=c.enforce,l=String(String).split("String");(t.exports=function(t,e,n,s){var c=!!s&&!!s.unsafe,u=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),f(n).source=l.join("string"==typeof e?e:"")),t!==r?(c?!p&&t[e]&&(u=!0):delete t[e],u?t[e]=n:o(t,e,n)):u?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},7156:function(t,e,n){var r=n("861d"),o=n("d2bb");t.exports=function(t,e,n){var i,a;return o&&"function"==typeof(i=e.constructor)&&i!==n&&r(a=i.prototype)&&a!==n.prototype&&o(t,a),t}},7418:function(t,e){e.f=Object.getOwnPropertySymbols},"746f":function(t,e,n){var r=n("428f"),o=n("5135"),i=n("e538"),a=n("9bf2").f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},7839:function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},"7b0b":function(t,e,n){var r=n("1d80");t.exports=function(t){return Object(r(t))}},"7c73":function(t,e,n){var r,o=n("825a"),i=n("37e8"),a=n("7839"),s=n("d012"),c=n("1be4"),u=n("cc12"),f=n("f772"),l=">",p="<",h="prototype",d="script",v=f("IE_PROTO"),y=function(){},m=function(t){return p+d+l+t+p+"/"+d+l},g=function(t){t.write(m("")),t.close();var e=t.parentWindow.Object;return t=null,e},b=function(){var t,e=u("iframe"),n="java"+d+":";return e.style.display="none",c.appendChild(e),e.src=String(n),t=e.contentWindow.document,t.open(),t.write(m("document.F=Object")),t.close(),t.F},_=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}_=r?g(r):b();var t=a.length;while(t--)delete _[h][a[t]];return _()};s[v]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(y[h]=o(t),n=new y,y[h]=null,n[v]=t):n=_(),void 0===e?n:i(n,e)}},"7dd0":function(t,e,n){"use strict";var r=n("23e7"),o=n("9ed3"),i=n("e163"),a=n("d2bb"),s=n("d44e"),c=n("9112"),u=n("6eeb"),f=n("b622"),l=n("c430"),p=n("3f8c"),h=n("ae93"),d=h.IteratorPrototype,v=h.BUGGY_SAFARI_ITERATORS,y=f("iterator"),m="keys",g="values",b="entries",_=function(){return this};t.exports=function(t,e,n,f,h,w,O){o(n,e,f);var x,S,C,j=function(t){if(t===h&&T)return T;if(!v&&t in $)return $[t];switch(t){case m:return function(){return new n(this,t)};case g:return function(){return new n(this,t)};case b:return function(){return new n(this,t)}}return function(){return new n(this)}},A=e+" Iterator",k=!1,$=t.prototype,E=$[y]||$["@@iterator"]||h&&$[h],T=!v&&E||j(h),P="Array"==e&&$.entries||E;if(P&&(x=i(P.call(new t)),d!==Object.prototype&&x.next&&(l||i(x)===d||(a?a(x,d):"function"!=typeof x[y]&&c(x,y,_)),s(x,A,!0,!0),l&&(p[A]=_))),h==g&&E&&E.name!==g&&(k=!0,T=function(){return E.call(this)}),l&&!O||$[y]===T||c($,y,T),p[e]=T,h)if(S={values:j(g),keys:w?T:j(m),entries:j(b)},O)for(C in S)(v||k||!(C in $))&&u($,C,S[C]);else r({target:e,proto:!0,forced:v||k},S);return S}},"7f9a":function(t,e,n){var r=n("da84"),o=n("8925"),i=r.WeakMap;t.exports="function"===typeof i&&/native code/.test(o(i))},"825a":function(t,e,n){var r=n("861d");t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},"83ab":function(t,e,n){var r=n("d039");t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},8418:function(t,e,n){"use strict";var r=n("c04e"),o=n("9bf2"),i=n("5c6c");t.exports=function(t,e,n){var a=r(e);a in t?o.f(t,a,i(0,n)):t[a]=n}},"861d":function(t,e){t.exports=function(t){return"object"===typeof t?null!==t:"function"===typeof t}},8925:function(t,e,n){var r=n("c6cd"),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},"8c4f":function(t,e,n){"use strict";
/*!
  * vue-router v3.1.6
  * (c) 2020 Evan You
  * @license MIT
  */function r(t,e){0}function o(t){return Object.prototype.toString.call(t).indexOf("Error")>-1}function i(t,e){return e instanceof t||e&&(e.name===t.name||e._name===t._name)}function a(t,e){for(var n in e)t[n]=e[n];return t}var s={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(t,e){var n=e.props,r=e.children,o=e.parent,i=e.data;i.routerView=!0;var s=o.$createElement,u=n.name,f=o.$route,l=o._routerViewCache||(o._routerViewCache={}),p=0,h=!1;while(o&&o._routerRoot!==o){var d=o.$vnode?o.$vnode.data:{};d.routerView&&p++,d.keepAlive&&o._directInactive&&o._inactive&&(h=!0),o=o.$parent}if(i.routerViewDepth=p,h){var v=l[u],y=v&&v.component;return y?(v.configProps&&c(y,i,v.route,v.configProps),s(y,i,r)):s()}var m=f.matched[p],g=m&&m.components[u];if(!m||!g)return l[u]=null,s();l[u]={component:g},i.registerRouteInstance=function(t,e){var n=m.instances[u];(e&&n!==t||!e&&n===t)&&(m.instances[u]=e)},(i.hook||(i.hook={})).prepatch=function(t,e){m.instances[u]=e.componentInstance},i.hook.init=function(t){t.data.keepAlive&&t.componentInstance&&t.componentInstance!==m.instances[u]&&(m.instances[u]=t.componentInstance)};var b=m.props&&m.props[u];return b&&(a(l[u],{route:f,configProps:b}),c(g,i,f,b)),s(g,i,r)}};function c(t,e,n,r){var o=e.props=u(n,r);if(o){o=e.props=a({},o);var i=e.attrs=e.attrs||{};for(var s in o)t.props&&s in t.props||(i[s]=o[s],delete o[s])}}function u(t,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(t);case"boolean":return e?t.params:void 0;default:0}}var f=/[!'()*]/g,l=function(t){return"%"+t.charCodeAt(0).toString(16)},p=/%2C/g,h=function(t){return encodeURIComponent(t).replace(f,l).replace(p,",")},d=decodeURIComponent;function v(t,e,n){void 0===e&&(e={});var r,o=n||y;try{r=o(t||"")}catch(a){r={}}for(var i in e)r[i]=e[i];return r}function y(t){var e={};return t=t.trim().replace(/^(\?|#|&)/,""),t?(t.split("&").forEach((function(t){var n=t.replace(/\+/g," ").split("="),r=d(n.shift()),o=n.length>0?d(n.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function m(t){var e=t?Object.keys(t).map((function(e){var n=t[e];if(void 0===n)return"";if(null===n)return h(e);if(Array.isArray(n)){var r=[];return n.forEach((function(t){void 0!==t&&(null===t?r.push(h(e)):r.push(h(e)+"="+h(t)))})),r.join("&")}return h(e)+"="+h(n)})).filter((function(t){return t.length>0})).join("&"):null;return e?"?"+e:""}var g=/\/?$/;function b(t,e,n,r){var o=r&&r.options.stringifyQuery,i=e.query||{};try{i=_(i)}catch(s){}var a={name:e.name||t&&t.name,meta:t&&t.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:x(e,o),matched:t?O(t):[]};return n&&(a.redirectedFrom=x(n,o)),Object.freeze(a)}function _(t){if(Array.isArray(t))return t.map(_);if(t&&"object"===typeof t){var e={};for(var n in t)e[n]=_(t[n]);return e}return t}var w=b(null,{path:"/"});function O(t){var e=[];while(t)e.unshift(t),t=t.parent;return e}function x(t,e){var n=t.path,r=t.query;void 0===r&&(r={});var o=t.hash;void 0===o&&(o="");var i=e||m;return(n||"/")+i(r)+o}function S(t,e){return e===w?t===e:!!e&&(t.path&&e.path?t.path.replace(g,"")===e.path.replace(g,"")&&t.hash===e.hash&&C(t.query,e.query):!(!t.name||!e.name)&&(t.name===e.name&&t.hash===e.hash&&C(t.query,e.query)&&C(t.params,e.params)))}function C(t,e){if(void 0===t&&(t={}),void 0===e&&(e={}),!t||!e)return t===e;var n=Object.keys(t),r=Object.keys(e);return n.length===r.length&&n.every((function(n){var r=t[n],o=e[n];return"object"===typeof r&&"object"===typeof o?C(r,o):String(r)===String(o)}))}function j(t,e){return 0===t.path.replace(g,"/").indexOf(e.path.replace(g,"/"))&&(!e.hash||t.hash===e.hash)&&A(t.query,e.query)}function A(t,e){for(var n in e)if(!(n in t))return!1;return!0}function k(t,e,n){var r=t.charAt(0);if("/"===r)return t;if("?"===r||"#"===r)return e+t;var o=e.split("/");n&&o[o.length-1]||o.pop();for(var i=t.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function $(t){var e="",n="",r=t.indexOf("#");r>=0&&(e=t.slice(r),t=t.slice(0,r));var o=t.indexOf("?");return o>=0&&(n=t.slice(o+1),t=t.slice(0,o)),{path:t,query:n,hash:e}}function E(t){return t.replace(/\/\//g,"/")}var T=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},P=Y,L=D,I=F,M=U,N=J,R=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function D(t,e){var n,r=[],o=0,i=0,a="",s=e&&e.delimiter||"/";while(null!=(n=R.exec(t))){var c=n[0],u=n[1],f=n.index;if(a+=t.slice(i,f),i=f+c.length,u)a+=u[1];else{var l=t[i],p=n[2],h=n[3],d=n[4],v=n[5],y=n[6],m=n[7];a&&(r.push(a),a="");var g=null!=p&&null!=l&&l!==p,b="+"===y||"*"===y,_="?"===y||"*"===y,w=n[2]||s,O=d||v;r.push({name:h||o++,prefix:p||"",delimiter:w,optional:_,repeat:b,partial:g,asterisk:!!m,pattern:O?H(O):m?".*":"[^"+z(w)+"]+?"})}}return i<t.length&&(a+=t.substr(i)),a&&r.push(a),r}function F(t,e){return U(D(t,e))}function V(t){return encodeURI(t).replace(/[\/?#]/g,(function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}))}function B(t){return encodeURI(t).replace(/[?#]/g,(function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}))}function U(t){for(var e=new Array(t.length),n=0;n<t.length;n++)"object"===typeof t[n]&&(e[n]=new RegExp("^(?:"+t[n].pattern+")$"));return function(n,r){for(var o="",i=n||{},a=r||{},s=a.pretty?V:encodeURIComponent,c=0;c<t.length;c++){var u=t[c];if("string"!==typeof u){var f,l=i[u.name];if(null==l){if(u.optional){u.partial&&(o+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(T(l)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(l)+"`");if(0===l.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var p=0;p<l.length;p++){if(f=s(l[p]),!e[c].test(f))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?u.prefix:u.delimiter)+f}}else{if(f=u.asterisk?B(l):s(l),!e[c].test(f))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+f+'"');o+=u.prefix+f}}else o+=u}return o}}function z(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function H(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function G(t,e){return t.keys=e,t}function q(t){return t.sensitive?"":"i"}function K(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return G(t,e)}function X(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(Y(t[o],e,n).source);var i=new RegExp("(?:"+r.join("|")+")",q(n));return G(i,e)}function W(t,e,n){return J(D(t,n),e,n)}function J(t,e,n){T(e)||(n=e||n,e=[]),n=n||{};for(var r=n.strict,o=!1!==n.end,i="",a=0;a<t.length;a++){var s=t[a];if("string"===typeof s)i+=z(s);else{var c=z(s.prefix),u="(?:"+s.pattern+")";e.push(s),s.repeat&&(u+="(?:"+c+u+")*"),u=s.optional?s.partial?c+"("+u+")?":"(?:"+c+"("+u+"))?":c+"("+u+")",i+=u}}var f=z(n.delimiter||"/"),l=i.slice(-f.length)===f;return r||(i=(l?i.slice(0,-f.length):i)+"(?:"+f+"(?=$))?"),i+=o?"$":r&&l?"":"(?="+f+"|$)",G(new RegExp("^"+i,q(n)),e)}function Y(t,e,n){return T(e)||(n=e||n,e=[]),n=n||{},t instanceof RegExp?K(t,e):T(t)?X(t,e,n):W(t,e,n)}P.parse=L,P.compile=I,P.tokensToFunction=M,P.tokensToRegExp=N;var Q=Object.create(null);function Z(t,e,n){e=e||{};try{var r=Q[t]||(Q[t]=P.compile(t));return"string"===typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(o){return""}finally{delete e[0]}}function tt(t,e,n,r){var o="string"===typeof t?{path:t}:t;if(o._normalized)return o;if(o.name){o=a({},t);var i=o.params;return i&&"object"===typeof i&&(o.params=a({},i)),o}if(!o.path&&o.params&&e){o=a({},o),o._normalized=!0;var s=a(a({},e.params),o.params);if(e.name)o.name=e.name,o.params=s;else if(e.matched.length){var c=e.matched[e.matched.length-1].path;o.path=Z(c,s,"path "+e.path)}else 0;return o}var u=$(o.path||""),f=e&&e.path||"/",l=u.path?k(u.path,f,n||o.append):f,p=v(u.query,o.query,r&&r.options.parseQuery),h=o.hash||u.hash;return h&&"#"!==h.charAt(0)&&(h="#"+h),{_normalized:!0,path:l,query:p,hash:h}}var et,nt=[String,Object],rt=[String,Array],ot=function(){},it={name:"RouterLink",props:{to:{type:nt,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:rt,default:"click"}},render:function(t){var e=this,n=this.$router,r=this.$route,o=n.resolve(this.to,r,this.append),i=o.location,s=o.route,c=o.href,u={},f=n.options.linkActiveClass,l=n.options.linkExactActiveClass,p=null==f?"router-link-active":f,h=null==l?"router-link-exact-active":l,d=null==this.activeClass?p:this.activeClass,v=null==this.exactActiveClass?h:this.exactActiveClass,y=s.redirectedFrom?b(null,tt(s.redirectedFrom),null,n):s;u[v]=S(r,y),u[d]=this.exact?u[v]:j(r,y);var m=function(t){at(t)&&(e.replace?n.replace(i,ot):n.push(i,ot))},g={click:at};Array.isArray(this.event)?this.event.forEach((function(t){g[t]=m})):g[this.event]=m;var _={class:u},w=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:c,route:s,navigate:m,isActive:u[d],isExactActive:u[v]});if(w){if(1===w.length)return w[0];if(w.length>1||!w.length)return 0===w.length?t():t("span",{},w)}if("a"===this.tag)_.on=g,_.attrs={href:c};else{var O=st(this.$slots.default);if(O){O.isStatic=!1;var x=O.data=a({},O.data);for(var C in x.on=x.on||{},x.on){var A=x.on[C];C in g&&(x.on[C]=Array.isArray(A)?A:[A])}for(var k in g)k in x.on?x.on[k].push(g[k]):x.on[k]=m;var $=O.data.attrs=a({},O.data.attrs);$.href=c}else _.on=g}return t(this.tag,_,this.$slots.default)}};function at(t){if(!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)&&!t.defaultPrevented&&(void 0===t.button||0===t.button)){if(t.currentTarget&&t.currentTarget.getAttribute){var e=t.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return t.preventDefault&&t.preventDefault(),!0}}function st(t){if(t)for(var e,n=0;n<t.length;n++){if(e=t[n],"a"===e.tag)return e;if(e.children&&(e=st(e.children)))return e}}function ct(t){if(!ct.installed||et!==t){ct.installed=!0,et=t;var e=function(t){return void 0!==t},n=function(t,n){var r=t.$options._parentVnode;e(r)&&e(r=r.data)&&e(r=r.registerRouteInstance)&&r(t,n)};t.mixin({beforeCreate:function(){e(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,n(this,this)},destroyed:function(){n(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",s),t.component("RouterLink",it);var r=t.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}}var ut="undefined"!==typeof window;function ft(t,e,n,r){var o=e||[],i=n||Object.create(null),a=r||Object.create(null);t.forEach((function(t){lt(o,i,a,t)}));for(var s=0,c=o.length;s<c;s++)"*"===o[s]&&(o.push(o.splice(s,1)[0]),c--,s--);return{pathList:o,pathMap:i,nameMap:a}}function lt(t,e,n,r,o,i){var a=r.path,s=r.name;var c=r.pathToRegexpOptions||{},u=ht(a,o,c.strict);"boolean"===typeof r.caseSensitive&&(c.sensitive=r.caseSensitive);var f={path:u,regex:pt(u,c),components:r.components||{default:r.component},instances:{},name:s,parent:o,matchAs:i,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};if(r.children&&r.children.forEach((function(r){var o=i?E(i+"/"+r.path):void 0;lt(t,e,n,r,f,o)})),e[f.path]||(t.push(f.path),e[f.path]=f),void 0!==r.alias)for(var l=Array.isArray(r.alias)?r.alias:[r.alias],p=0;p<l.length;++p){var h=l[p];0;var d={path:h,children:r.children};lt(t,e,n,d,o,f.path||"/")}s&&(n[s]||(n[s]=f))}function pt(t,e){var n=P(t,[],e);return n}function ht(t,e,n){return n||(t=t.replace(/\/$/,"")),"/"===t[0]||null==e?t:E(e.path+"/"+t)}function dt(t,e){var n=ft(t),r=n.pathList,o=n.pathMap,i=n.nameMap;function a(t){ft(t,r,o,i)}function s(t,n,a){var s=tt(t,n,!1,e),c=s.name;if(c){var u=i[c];if(!u)return f(null,s);var l=u.regex.keys.filter((function(t){return!t.optional})).map((function(t){return t.name}));if("object"!==typeof s.params&&(s.params={}),n&&"object"===typeof n.params)for(var p in n.params)!(p in s.params)&&l.indexOf(p)>-1&&(s.params[p]=n.params[p]);return s.path=Z(u.path,s.params,'named route "'+c+'"'),f(u,s,a)}if(s.path){s.params={};for(var h=0;h<r.length;h++){var d=r[h],v=o[d];if(vt(v.regex,s.path,s.params))return f(v,s,a)}}return f(null,s)}function c(t,n){var r=t.redirect,o="function"===typeof r?r(b(t,n,null,e)):r;if("string"===typeof o&&(o={path:o}),!o||"object"!==typeof o)return f(null,n);var a=o,c=a.name,u=a.path,l=n.query,p=n.hash,h=n.params;if(l=a.hasOwnProperty("query")?a.query:l,p=a.hasOwnProperty("hash")?a.hash:p,h=a.hasOwnProperty("params")?a.params:h,c){i[c];return s({_normalized:!0,name:c,query:l,hash:p,params:h},void 0,n)}if(u){var d=yt(u,t),v=Z(d,h,'redirect route with path "'+d+'"');return s({_normalized:!0,path:v,query:l,hash:p},void 0,n)}return f(null,n)}function u(t,e,n){var r=Z(n,e.params,'aliased route with path "'+n+'"'),o=s({_normalized:!0,path:r});if(o){var i=o.matched,a=i[i.length-1];return e.params=o.params,f(a,e)}return f(null,e)}function f(t,n,r){return t&&t.redirect?c(t,r||n):t&&t.matchAs?u(t,n,t.matchAs):b(t,n,r,e)}return{match:s,addRoutes:a}}function vt(t,e,n){var r=e.match(t);if(!r)return!1;if(!n)return!0;for(var o=1,i=r.length;o<i;++o){var a=t.keys[o-1],s="string"===typeof r[o]?decodeURIComponent(r[o]):r[o];a&&(n[a.name||"pathMatch"]=s)}return!0}function yt(t,e){return k(t,e.parent?e.parent.path:"/",!0)}var mt=ut&&window.performance&&window.performance.now?window.performance:Date;function gt(){return mt.now().toFixed(3)}var bt=gt();function _t(){return bt}function wt(t){return bt=t}var Ot=Object.create(null);function xt(){var t=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(t,""),n=a({},window.history.state);n.key=_t(),window.history.replaceState(n,"",e),window.addEventListener("popstate",(function(t){Ct(),t.state&&t.state.key&&wt(t.state.key)}))}function St(t,e,n,r){if(t.app){var o=t.options.scrollBehavior;o&&t.app.$nextTick((function(){var i=jt(),a=o.call(t,e,n,r?i:null);a&&("function"===typeof a.then?a.then((function(t){Lt(t,i)})).catch((function(t){0})):Lt(a,i))}))}}function Ct(){var t=_t();t&&(Ot[t]={x:window.pageXOffset,y:window.pageYOffset})}function jt(){var t=_t();if(t)return Ot[t]}function At(t,e){var n=document.documentElement,r=n.getBoundingClientRect(),o=t.getBoundingClientRect();return{x:o.left-r.left-e.x,y:o.top-r.top-e.y}}function kt(t){return Tt(t.x)||Tt(t.y)}function $t(t){return{x:Tt(t.x)?t.x:window.pageXOffset,y:Tt(t.y)?t.y:window.pageYOffset}}function Et(t){return{x:Tt(t.x)?t.x:0,y:Tt(t.y)?t.y:0}}function Tt(t){return"number"===typeof t}var Pt=/^#\d/;function Lt(t,e){var n="object"===typeof t;if(n&&"string"===typeof t.selector){var r=Pt.test(t.selector)?document.getElementById(t.selector.slice(1)):document.querySelector(t.selector);if(r){var o=t.offset&&"object"===typeof t.offset?t.offset:{};o=Et(o),e=At(r,o)}else kt(t)&&(e=$t(t))}else n&&kt(t)&&(e=$t(t));e&&window.scrollTo(e.x,e.y)}var It=ut&&function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)}();function Mt(t,e){Ct();var n=window.history;try{if(e){var r=a({},n.state);r.key=_t(),n.replaceState(r,"",t)}else n.pushState({key:wt(gt())},"",t)}catch(o){window.location[e?"replace":"assign"](t)}}function Nt(t){Mt(t,!0)}function Rt(t,e,n){var r=function(o){o>=t.length?n():t[o]?e(t[o],(function(){r(o+1)})):r(o+1)};r(0)}function Dt(t){return function(e,n,r){var i=!1,a=0,s=null;Ft(t,(function(t,e,n,c){if("function"===typeof t&&void 0===t.cid){i=!0,a++;var u,f=zt((function(e){Ut(e)&&(e=e.default),t.resolved="function"===typeof e?e:et.extend(e),n.components[c]=e,a--,a<=0&&r()})),l=zt((function(t){var e="Failed to resolve async component "+c+": "+t;s||(s=o(t)?t:new Error(e),r(s))}));try{u=t(f,l)}catch(h){l(h)}if(u)if("function"===typeof u.then)u.then(f,l);else{var p=u.component;p&&"function"===typeof p.then&&p.then(f,l)}}})),i||r()}}function Ft(t,e){return Vt(t.map((function(t){return Object.keys(t.components).map((function(n){return e(t.components[n],t.instances[n],t,n)}))})))}function Vt(t){return Array.prototype.concat.apply([],t)}var Bt="function"===typeof Symbol&&"symbol"===typeof Symbol.toStringTag;function Ut(t){return t.__esModule||Bt&&"Module"===t[Symbol.toStringTag]}function zt(t){var e=!1;return function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];if(!e)return e=!0,t.apply(this,n)}}var Ht=function(t){function e(e){t.call(this),this.name=this._name="NavigationDuplicated",this.message='Navigating to current location ("'+e.fullPath+'") is not allowed',Object.defineProperty(this,"stack",{value:(new t).stack,writable:!0,configurable:!0})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Error);Ht._name="NavigationDuplicated";var Gt=function(t,e){this.router=t,this.base=qt(e),this.current=w,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function qt(t){if(!t)if(ut){var e=document.querySelector("base");t=e&&e.getAttribute("href")||"/",t=t.replace(/^https?:\/\/[^\/]+/,"")}else t="/";return"/"!==t.charAt(0)&&(t="/"+t),t.replace(/\/$/,"")}function Kt(t,e){var n,r=Math.max(t.length,e.length);for(n=0;n<r;n++)if(t[n]!==e[n])break;return{updated:e.slice(0,n),activated:e.slice(n),deactivated:t.slice(n)}}function Xt(t,e,n,r){var o=Ft(t,(function(t,r,o,i){var a=Wt(t,e);if(a)return Array.isArray(a)?a.map((function(t){return n(t,r,o,i)})):n(a,r,o,i)}));return Vt(r?o.reverse():o)}function Wt(t,e){return"function"!==typeof t&&(t=et.extend(t)),t.options[e]}function Jt(t){return Xt(t,"beforeRouteLeave",Qt,!0)}function Yt(t){return Xt(t,"beforeRouteUpdate",Qt)}function Qt(t,e){if(e)return function(){return t.apply(e,arguments)}}function Zt(t,e,n){return Xt(t,"beforeRouteEnter",(function(t,r,o,i){return te(t,o,i,e,n)}))}function te(t,e,n,r,o){return function(i,a,s){return t(i,a,(function(t){"function"===typeof t&&r.push((function(){ee(t,e.instances,n,o)})),s(t)}))}}function ee(t,e,n,r){e[n]&&!e[n]._isBeingDestroyed?t(e[n]):r()&&setTimeout((function(){ee(t,e,n,r)}),16)}Gt.prototype.listen=function(t){this.cb=t},Gt.prototype.onReady=function(t,e){this.ready?t():(this.readyCbs.push(t),e&&this.readyErrorCbs.push(e))},Gt.prototype.onError=function(t){this.errorCbs.push(t)},Gt.prototype.transitionTo=function(t,e,n){var r=this,o=this.router.match(t,this.current);this.confirmTransition(o,(function(){r.updateRoute(o),e&&e(o),r.ensureURL(),r.ready||(r.ready=!0,r.readyCbs.forEach((function(t){t(o)})))}),(function(t){n&&n(t),t&&!r.ready&&(r.ready=!0,r.readyErrorCbs.forEach((function(e){e(t)})))}))},Gt.prototype.confirmTransition=function(t,e,n){var a=this,s=this.current,c=function(t){!i(Ht,t)&&o(t)&&(a.errorCbs.length?a.errorCbs.forEach((function(e){e(t)})):(r(!1,"uncaught error during route navigation:"),console.error(t))),n&&n(t)};if(S(t,s)&&t.matched.length===s.matched.length)return this.ensureURL(),c(new Ht(t));var u=Kt(this.current.matched,t.matched),f=u.updated,l=u.deactivated,p=u.activated,h=[].concat(Jt(l),this.router.beforeHooks,Yt(f),p.map((function(t){return t.beforeEnter})),Dt(p));this.pending=t;var d=function(e,n){if(a.pending!==t)return c();try{e(t,s,(function(t){!1===t||o(t)?(a.ensureURL(!0),c(t)):"string"===typeof t||"object"===typeof t&&("string"===typeof t.path||"string"===typeof t.name)?(c(),"object"===typeof t&&t.replace?a.replace(t):a.push(t)):n(t)}))}catch(r){c(r)}};Rt(h,d,(function(){var n=[],r=function(){return a.current===t},o=Zt(p,n,r),i=o.concat(a.router.resolveHooks);Rt(i,d,(function(){if(a.pending!==t)return c();a.pending=null,e(t),a.router.app&&a.router.app.$nextTick((function(){n.forEach((function(t){t()}))}))}))}))},Gt.prototype.updateRoute=function(t){var e=this.current;this.current=t,this.cb&&this.cb(t),this.router.afterHooks.forEach((function(n){n&&n(t,e)}))};var ne=function(t){function e(e,n){var r=this;t.call(this,e,n);var o=e.options.scrollBehavior,i=It&&o;i&&xt();var a=re(this.base);window.addEventListener("popstate",(function(t){var n=r.current,o=re(r.base);r.current===w&&o===a||r.transitionTo(o,(function(t){i&&St(e,t,n,!0)}))}))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.go=function(t){window.history.go(t)},e.prototype.push=function(t,e,n){var r=this,o=this,i=o.current;this.transitionTo(t,(function(t){Mt(E(r.base+t.fullPath)),St(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this,o=this,i=o.current;this.transitionTo(t,(function(t){Nt(E(r.base+t.fullPath)),St(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.ensureURL=function(t){if(re(this.base)!==this.current.fullPath){var e=E(this.base+this.current.fullPath);t?Mt(e):Nt(e)}},e.prototype.getCurrentLocation=function(){return re(this.base)},e}(Gt);function re(t){var e=decodeURI(window.location.pathname);return t&&0===e.indexOf(t)&&(e=e.slice(t.length)),(e||"/")+window.location.search+window.location.hash}var oe=function(t){function e(e,n,r){t.call(this,e,n),r&&ie(this.base)||ae()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var t=this,e=this.router,n=e.options.scrollBehavior,r=It&&n;r&&xt(),window.addEventListener(It?"popstate":"hashchange",(function(){var e=t.current;ae()&&t.transitionTo(se(),(function(n){r&&St(t.router,n,e,!0),It||fe(n.fullPath)}))}))},e.prototype.push=function(t,e,n){var r=this,o=this,i=o.current;this.transitionTo(t,(function(t){ue(t.fullPath),St(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this,o=this,i=o.current;this.transitionTo(t,(function(t){fe(t.fullPath),St(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.go=function(t){window.history.go(t)},e.prototype.ensureURL=function(t){var e=this.current.fullPath;se()!==e&&(t?ue(e):fe(e))},e.prototype.getCurrentLocation=function(){return se()},e}(Gt);function ie(t){var e=re(t);if(!/^\/#/.test(e))return window.location.replace(E(t+"/#"+e)),!0}function ae(){var t=se();return"/"===t.charAt(0)||(fe("/"+t),!1)}function se(){var t=window.location.href,e=t.indexOf("#");if(e<0)return"";t=t.slice(e+1);var n=t.indexOf("?");if(n<0){var r=t.indexOf("#");t=r>-1?decodeURI(t.slice(0,r))+t.slice(r):decodeURI(t)}else t=decodeURI(t.slice(0,n))+t.slice(n);return t}function ce(t){var e=window.location.href,n=e.indexOf("#"),r=n>=0?e.slice(0,n):e;return r+"#"+t}function ue(t){It?Mt(ce(t)):window.location.hash=t}function fe(t){It?Nt(ce(t)):window.location.replace(ce(t))}var le=function(t){function e(e,n){t.call(this,e,n),this.stack=[],this.index=-1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e,n){var r=this;this.transitionTo(t,(function(t){r.stack=r.stack.slice(0,r.index+1).concat(t),r.index++,e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this;this.transitionTo(t,(function(t){r.stack=r.stack.slice(0,r.index).concat(t),e&&e(t)}),n)},e.prototype.go=function(t){var e=this,n=this.index+t;if(!(n<0||n>=this.stack.length)){var r=this.stack[n];this.confirmTransition(r,(function(){e.index=n,e.updateRoute(r)}),(function(t){i(Ht,t)&&(e.index=n)}))}},e.prototype.getCurrentLocation=function(){var t=this.stack[this.stack.length-1];return t?t.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Gt),pe=function(t){void 0===t&&(t={}),this.app=null,this.apps=[],this.options=t,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=dt(t.routes||[],this);var e=t.mode||"hash";switch(this.fallback="history"===e&&!It&&!1!==t.fallback,this.fallback&&(e="hash"),ut||(e="abstract"),this.mode=e,e){case"history":this.history=new ne(this,t.base);break;case"hash":this.history=new oe(this,t.base,this.fallback);break;case"abstract":this.history=new le(this,t.base);break;default:0}},he={currentRoute:{configurable:!0}};function de(t,e){return t.push(e),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}function ve(t,e,n){var r="hash"===n?"#"+e:e;return t?E(t+"/"+r):r}pe.prototype.match=function(t,e,n){return this.matcher.match(t,e,n)},he.currentRoute.get=function(){return this.history&&this.history.current},pe.prototype.init=function(t){var e=this;if(this.apps.push(t),t.$once("hook:destroyed",(function(){var n=e.apps.indexOf(t);n>-1&&e.apps.splice(n,1),e.app===t&&(e.app=e.apps[0]||null)})),!this.app){this.app=t;var n=this.history;if(n instanceof ne)n.transitionTo(n.getCurrentLocation());else if(n instanceof oe){var r=function(){n.setupListeners()};n.transitionTo(n.getCurrentLocation(),r,r)}n.listen((function(t){e.apps.forEach((function(e){e._route=t}))}))}},pe.prototype.beforeEach=function(t){return de(this.beforeHooks,t)},pe.prototype.beforeResolve=function(t){return de(this.resolveHooks,t)},pe.prototype.afterEach=function(t){return de(this.afterHooks,t)},pe.prototype.onReady=function(t,e){this.history.onReady(t,e)},pe.prototype.onError=function(t){this.history.onError(t)},pe.prototype.push=function(t,e,n){var r=this;if(!e&&!n&&"undefined"!==typeof Promise)return new Promise((function(e,n){r.history.push(t,e,n)}));this.history.push(t,e,n)},pe.prototype.replace=function(t,e,n){var r=this;if(!e&&!n&&"undefined"!==typeof Promise)return new Promise((function(e,n){r.history.replace(t,e,n)}));this.history.replace(t,e,n)},pe.prototype.go=function(t){this.history.go(t)},pe.prototype.back=function(){this.go(-1)},pe.prototype.forward=function(){this.go(1)},pe.prototype.getMatchedComponents=function(t){var e=t?t.matched?t:this.resolve(t).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(t){return Object.keys(t.components).map((function(e){return t.components[e]}))}))):[]},pe.prototype.resolve=function(t,e,n){e=e||this.history.current;var r=tt(t,e,n,this),o=this.match(r,e),i=o.redirectedFrom||o.fullPath,a=this.history.base,s=ve(a,i,this.mode);return{location:r,route:o,href:s,normalizedTo:r,resolved:o}},pe.prototype.addRoutes=function(t){this.matcher.addRoutes(t),this.history.current!==w&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(pe.prototype,he),pe.install=ct,pe.version="3.1.6",ut&&window.Vue&&window.Vue.use(pe),e["a"]=pe},9062:function(t,e,n){!function(e,n){t.exports=n()}("undefined"!=typeof self&&self,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){},function(t,e,n){"use strict";n.r(e);var r="undefined"!=typeof window?window.HTMLElement:Object,o={mounted:function(){document.addEventListener("focusin",this.focusIn)},methods:{focusIn:function(t){if(this.isActive&&t.target!==this.$el&&!this.$el.contains(t.target)){var e=this.container?this.container:this.isFullPage?null:this.$el.parentElement;(this.isFullPage||e&&e.contains(t.target))&&(t.preventDefault(),this.$el.focus())}}},beforeDestroy:function(){document.removeEventListener("focusin",this.focusIn)}};function i(t,e,n,r,o,i,a,s){var c,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var f=u.render;u.render=function(t,e){return c.call(e),f(t,e)}}else{var l=u.beforeCreate;u.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:u}}var a=i({name:"spinner",props:{color:{type:String,default:"#000"},height:{type:Number,default:64},width:{type:Number,default:64}}},(function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{viewBox:"0 0 38 38",xmlns:"http://www.w3.org/2000/svg",width:this.width,height:this.height,stroke:this.color}},[e("g",{attrs:{fill:"none","fill-rule":"evenodd"}},[e("g",{attrs:{transform:"translate(1 1)","stroke-width":"2"}},[e("circle",{attrs:{"stroke-opacity":".25",cx:"18",cy:"18",r:"18"}}),e("path",{attrs:{d:"M36 18c0-9.94-8.06-18-18-18"}},[e("animateTransform",{attrs:{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:"0.8s",repeatCount:"indefinite"}})],1)])])])}),[],!1,null,null,null).exports,s=i({name:"dots",props:{color:{type:String,default:"#000"},height:{type:Number,default:240},width:{type:Number,default:60}}},(function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{viewBox:"0 0 120 30",xmlns:"http://www.w3.org/2000/svg",fill:this.color,width:this.width,height:this.height}},[e("circle",{attrs:{cx:"15",cy:"15",r:"15"}},[e("animate",{attrs:{attributeName:"r",from:"15",to:"15",begin:"0s",dur:"0.8s",values:"15;9;15",calcMode:"linear",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"fill-opacity",from:"1",to:"1",begin:"0s",dur:"0.8s",values:"1;.5;1",calcMode:"linear",repeatCount:"indefinite"}})]),e("circle",{attrs:{cx:"60",cy:"15",r:"9","fill-opacity":"0.3"}},[e("animate",{attrs:{attributeName:"r",from:"9",to:"9",begin:"0s",dur:"0.8s",values:"9;15;9",calcMode:"linear",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"fill-opacity",from:"0.5",to:"0.5",begin:"0s",dur:"0.8s",values:".5;1;.5",calcMode:"linear",repeatCount:"indefinite"}})]),e("circle",{attrs:{cx:"105",cy:"15",r:"15"}},[e("animate",{attrs:{attributeName:"r",from:"15",to:"15",begin:"0s",dur:"0.8s",values:"15;9;15",calcMode:"linear",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"fill-opacity",from:"1",to:"1",begin:"0s",dur:"0.8s",values:"1;.5;1",calcMode:"linear",repeatCount:"indefinite"}})])])}),[],!1,null,null,null).exports,c=i({name:"bars",props:{color:{type:String,default:"#000"},height:{type:Number,default:40},width:{type:Number,default:40}}},(function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 30 30",height:this.height,width:this.width,fill:this.color}},[e("rect",{attrs:{x:"0",y:"13",width:"4",height:"5"}},[e("animate",{attrs:{attributeName:"height",attributeType:"XML",values:"5;21;5",begin:"0s",dur:"0.6s",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"y",attributeType:"XML",values:"13; 5; 13",begin:"0s",dur:"0.6s",repeatCount:"indefinite"}})]),e("rect",{attrs:{x:"10",y:"13",width:"4",height:"5"}},[e("animate",{attrs:{attributeName:"height",attributeType:"XML",values:"5;21;5",begin:"0.15s",dur:"0.6s",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"y",attributeType:"XML",values:"13; 5; 13",begin:"0.15s",dur:"0.6s",repeatCount:"indefinite"}})]),e("rect",{attrs:{x:"20",y:"13",width:"4",height:"5"}},[e("animate",{attrs:{attributeName:"height",attributeType:"XML",values:"5;21;5",begin:"0.3s",dur:"0.6s",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"y",attributeType:"XML",values:"13; 5; 13",begin:"0.3s",dur:"0.6s",repeatCount:"indefinite"}})])])}),[],!1,null,null,null).exports,u=i({name:"vue-loading",mixins:[o],props:{active:Boolean,programmatic:Boolean,container:[Object,Function,r],isFullPage:{type:Boolean,default:!0},transition:{type:String,default:"fade"},canCancel:Boolean,onCancel:{type:Function,default:function(){}},color:String,backgroundColor:String,opacity:Number,width:Number,height:Number,zIndex:Number,loader:{type:String,default:"spinner"}},data:function(){return{isActive:this.active}},components:{Spinner:a,Dots:s,Bars:c},beforeMount:function(){this.programmatic&&(this.container?(this.isFullPage=!1,this.container.appendChild(this.$el)):document.body.appendChild(this.$el))},mounted:function(){this.programmatic&&(this.isActive=!0),document.addEventListener("keyup",this.keyPress)},methods:{cancel:function(){this.canCancel&&this.isActive&&(this.hide(),this.onCancel.apply(null,arguments))},hide:function(){var t=this;this.$emit("hide"),this.$emit("update:active",!1),this.programmatic&&(this.isActive=!1,setTimeout((function(){var e;t.$destroy(),void 0!==(e=t.$el).remove?e.remove():e.parentNode.removeChild(e)}),150))},keyPress:function(t){27===t.keyCode&&this.cancel()}},watch:{active:function(t){this.isActive=t}},beforeDestroy:function(){document.removeEventListener("keyup",this.keyPress)}},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("transition",{attrs:{name:t.transition}},[n("div",{directives:[{name:"show",rawName:"v-show",value:t.isActive,expression:"isActive"}],staticClass:"vld-overlay is-active",class:{"is-full-page":t.isFullPage},style:{zIndex:t.zIndex},attrs:{tabindex:"0","aria-busy":t.isActive,"aria-label":"Loading"}},[n("div",{staticClass:"vld-background",style:{background:t.backgroundColor,opacity:t.opacity},on:{click:function(e){return e.preventDefault(),t.cancel(e)}}}),n("div",{staticClass:"vld-icon"},[t._t("before"),t._t("default",[n(t.loader,{tag:"component",attrs:{color:t.color,width:t.width,height:t.height}})]),t._t("after")],2)])])}),[],!1,null,null,null).exports,f=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return{show:function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,i={programmatic:!0},a=Object.assign({},e,r,i),s=new(t.extend(u))({el:document.createElement("div"),propsData:a}),c=Object.assign({},n,o);return Object.keys(c).map((function(t){s.$slots[t]=c[t]})),s}}};n(0),u.install=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=f(t,e,n);t.$loading=r,t.prototype.$loading=r},e.default=u}]).default}))},"90e3":function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},9112:function(t,e,n){var r=n("83ab"),o=n("9bf2"),i=n("5c6c");t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},"94ca":function(t,e,n){var r=n("d039"),o=/#|\.prototype\./,i=function(t,e){var n=s[a(t)];return n==u||n!=c&&("function"==typeof e?r(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";t.exports=i},"96cf":function(t,e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"===typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",u="object"===typeof t,f=e.regeneratorRuntime;if(f)u&&(t.exports=f);else{f=e.regeneratorRuntime=u?t.exports:{},f.wrap=_;var l="suspendedStart",p="suspendedYield",h="executing",d="completed",v={},y={};y[a]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(P([])));g&&g!==r&&o.call(g,a)&&(y=g);var b=S.prototype=O.prototype=Object.create(y);x.prototype=b.constructor=S,S.constructor=x,S[c]=x.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"===typeof t&&t.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},C(j.prototype),j.prototype[s]=function(){return this},f.AsyncIterator=j,f.async=function(t,e,n,r){var o=new j(_(t,e,n,r));return f.isGeneratorFunction(e)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},C(b),b[c]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){while(e.length){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},f.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0],e=t.completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return s.type="throw",s.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),u=o.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),E(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function _(t,e,n,r){var o=e&&e.prototype instanceof O?e:O,i=Object.create(o.prototype),a=new T(r||[]);return i._invoke=A(t,n,a),i}function w(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(r){return{type:"throw",arg:r}}}function O(){}function x(){}function S(){}function C(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function j(t){function e(n,r,i,a){var s=w(t[n],t,r);if("throw"!==s.type){var c=s.arg,u=c.value;return u&&"object"===typeof u&&o.call(u,"__await")?Promise.resolve(u.__await).then((function(t){e("next",t,i,a)}),(function(t){e("throw",t,i,a)})):Promise.resolve(u).then((function(t){c.value=t,i(c)}),a)}a(s.arg)}var n;function r(t,r){function o(){return new Promise((function(n,o){e(t,r,n,o)}))}return n=n?n.then(o,o):o()}this._invoke=r}function A(t,e,n){var r=l;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return L()}n.method=o,n.arg=i;while(1){var a=n.delegate;if(a){var s=k(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var c=w(t,e,n);if("normal"===c.type){if(r=n.done?d:p,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=d,n.method="throw",n.arg=c.arg)}}}function k(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,k(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=w(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function $(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach($,this),this.reset(!0)}function P(t){if(t){var e=t[a];if(e)return e.call(t);if("function"===typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){while(++r<t.length)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:L}}function L(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},"9bdd":function(t,e,n){var r=n("825a");t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(a){var i=t["return"];throw void 0!==i&&r(i.call(t)),a}}},"9bf2":function(t,e,n){var r=n("83ab"),o=n("0cfb"),i=n("825a"),a=n("c04e"),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(i(t),e=a(e,!0),i(n),o)try{return s(t,e,n)}catch(r){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},"9ed3":function(t,e,n){"use strict";var r=n("ae93").IteratorPrototype,o=n("7c73"),i=n("5c6c"),a=n("d44e"),s=n("3f8c"),c=function(){return this};t.exports=function(t,e,n){var u=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),a(t,u,!1,!0),s[u]=c,t}},a15b:function(t,e,n){"use strict";var r=n("23e7"),o=n("44ad"),i=n("fc6a"),a=n("a640"),s=[].join,c=o!=Object,u=a("join",",");r({target:"Array",proto:!0,forced:c||!u},{join:function(t){return s.call(i(this),void 0===t?",":t)}})},a4d3:function(t,e,n){"use strict";var r=n("23e7"),o=n("da84"),i=n("d066"),a=n("c430"),s=n("83ab"),c=n("4930"),u=n("fdbf"),f=n("d039"),l=n("5135"),p=n("e8b5"),h=n("861d"),d=n("825a"),v=n("7b0b"),y=n("fc6a"),m=n("c04e"),g=n("5c6c"),b=n("7c73"),_=n("df75"),w=n("241c"),O=n("057f"),x=n("7418"),S=n("06cf"),C=n("9bf2"),j=n("d1e7"),A=n("9112"),k=n("6eeb"),$=n("5692"),E=n("f772"),T=n("d012"),P=n("90e3"),L=n("b622"),I=n("e538"),M=n("746f"),N=n("d44e"),R=n("69f3"),D=n("b727").forEach,F=E("hidden"),V="Symbol",B="prototype",U=L("toPrimitive"),z=R.set,H=R.getterFor(V),G=Object[B],q=o.Symbol,K=i("JSON","stringify"),X=S.f,W=C.f,J=O.f,Y=j.f,Q=$("symbols"),Z=$("op-symbols"),tt=$("string-to-symbol-registry"),et=$("symbol-to-string-registry"),nt=$("wks"),rt=o.QObject,ot=!rt||!rt[B]||!rt[B].findChild,it=s&&f((function(){return 7!=b(W({},"a",{get:function(){return W(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=X(G,e);r&&delete G[e],W(t,e,n),r&&t!==G&&W(G,e,r)}:W,at=function(t,e){var n=Q[t]=b(q[B]);return z(n,{type:V,tag:t,description:e}),s||(n.description=e),n},st=u?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof q},ct=function(t,e,n){t===G&&ct(Z,e,n),d(t);var r=m(e,!0);return d(n),l(Q,r)?(n.enumerable?(l(t,F)&&t[F][r]&&(t[F][r]=!1),n=b(n,{enumerable:g(0,!1)})):(l(t,F)||W(t,F,g(1,{})),t[F][r]=!0),it(t,r,n)):W(t,r,n)},ut=function(t,e){d(t);var n=y(e),r=_(n).concat(dt(n));return D(r,(function(e){s&&!lt.call(n,e)||ct(t,e,n[e])})),t},ft=function(t,e){return void 0===e?b(t):ut(b(t),e)},lt=function(t){var e=m(t,!0),n=Y.call(this,e);return!(this===G&&l(Q,e)&&!l(Z,e))&&(!(n||!l(this,e)||!l(Q,e)||l(this,F)&&this[F][e])||n)},pt=function(t,e){var n=y(t),r=m(e,!0);if(n!==G||!l(Q,r)||l(Z,r)){var o=X(n,r);return!o||!l(Q,r)||l(n,F)&&n[F][r]||(o.enumerable=!0),o}},ht=function(t){var e=J(y(t)),n=[];return D(e,(function(t){l(Q,t)||l(T,t)||n.push(t)})),n},dt=function(t){var e=t===G,n=J(e?Z:y(t)),r=[];return D(n,(function(t){!l(Q,t)||e&&!l(G,t)||r.push(Q[t])})),r};if(c||(q=function(){if(this instanceof q)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=P(t),n=function(t){this===G&&n.call(Z,t),l(this,F)&&l(this[F],e)&&(this[F][e]=!1),it(this,e,g(1,t))};return s&&ot&&it(G,e,{configurable:!0,set:n}),at(e,t)},k(q[B],"toString",(function(){return H(this).tag})),k(q,"withoutSetter",(function(t){return at(P(t),t)})),j.f=lt,C.f=ct,S.f=pt,w.f=O.f=ht,x.f=dt,I.f=function(t){return at(L(t),t)},s&&(W(q[B],"description",{configurable:!0,get:function(){return H(this).description}}),a||k(G,"propertyIsEnumerable",lt,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:q}),D(_(nt),(function(t){M(t)})),r({target:V,stat:!0,forced:!c},{for:function(t){var e=String(t);if(l(tt,e))return tt[e];var n=q(e);return tt[e]=n,et[n]=e,n},keyFor:function(t){if(!st(t))throw TypeError(t+" is not a symbol");if(l(et,t))return et[t]},useSetter:function(){ot=!0},useSimple:function(){ot=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!s},{create:ft,defineProperty:ct,defineProperties:ut,getOwnPropertyDescriptor:pt}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:ht,getOwnPropertySymbols:dt}),r({target:"Object",stat:!0,forced:f((function(){x.f(1)}))},{getOwnPropertySymbols:function(t){return x.f(v(t))}}),K){var vt=!c||f((function(){var t=q();return"[null]"!=K([t])||"{}"!=K({a:t})||"{}"!=K(Object(t))}));r({target:"JSON",stat:!0,forced:vt},{stringify:function(t,e,n){var r,o=[t],i=1;while(arguments.length>i)o.push(arguments[i++]);if(r=e,(h(e)||void 0!==t)&&!st(t))return p(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!st(e))return e}),o[1]=e,K.apply(null,o)}})}q[B][U]||A(q[B],U,q[B].valueOf),N(q,V),T[F]=!0},a640:function(t,e,n){"use strict";var r=n("d039");t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},a691:function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},a79d:function(t,e,n){"use strict";var r=n("23e7"),o=n("c430"),i=n("fea9"),a=n("d039"),s=n("d066"),c=n("4840"),u=n("cdf9"),f=n("6eeb"),l=!!i&&a((function(){i.prototype["finally"].call({then:function(){}},(function(){}))}));r({target:"Promise",proto:!0,real:!0,forced:l},{finally:function(t){var e=c(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),o||"function"!=typeof i||i.prototype["finally"]||f(i.prototype,"finally",s("Promise").prototype["finally"])},a9e3:function(t,e,n){"use strict";var r=n("83ab"),o=n("da84"),i=n("94ca"),a=n("6eeb"),s=n("5135"),c=n("c6b6"),u=n("7156"),f=n("c04e"),l=n("d039"),p=n("7c73"),h=n("241c").f,d=n("06cf").f,v=n("9bf2").f,y=n("58a8").trim,m="Number",g=o[m],b=g.prototype,_=c(p(b))==m,w=function(t){var e,n,r,o,i,a,s,c,u=f(t,!1);if("string"==typeof u&&u.length>2)if(u=y(u),e=u.charCodeAt(0),43===e||45===e){if(n=u.charCodeAt(2),88===n||120===n)return NaN}else if(48===e){switch(u.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+u}for(i=u.slice(2),a=i.length,s=0;s<a;s++)if(c=i.charCodeAt(s),c<48||c>o)return NaN;return parseInt(i,r)}return+u};if(i(m,!g(" 0o1")||!g("0b1")||g("+0x1"))){for(var O,x=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof x&&(_?l((function(){b.valueOf.call(n)})):c(n)!=m)?u(new g(w(e)),n,x):w(e)},S=r?h(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),C=0;S.length>C;C++)s(g,O=S[C])&&!s(x,O)&&v(x,O,d(g,O));x.prototype=b,b.constructor=x,a(o,m,x)}},ae40:function(t,e,n){var r=n("83ab"),o=n("d039"),i=n("5135"),a=Object.defineProperty,s={},c=function(t){throw t};t.exports=function(t,e){if(i(s,t))return s[t];e||(e={});var n=[][t],u=!!i(e,"ACCESSORS")&&e.ACCESSORS,f=i(e,0)?e[0]:c,l=i(e,1)?e[1]:void 0;return s[t]=!!n&&!o((function(){if(u&&!r)return!0;var t={length:-1};u?a(t,1,{enumerable:!0,get:c}):t[1]=1,n.call(t,f,l)}))}},ae93:function(t,e,n){"use strict";var r,o,i,a=n("e163"),s=n("9112"),c=n("5135"),u=n("b622"),f=n("c430"),l=u("iterator"),p=!1,h=function(){return this};[].keys&&(i=[].keys(),"next"in i?(o=a(a(i)),o!==Object.prototype&&(r=o)):p=!0),void 0==r&&(r={}),f||c(r,l)||s(r,l,h),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},b041:function(t,e,n){"use strict";var r=n("00ee"),o=n("f5df");t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},b0c0:function(t,e,n){var r=n("83ab"),o=n("9bf2").f,i=Function.prototype,a=i.toString,s=/^\s*function ([^ (]*)/,c="name";r&&!(c in i)&&o(i,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return""}}})},b575:function(t,e,n){var r,o,i,a,s,c,u,f,l=n("da84"),p=n("06cf").f,h=n("c6b6"),d=n("2cf4").set,v=n("1cdc"),y=l.MutationObserver||l.WebKitMutationObserver,m=l.process,g=l.Promise,b="process"==h(m),_=p(l,"queueMicrotask"),w=_&&_.value;w||(r=function(){var t,e;b&&(t=m.domain)&&t.exit();while(o){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,t&&t.enter()},b?a=function(){m.nextTick(r)}:y&&!v?(s=!0,c=document.createTextNode(""),new y(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s}):g&&g.resolve?(u=g.resolve(void 0),f=u.then,a=function(){f.call(u,r)}):a=function(){d.call(l,r)}),t.exports=w||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},b622:function(t,e,n){var r=n("da84"),o=n("5692"),i=n("5135"),a=n("90e3"),s=n("4930"),c=n("fdbf"),u=o("wks"),f=r.Symbol,l=c?f:f&&f.withoutSetter||a;t.exports=function(t){return i(u,t)||(s&&i(f,t)?u[t]=f[t]:u[t]=l("Symbol."+t)),u[t]}},b64b:function(t,e,n){var r=n("23e7"),o=n("7b0b"),i=n("df75"),a=n("d039"),s=a((function(){i(1)}));r({target:"Object",stat:!0,forced:s},{keys:function(t){return i(o(t))}})},b727:function(t,e,n){var r=n("0366"),o=n("44ad"),i=n("7b0b"),a=n("50c4"),s=n("65f0"),c=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,f=4==t,l=6==t,p=5==t||l;return function(h,d,v,y){for(var m,g,b=i(h),_=o(b),w=r(d,v,3),O=a(_.length),x=0,S=y||s,C=e?S(h,O):n?S(h,0):void 0;O>x;x++)if((p||x in _)&&(m=_[x],g=w(m,x,b),t))if(e)C[x]=g;else if(g)switch(t){case 3:return!0;case 5:return m;case 6:return x;case 2:c.call(C,m)}else if(f)return!1;return l?-1:u||f?f:C}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},bfa9:function(t,e,n){"use strict";var r=n("da81"),o=n.n(r);let i;i=class{get length(){return Object.keys(this).length}key(t){return Object.keys(this)[t]}setItem(t,e){this[t]=e.toString()}getItem(t){return this[t]}removeItem(t){delete this[t]}clear(){for(const t of Object.keys(this))delete this[t]}};class a{constructor(){this._queue=[],this._flushing=!1}enqueue(t){return this._queue.push(t),this._flushing?Promise.resolve():this.flushQueue()}flushQueue(){this._flushing=!0;const t=()=>{const e=this._queue.shift();if(e)return e.then(t);this._flushing=!1};return Promise.resolve(t())}}function s(t,e){return o()({},t,e)}let c=JSON;class u{constructor(t){this._mutex=new a,this.subscriber=t=>e=>t.subscribe(e),"undefined"===typeof t&&(t={}),this.key=null!=t.key?t.key:"vuex",this.subscribed=!1,this.supportCircular=t.supportCircular||!1,this.supportCircular&&(c=n("5bc5")),this.storage=t.storage||window.localStorage,this.reducer=null!=t.reducer?t.reducer:null==t.modules?t=>t:e=>t.modules.reduce((t,n)=>s(t,{[n]:e[n]}),{}),this.filter=t.filter||(t=>!0),this.strictMode=t.strictMode||!1,this.RESTORE_MUTATION=function(t,e){const n=s(t,e||{});for(const r of Object.keys(n))this._vm.$set(t,r,n[r])},this.asyncStorage=t.asyncStorage||!1,this.asyncStorage?(this.restoreState=null!=t.restoreState?t.restoreState:(t,e)=>e.getItem(t).then(t=>"string"===typeof t?this.supportCircular?c.parse(t||"{}"):JSON.parse(t||"{}"):t||{}),this.saveState=null!=t.saveState?t.saveState:(t,e,n)=>n.setItem(t,this.asyncStorage?s({},e||{}):this.supportCircular?c.stringify(e):JSON.stringify(e)),this.plugin=t=>{t.restored=this.restoreState(this.key,this.storage).then(e=>{this.strictMode?t.commit("RESTORE_MUTATION",e):t.replaceState(s(t.state,e||{})),this.subscriber(t)((t,e)=>{this.filter(t)&&this._mutex.enqueue(this.saveState(this.key,this.reducer(e),this.storage))}),this.subscribed=!0})}):(this.restoreState=null!=t.restoreState?t.restoreState:(t,e)=>{const n=e.getItem(t);return"string"===typeof n?this.supportCircular?c.parse(n||"{}"):JSON.parse(n||"{}"):n||{}},this.saveState=null!=t.saveState?t.saveState:(t,e,n)=>n.setItem(t,this.supportCircular?c.stringify(e):JSON.stringify(e)),this.plugin=t=>{const e=this.restoreState(this.key,this.storage);this.strictMode?t.commit("RESTORE_MUTATION",e):t.replaceState(s(t.state,e||{})),this.subscriber(t)((t,e)=>{this.filter(t)&&this.saveState(this.key,this.reducer(e),this.storage)}),this.subscribed=!0})}}e["a"]=u},c04e:function(t,e,n){var r=n("861d");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},c430:function(t,e){t.exports=!1},c6b6:function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},c6cd:function(t,e,n){var r=n("da84"),o=n("ce4e"),i="__core-js_shared__",a=r[i]||o(i,{});t.exports=a},c8ba:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}t.exports=n},c975:function(t,e,n){"use strict";var r=n("23e7"),o=n("4d64").indexOf,i=n("a640"),a=n("ae40"),s=[].indexOf,c=!!s&&1/[1].indexOf(1,-0)<0,u=i("indexOf"),f=a("indexOf",{ACCESSORS:!0,1:0});r({target:"Array",proto:!0,forced:c||!u||!f},{indexOf:function(t){return c?s.apply(this,arguments)||0:o(this,t,arguments.length>1?arguments[1]:void 0)}})},ca84:function(t,e,n){var r=n("5135"),o=n("fc6a"),i=n("4d64").indexOf,a=n("d012");t.exports=function(t,e){var n,s=o(t),c=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);while(e.length>c)r(s,n=e[c++])&&(~i(u,n)||u.push(n));return u}},cc12:function(t,e,n){var r=n("da84"),o=n("861d"),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},cca6:function(t,e,n){var r=n("23e7"),o=n("60da");r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},cdf9:function(t,e,n){var r=n("825a"),o=n("861d"),i=n("f069");t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t),a=n.resolve;return a(e),n.promise}},ce4e:function(t,e,n){var r=n("da84"),o=n("9112");t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},d012:function(t,e){t.exports={}},d039:function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},d066:function(t,e,n){var r=n("428f"),o=n("da84"),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},d2bb:function(t,e,n){var r=n("825a"),o=n("3bbe");t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set,t.call(n,[]),e=n instanceof Array}catch(i){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},d3b7:function(t,e,n){var r=n("00ee"),o=n("6eeb"),i=n("b041");r||o(Object.prototype,"toString",i,{unsafe:!0})},d44e:function(t,e,n){var r=n("9bf2").f,o=n("5135"),i=n("b622"),a=i("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,a)&&r(t,a,{configurable:!0,value:e})}},d58f:function(t,e,n){var r=n("1c0b"),o=n("7b0b"),i=n("44ad"),a=n("50c4"),s=function(t){return function(e,n,s,c){r(n);var u=o(e),f=i(u),l=a(u.length),p=t?l-1:0,h=t?-1:1;if(s<2)while(1){if(p in f){c=f[p],p+=h;break}if(p+=h,t?p<0:l<=p)throw TypeError("Reduce of empty array with no initial value")}for(;t?p>=0:l>p;p+=h)p in f&&(c=n(c,f[p],p,u));return c}};t.exports={left:s(!1),right:s(!0)}},d81d:function(t,e,n){"use strict";var r=n("23e7"),o=n("b727").map,i=n("1dde"),a=n("ae40"),s=i("map"),c=a("map");r({target:"Array",proto:!0,forced:!s||!c},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},da81:function(t,e,n){(function(t,n){var r=200,o="__lodash_hash_undefined__",i=800,a=16,s=9007199254740991,c="[object Arguments]",u="[object Array]",f="[object AsyncFunction]",l="[object Boolean]",p="[object Date]",h="[object Error]",d="[object Function]",v="[object GeneratorFunction]",y="[object Map]",m="[object Number]",g="[object Null]",b="[object Object]",_="[object Proxy]",w="[object RegExp]",O="[object Set]",x="[object String]",S="[object Undefined]",C="[object WeakMap]",j="[object ArrayBuffer]",A="[object DataView]",k="[object Float32Array]",$="[object Float64Array]",E="[object Int8Array]",T="[object Int16Array]",P="[object Int32Array]",L="[object Uint8Array]",I="[object Uint8ClampedArray]",M="[object Uint16Array]",N="[object Uint32Array]",R=/[\\^$.*+?()[\]{}|]/g,D=/^\[object .+?Constructor\]$/,F=/^(?:0|[1-9]\d*)$/,V={};V[k]=V[$]=V[E]=V[T]=V[P]=V[L]=V[I]=V[M]=V[N]=!0,V[c]=V[u]=V[j]=V[l]=V[A]=V[p]=V[h]=V[d]=V[y]=V[m]=V[b]=V[w]=V[O]=V[x]=V[C]=!1;var B="object"==typeof t&&t&&t.Object===Object&&t,U="object"==typeof self&&self&&self.Object===Object&&self,z=B||U||Function("return this")(),H=e&&!e.nodeType&&e,G=H&&"object"==typeof n&&n&&!n.nodeType&&n,q=G&&G.exports===H,K=q&&B.process,X=function(){try{var t=G&&G.require&&G.require("util").types;return t||K&&K.binding&&K.binding("util")}catch(e){}}(),W=X&&X.isTypedArray;function J(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Y(t,e){var n=-1,r=Array(t);while(++n<t)r[n]=e(n);return r}function Q(t){return function(e){return t(e)}}function Z(t,e){return null==t?void 0:t[e]}function tt(t,e){return function(n){return t(e(n))}}var et=Array.prototype,nt=Function.prototype,rt=Object.prototype,ot=z["__core-js_shared__"],it=nt.toString,at=rt.hasOwnProperty,st=function(){var t=/[^.]+$/.exec(ot&&ot.keys&&ot.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),ct=rt.toString,ut=it.call(Object),ft=RegExp("^"+it.call(at).replace(R,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),lt=q?z.Buffer:void 0,pt=z.Symbol,ht=z.Uint8Array,dt=lt?lt.allocUnsafe:void 0,vt=tt(Object.getPrototypeOf,Object),yt=Object.create,mt=rt.propertyIsEnumerable,gt=et.splice,bt=pt?pt.toStringTag:void 0,_t=function(){try{var t=_e(Object,"defineProperty");return t({},"",{}),t}catch(e){}}(),wt=lt?lt.isBuffer:void 0,Ot=Math.max,xt=Date.now,St=_e(z,"Map"),Ct=_e(Object,"create"),jt=function(){function t(){}return function(e){if(!ze(e))return{};if(yt)return yt(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function At(t){var e=-1,n=null==t?0:t.length;this.clear();while(++e<n){var r=t[e];this.set(r[0],r[1])}}function kt(){this.__data__=Ct?Ct(null):{},this.size=0}function $t(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}function Et(t){var e=this.__data__;if(Ct){var n=e[t];return n===o?void 0:n}return at.call(e,t)?e[t]:void 0}function Tt(t){var e=this.__data__;return Ct?void 0!==e[t]:at.call(e,t)}function Pt(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Ct&&void 0===e?o:e,this}function Lt(t){var e=-1,n=null==t?0:t.length;this.clear();while(++e<n){var r=t[e];this.set(r[0],r[1])}}function It(){this.__data__=[],this.size=0}function Mt(t){var e=this.__data__,n=te(e,t);if(n<0)return!1;var r=e.length-1;return n==r?e.pop():gt.call(e,n,1),--this.size,!0}function Nt(t){var e=this.__data__,n=te(e,t);return n<0?void 0:e[n][1]}function Rt(t){return te(this.__data__,t)>-1}function Dt(t,e){var n=this.__data__,r=te(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this}function Ft(t){var e=-1,n=null==t?0:t.length;this.clear();while(++e<n){var r=t[e];this.set(r[0],r[1])}}function Vt(){this.size=0,this.__data__={hash:new At,map:new(St||Lt),string:new At}}function Bt(t){var e=be(this,t)["delete"](t);return this.size-=e?1:0,e}function Ut(t){return be(this,t).get(t)}function zt(t){return be(this,t).has(t)}function Ht(t,e){var n=be(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this}function Gt(t){var e=this.__data__=new Lt(t);this.size=e.size}function qt(){this.__data__=new Lt,this.size=0}function Kt(t){var e=this.__data__,n=e["delete"](t);return this.size=e.size,n}function Xt(t){return this.__data__.get(t)}function Wt(t){return this.__data__.has(t)}function Jt(t,e){var n=this.__data__;if(n instanceof Lt){var o=n.__data__;if(!St||o.length<r-1)return o.push([t,e]),this.size=++n.size,this;n=this.__data__=new Ft(o)}return n.set(t,e),this.size=n.size,this}function Yt(t,e){var n=Re(t),r=!n&&Ne(t),o=!n&&!r&&Ve(t),i=!n&&!r&&!o&&qe(t),a=n||r||o||i,s=a?Y(t.length,String):[],c=s.length;for(var u in t)!e&&!at.call(t,u)||a&&("length"==u||o&&("offset"==u||"parent"==u)||i&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||xe(u,c))||s.push(u);return s}function Qt(t,e,n){(void 0!==n&&!Me(t[e],n)||void 0===n&&!(e in t))&&ee(t,e,n)}function Zt(t,e,n){var r=t[e];at.call(t,e)&&Me(r,n)&&(void 0!==n||e in t)||ee(t,e,n)}function te(t,e){var n=t.length;while(n--)if(Me(t[n][0],e))return n;return-1}function ee(t,e,n){"__proto__"==e&&_t?_t(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}At.prototype.clear=kt,At.prototype["delete"]=$t,At.prototype.get=Et,At.prototype.has=Tt,At.prototype.set=Pt,Lt.prototype.clear=It,Lt.prototype["delete"]=Mt,Lt.prototype.get=Nt,Lt.prototype.has=Rt,Lt.prototype.set=Dt,Ft.prototype.clear=Vt,Ft.prototype["delete"]=Bt,Ft.prototype.get=Ut,Ft.prototype.has=zt,Ft.prototype.set=Ht,Gt.prototype.clear=qt,Gt.prototype["delete"]=Kt,Gt.prototype.get=Xt,Gt.prototype.has=Wt,Gt.prototype.set=Jt;var ne=ge();function re(t){return null==t?void 0===t?S:g:bt&&bt in Object(t)?we(t):$e(t)}function oe(t){return He(t)&&re(t)==c}function ie(t){if(!ze(t)||je(t))return!1;var e=Be(t)?ft:D;return e.test(Ie(t))}function ae(t){return He(t)&&Ue(t.length)&&!!V[re(t)]}function se(t){if(!ze(t))return ke(t);var e=Ae(t),n=[];for(var r in t)("constructor"!=r||!e&&at.call(t,r))&&n.push(r);return n}function ce(t,e,n,r,o){t!==e&&ne(e,(function(i,a){if(o||(o=new Gt),ze(i))ue(t,e,a,n,ce,r,o);else{var s=r?r(Te(t,a),i,a+"",t,e,o):void 0;void 0===s&&(s=i),Qt(t,a,s)}}),Xe)}function ue(t,e,n,r,o,i,a){var s=Te(t,n),c=Te(e,n),u=a.get(c);if(u)Qt(t,n,u);else{var f=i?i(s,c,n+"",t,e,a):void 0,l=void 0===f;if(l){var p=Re(c),h=!p&&Ve(c),d=!p&&!h&&qe(c);f=c,p||h||d?Re(s)?f=s:Fe(s)?f=ve(s):h?(l=!1,f=pe(c,!0)):d?(l=!1,f=de(c,!0)):f=[]:Ge(c)||Ne(c)?(f=s,Ne(s)?f=Ke(s):ze(s)&&!Be(s)||(f=Oe(c))):l=!1}l&&(a.set(c,f),o(f,c,r,i,a),a["delete"](c)),Qt(t,n,f)}}function fe(t,e){return Pe(Ee(t,e,Ye),t+"")}var le=_t?function(t,e){return _t(t,"toString",{configurable:!0,enumerable:!1,value:Je(e),writable:!0})}:Ye;function pe(t,e){if(e)return t.slice();var n=t.length,r=dt?dt(n):new t.constructor(n);return t.copy(r),r}function he(t){var e=new t.constructor(t.byteLength);return new ht(e).set(new ht(t)),e}function de(t,e){var n=e?he(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function ve(t,e){var n=-1,r=t.length;e||(e=Array(r));while(++n<r)e[n]=t[n];return e}function ye(t,e,n,r){var o=!n;n||(n={});var i=-1,a=e.length;while(++i<a){var s=e[i],c=r?r(n[s],t[s],s,n,t):void 0;void 0===c&&(c=t[s]),o?ee(n,s,c):Zt(n,s,c)}return n}function me(t){return fe((function(e,n){var r=-1,o=n.length,i=o>1?n[o-1]:void 0,a=o>2?n[2]:void 0;i=t.length>3&&"function"==typeof i?(o--,i):void 0,a&&Se(n[0],n[1],a)&&(i=o<3?void 0:i,o=1),e=Object(e);while(++r<o){var s=n[r];s&&t(e,s,r,i)}return e}))}function ge(t){return function(e,n,r){var o=-1,i=Object(e),a=r(e),s=a.length;while(s--){var c=a[t?s:++o];if(!1===n(i[c],c,i))break}return e}}function be(t,e){var n=t.__data__;return Ce(e)?n["string"==typeof e?"string":"hash"]:n.map}function _e(t,e){var n=Z(t,e);return ie(n)?n:void 0}function we(t){var e=at.call(t,bt),n=t[bt];try{t[bt]=void 0;var r=!0}catch(i){}var o=ct.call(t);return r&&(e?t[bt]=n:delete t[bt]),o}function Oe(t){return"function"!=typeof t.constructor||Ae(t)?{}:jt(vt(t))}function xe(t,e){var n=typeof t;return e=null==e?s:e,!!e&&("number"==n||"symbol"!=n&&F.test(t))&&t>-1&&t%1==0&&t<e}function Se(t,e,n){if(!ze(n))return!1;var r=typeof e;return!!("number"==r?De(n)&&xe(e,n.length):"string"==r&&e in n)&&Me(n[e],t)}function Ce(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}function je(t){return!!st&&st in t}function Ae(t){var e=t&&t.constructor,n="function"==typeof e&&e.prototype||rt;return t===n}function ke(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}function $e(t){return ct.call(t)}function Ee(t,e,n){return e=Ot(void 0===e?t.length-1:e,0),function(){var r=arguments,o=-1,i=Ot(r.length-e,0),a=Array(i);while(++o<i)a[o]=r[e+o];o=-1;var s=Array(e+1);while(++o<e)s[o]=r[o];return s[e]=n(a),J(t,this,s)}}function Te(t,e){if(("constructor"!==e||"function"!==typeof t[e])&&"__proto__"!=e)return t[e]}var Pe=Le(le);function Le(t){var e=0,n=0;return function(){var r=xt(),o=a-(r-n);if(n=r,o>0){if(++e>=i)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function Ie(t){if(null!=t){try{return it.call(t)}catch(e){}try{return t+""}catch(e){}}return""}function Me(t,e){return t===e||t!==t&&e!==e}var Ne=oe(function(){return arguments}())?oe:function(t){return He(t)&&at.call(t,"callee")&&!mt.call(t,"callee")},Re=Array.isArray;function De(t){return null!=t&&Ue(t.length)&&!Be(t)}function Fe(t){return He(t)&&De(t)}var Ve=wt||Qe;function Be(t){if(!ze(t))return!1;var e=re(t);return e==d||e==v||e==f||e==_}function Ue(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=s}function ze(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function He(t){return null!=t&&"object"==typeof t}function Ge(t){if(!He(t)||re(t)!=b)return!1;var e=vt(t);if(null===e)return!0;var n=at.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&it.call(n)==ut}var qe=W?Q(W):ae;function Ke(t){return ye(t,Xe(t))}function Xe(t){return De(t)?Yt(t,!0):se(t)}var We=me((function(t,e,n){ce(t,e,n)}));function Je(t){return function(){return t}}function Ye(t){return t}function Qe(){return!1}n.exports=We}).call(this,n("c8ba"),n("62e4")(t))},da84:function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n("c8ba"))},dbb4:function(t,e,n){var r=n("23e7"),o=n("83ab"),i=n("56ef"),a=n("fc6a"),s=n("06cf"),c=n("8418");r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){var e,n,r=a(t),o=s.f,u=i(r),f={},l=0;while(u.length>l)n=o(r,e=u[l++]),void 0!==n&&c(f,e,n);return f}})},ddb0:function(t,e,n){var r=n("da84"),o=n("fdbc"),i=n("e260"),a=n("9112"),s=n("b622"),c=s("iterator"),u=s("toStringTag"),f=i.values;for(var l in o){var p=r[l],h=p&&p.prototype;if(h){if(h[c]!==f)try{a(h,c,f)}catch(v){h[c]=f}if(h[u]||a(h,u,l),o[l])for(var d in i)if(h[d]!==i[d])try{a(h,d,i[d])}catch(v){h[d]=i[d]}}}},df75:function(t,e,n){var r=n("ca84"),o=n("7839");t.exports=Object.keys||function(t){return r(t,o)}},e163:function(t,e,n){var r=n("5135"),o=n("7b0b"),i=n("f772"),a=n("e177"),s=i("IE_PROTO"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},e177:function(t,e,n){var r=n("d039");t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},e260:function(t,e,n){"use strict";var r=n("fc6a"),o=n("44d2"),i=n("3f8c"),a=n("69f3"),s=n("7dd0"),c="Array Iterator",u=a.set,f=a.getterFor(c);t.exports=s(Array,"Array",(function(t,e){u(this,{type:c,target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},e2cc:function(t,e,n){var r=n("6eeb");t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},e40d:function(t,e,n){},e439:function(t,e,n){var r=n("23e7"),o=n("d039"),i=n("fc6a"),a=n("06cf").f,s=n("83ab"),c=o((function(){a(1)})),u=!s||c;r({target:"Object",stat:!0,forced:u,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(i(t),e)}})},e538:function(t,e,n){var r=n("b622");e.f=r},e667:function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(e){return{error:!0,value:e}}}},e6cf:function(t,e,n){"use strict";var r,o,i,a,s=n("23e7"),c=n("c430"),u=n("da84"),f=n("d066"),l=n("fea9"),p=n("6eeb"),h=n("e2cc"),d=n("d44e"),v=n("2626"),y=n("861d"),m=n("1c0b"),g=n("19aa"),b=n("c6b6"),_=n("8925"),w=n("2266"),O=n("1c7e"),x=n("4840"),S=n("2cf4").set,C=n("b575"),j=n("cdf9"),A=n("44de"),k=n("f069"),$=n("e667"),E=n("69f3"),T=n("94ca"),P=n("b622"),L=n("2d00"),I=P("species"),M="Promise",N=E.get,R=E.set,D=E.getterFor(M),F=l,V=u.TypeError,B=u.document,U=u.process,z=f("fetch"),H=k.f,G=H,q="process"==b(U),K=!!(B&&B.createEvent&&u.dispatchEvent),X="unhandledrejection",W="rejectionhandled",J=0,Y=1,Q=2,Z=1,tt=2,et=T(M,(function(){var t=_(F)!==String(F);if(!t){if(66===L)return!0;if(!q&&"function"!=typeof PromiseRejectionEvent)return!0}if(c&&!F.prototype["finally"])return!0;if(L>=51&&/native code/.test(F))return!1;var e=F.resolve(1),n=function(t){t((function(){}),(function(){}))},r=e.constructor={};return r[I]=n,!(e.then((function(){}))instanceof n)})),nt=et||!O((function(t){F.all(t)["catch"]((function(){}))})),rt=function(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e},ot=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;C((function(){var o=e.value,i=e.state==Y,a=0;while(r.length>a){var s,c,u,f=r[a++],l=i?f.ok:f.fail,p=f.resolve,h=f.reject,d=f.domain;try{l?(i||(e.rejection===tt&&ct(t,e),e.rejection=Z),!0===l?s=o:(d&&d.enter(),s=l(o),d&&(d.exit(),u=!0)),s===f.promise?h(V("Promise-chain cycle")):(c=rt(s))?c.call(s,p,h):p(s)):h(o)}catch(v){d&&!u&&d.exit(),h(v)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&at(t,e)}))}},it=function(t,e,n){var r,o;K?(r=B.createEvent("Event"),r.promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},(o=u["on"+t])?o(r):t===X&&A("Unhandled promise rejection",n)},at=function(t,e){S.call(u,(function(){var n,r=e.value,o=st(e);if(o&&(n=$((function(){q?U.emit("unhandledRejection",r,t):it(X,t,r)})),e.rejection=q||st(e)?tt:Z,n.error))throw n.value}))},st=function(t){return t.rejection!==Z&&!t.parent},ct=function(t,e){S.call(u,(function(){q?U.emit("rejectionHandled",t):it(W,t,e.value)}))},ut=function(t,e,n,r){return function(o){t(e,n,o,r)}},ft=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=Q,ot(t,e,!0))},lt=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw V("Promise can't be resolved itself");var o=rt(n);o?C((function(){var r={done:!1};try{o.call(n,ut(lt,t,r,e),ut(ft,t,r,e))}catch(i){ft(t,r,i,e)}})):(e.value=n,e.state=Y,ot(t,e,!1))}catch(i){ft(t,{done:!1},i,e)}}};et&&(F=function(t){g(this,F,M),m(t),r.call(this);var e=N(this);try{t(ut(lt,this,e),ut(ft,this,e))}catch(n){ft(this,e,n)}},r=function(t){R(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:J,value:void 0})},r.prototype=h(F.prototype,{then:function(t,e){var n=D(this),r=H(x(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=q?U.domain:void 0,n.parent=!0,n.reactions.push(r),n.state!=J&&ot(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=N(t);this.promise=t,this.resolve=ut(lt,t,e),this.reject=ut(ft,t,e)},k.f=H=function(t){return t===F||t===i?new o(t):G(t)},c||"function"!=typeof l||(a=l.prototype.then,p(l.prototype,"then",(function(t,e){var n=this;return new F((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof z&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return j(F,z.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:et},{Promise:F}),d(F,M,!1,!0),v(M),i=f(M),s({target:M,stat:!0,forced:et},{reject:function(t){var e=H(this);return e.reject.call(void 0,t),e.promise}}),s({target:M,stat:!0,forced:c||et},{resolve:function(t){return j(c&&this===i?F:this,t)}}),s({target:M,stat:!0,forced:nt},{all:function(t){var e=this,n=H(e),r=n.resolve,o=n.reject,i=$((function(){var n=m(e.resolve),i=[],a=0,s=1;w(t,(function(t){var c=a++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[c]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=H(e),r=n.reject,o=$((function(){var o=m(e.resolve);w(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},e893:function(t,e,n){var r=n("5135"),o=n("56ef"),i=n("06cf"),a=n("9bf2");t.exports=function(t,e){for(var n=o(e),s=a.f,c=i.f,u=0;u<n.length;u++){var f=n[u];r(t,f)||s(t,f,c(e,f))}}},e8b5:function(t,e,n){var r=n("c6b6");t.exports=Array.isArray||function(t){return"Array"==r(t)}},e95a:function(t,e,n){var r=n("b622"),o=n("3f8c"),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},f069:function(t,e,n){"use strict";var r=n("1c0b"),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},f5df:function(t,e,n){var r=n("00ee"),o=n("c6b6"),i=n("b622"),a=i("toStringTag"),s="Arguments"==o(function(){return arguments}()),c=function(t,e){try{return t[e]}catch(n){}};t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=c(e=Object(t),a))?n:s?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},f772:function(t,e,n){var r=n("5692"),o=n("90e3"),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},fc6a:function(t,e,n){var r=n("44ad"),o=n("1d80");t.exports=function(t){return r(o(t))}},fdbc:function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},fdbf:function(t,e,n){var r=n("4930");t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},fea9:function(t,e,n){var r=n("da84");t.exports=r.Promise}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVleC9kaXN0L3Z1ZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1pbnRlZ2VyLXBsdXNtaW51cy9zcmMvY29tcG9uZW50cy9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT8yODExIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1zZWxlY3QvZGlzdC92dWUtc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsYXR0ZWQvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWludGVnZXItcGx1c21pbnVzL3NyYy9jb21wb25lbnRzL0ludGVnZXJQbHVzbWludXMudnVlPzgwNGIiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy92dWUtaW50ZWdlci1wbHVzbWludXMvc3JjL2NvbXBvbmVudHMvSW50ZWdlclBsdXNtaW51cy52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1pbnRlZ2VyLXBsdXNtaW51cy9zcmMvY29tcG9uZW50cy9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT9hMThhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtaW50ZWdlci1wbHVzbWludXMvc3JjL2NvbXBvbmVudHMvSW50ZWdlclBsdXNtaW51cy52dWU/NGI5ZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXJvdXRlci9kaXN0L3Z1ZS1yb3V0ZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGluZy1vdmVybGF5L2Rpc3QvdnVlLWxvYWRpbmcubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZXgtcGVyc2lzdC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLm1lcmdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiXSwibmFtZXMiOlsid2VsbEtub3duU3ltYm9sIiwiVE9fU1RSSU5HX1RBRyIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiU3RyaW5nIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiY2FsbCIsImEiLCJiIiwiYyIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9JbmRleGVkT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsImYiLCJ0b1N0cmluZyIsIndpbmRvd05hbWVzIiwid2luZG93IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaXQiLCJlcnJvciIsInNsaWNlIiwiREVTQ1JJUFRPUlMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInRvUHJpbWl0aXZlIiwiaGFzIiwiSUU4X0RPTV9ERUZJTkUiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPIiwiUCIsImZhaWxzIiwiY3JlYXRlRWxlbWVudCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiJCIsIiRyZWR1Y2UiLCJsZWZ0IiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoIiwiU1RSSUNUX01FVEhPRCIsIlVTRVNfVE9fTEVOR1RIIiwiMSIsInRhcmdldCIsInByb3RvIiwiZm9yY2VkIiwicmVkdWNlIiwiY2FsbGJhY2tmbiIsInRoaXMiLCJnbG9iYWwiLCJET01JdGVyYWJsZXMiLCJmb3JFYWNoIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJwcm90b3R5cGUiLCIkZm9yRWFjaCIsIkNvbnN0cnVjdG9yIiwibmFtZSIsIlR5cGVFcnJvciIsImdldEJ1aWx0SW4iLCJJVEVSQVRPUiIsIlNBRkVfQ0xPU0lORyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsIm5leHQiLCJkb25lIiwiQXJyYXkiLCJmcm9tIiwiZXhlYyIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwib2JqZWN0IiwidXNlckFnZW50IiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVzb2x2ZSIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiYXJnIiwiaW5mbyIsInZhbHVlIiwiUHJvbWlzZSIsInRoZW4iLCJfYXN5bmNUb0dlbmVyYXRvciIsInNlbGYiLCJhcmdzIiwiZXJyIiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiY29uc3RydWN0b3IiLCJmb28iLCJCb29sZWFuIiwiYW5PYmplY3QiLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJ0b0xlbmd0aCIsImJpbmQiLCJnZXRJdGVyYXRvck1ldGhvZCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJSZXN1bHQiLCJzdG9wcGVkIiwicmVzdWx0IiwiaXRlcmF0ZSIsIml0ZXJhYmxlIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiaXRlcmF0b3IiLCJpdGVyRm4iLCJpbmRleCIsInN0ZXAiLCJib3VuZEZ1bmN0aW9uIiwic3RvcCIsInRvSW50ZWdlciIsIm1heCIsIk1hdGgiLCJtaW4iLCJpbnRlZ2VyIiwicmVkZWZpbmUiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJvcHRpb25zIiwic291cmNlIiwiRk9SQ0VEIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJzaGFtIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiZW51bUJ1Z0tleXMiLCJoaWRkZW5LZXlzIiwiY29uY2F0IiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJDT05TVFJVQ1RPUl9OQU1FIiwiY29uZmlndXJhYmxlIiwibm9ybWFsaXplQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsInJlbmRlciIsInN0YXRpY1JlbmRlckZucyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsInNjb3BlSWQiLCJtb2R1bGVJZGVudGlmaWVyIiwic2hhZG93TW9kZSIsImhvb2siLCJfY29tcGlsZWQiLCJmdW5jdGlvbmFsIiwiX3Njb3BlSWQiLCJjb250ZXh0IiwiJHZub2RlIiwic3NyQ29udGV4dCIsInBhcmVudCIsIl9fVlVFX1NTUl9DT05URVhUX18iLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJhZGQiLCJfc3NyUmVnaXN0ZXIiLCIkcm9vdCIsIiRvcHRpb25zIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsImgiLCJleGlzdGluZyIsImJlZm9yZUNyZWF0ZSIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsInYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzRmFsc2UiLCJpc1ByaW1pdGl2ZSIsImlzT2JqZWN0Iiwib2JqIiwiX3RvU3RyaW5nIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJuIiwicGFyc2VGbG9hdCIsImZsb29yIiwiaXNGaW5pdGUiLCJpc1Byb21pc2UiLCJjYXRjaCIsImlzQXJyYXkiLCJKU09OIiwic3RyaW5naWZ5IiwidG9OdW1iZXIiLCJpc05hTiIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwibWFwIiwiY3JlYXRlIiwibGlzdCIsInNwbGl0IiwiaSIsInRvTG93ZXJDYXNlIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsInJlbW92ZSIsImFyciIsIml0ZW0iLCJpbmRleE9mIiwic3BsaWNlIiwiaGFzT3duUHJvcGVydHkiLCJoYXNPd24iLCJjYWNoZWQiLCJjYWNoZSIsImhpdCIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsInJlcGxhY2UiLCJfIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJwb2x5ZmlsbEJpbmQiLCJjdHgiLCJib3VuZEZuIiwibCIsIl9sZW5ndGgiLCJuYXRpdmVCaW5kIiwiRnVuY3Rpb24iLCJ0b0FycmF5Iiwic3RhcnQiLCJyZXQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJyZXMiLCJub29wIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJlIiwiRGF0ZSIsImdldFRpbWUiLCJrZXlzQSIsImtleXMiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIm9uY2UiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJhc3luYyIsIl9saWZlY3ljbGVIb29rcyIsInVuaWNvZGVSZWdFeHAiLCJpc1Jlc2VydmVkIiwiY2hhckNvZGVBdCIsImRlZiIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImJhaWxSRSIsIlJlZ0V4cCIsInBhcnNlUGF0aCIsInBhdGgiLCJzZWdtZW50cyIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJuYXZpZ2F0b3IiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzRkYiLCJtYXRjaCIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlzU2VydmVyUmVuZGVyaW5nIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJTZXQiLCJzZXQiLCJjbGVhciIsIndhcm4iLCJ1aWQiLCJEZXAiLCJpZCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJwdXNoIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5IiwidXBkYXRlIiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwicG9wIiwiVk5vZGUiLCJ0YWciLCJkYXRhIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwibWV0aG9kc1RvUGF0Y2giLCJtZXRob2QiLCJvcmlnaW5hbCIsImxlbiIsImluc2VydGVkIiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwic3JjIiwiX19wcm90b19fIiwib2JzZXJ2ZSIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJfaXNWdWUiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsImN1c3RvbVNldHRlciIsInNoYWxsb3ciLCJwcm9wZXJ0eSIsImdldHRlciIsInNldHRlciIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsImRlbCIsIml0ZW1zIiwic3RyYXRzIiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwidm0iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImRlZHVwZUhvb2tzIiwiaG9va3MiLCJtZXJnZUFzc2V0cyIsInR5cGUiLCJrZXkkMSIsInByb3BzIiwibWV0aG9kcyIsImluamVjdCIsImNvbXB1dGVkIiwicHJvdmlkZSIsImRlZmF1bHRTdHJhdCIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplSW5qZWN0Iiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJkaXJzIiwiZGlyZWN0aXZlcyIsImRlZiQkMSIsIm1lcmdlT3B0aW9ucyIsIl9iYXNlIiwiZXh0ZW5kcyIsIm1peGlucyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsInByb3BzRGF0YSIsInByb3AiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImRlZmF1bHQiLCJfcHJvcHMiLCJnZXRUeXBlIiwiaXNTYW1lVHlwZSIsImV4cGVjdGVkVHlwZXMiLCJoYW5kbGVFcnJvciIsImN1ciIsIiRwYXJlbnQiLCJlcnJvckNhcHR1cmVkIiwiY2FwdHVyZSIsImdsb2JhbEhhbmRsZUVycm9yIiwiaW52b2tlV2l0aEVycm9ySGFuZGxpbmciLCJoYW5kbGVyIiwiX2hhbmRsZWQiLCJsb2dFcnJvciIsImNvbnNvbGUiLCJ0aW1lckZ1bmMiLCJpc1VzaW5nTWljcm9UYXNrIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwicCIsInNldFRpbWVvdXQiLCJNdXRhdGlvbk9ic2VydmVyIiwic2V0SW1tZWRpYXRlIiwiY291bnRlciIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIm5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjcmVhdGVGbkludm9rZXIiLCJmbnMiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbiIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJldmVudCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJhdHRycyIsImFsdEtleSIsImNoZWNrUHJvcCIsImhhc2giLCJwcmVzZXJ2ZSIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwiaXNUZXh0Tm9kZSIsIm5lc3RlZEluZGV4IiwibGFzdEluZGV4IiwibGFzdCIsInNoaWZ0IiwiX2lzVkxpc3QiLCJpbml0UHJvdmlkZSIsIl9wcm92aWRlZCIsImluaXRJbmplY3Rpb25zIiwicmVzb2x2ZUluamVjdCIsInByb3ZpZGVLZXkiLCJwcm92aWRlRGVmYXVsdCIsInJlc29sdmVTbG90cyIsInNsb3RzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3RzIiwibm9ybWFsU2xvdHMiLCJwcmV2U2xvdHMiLCJoYXNOb3JtYWxTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIiRoYXNOb3JtYWwiLCJub3JtYWxpemVTY29wZWRTbG90Iiwia2V5JDIiLCJwcm94eU5vcm1hbFNsb3QiLCJwcm94eSIsInJlbmRlckxpc3QiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwibm9kZXMiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCIkc2xvdHMiLCIkY3JlYXRlRWxlbWVudCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibG9vcCIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJ0cmVlIiwiX3JlbmRlclByb3h5IiwibWFya1N0YXRpYyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwidmFsdWVzIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3MiLCJfbCIsIl90IiwiX3EiLCJfaSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX3YiLCJfZSIsIl91IiwiX2ciLCJfZCIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJ0aGlzJDEiLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJsaXN0ZW5lcnMiLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfYyIsImQiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibWVyZ2VQcm9wcyIsInJlbmRlckNvbnRleHQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0Iiwidm5vZGVzIiwiY2xvbmUiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaW5pdCIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwicXVldWVBY3RpdmF0ZWRDb21wb25lbnQiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsIiRkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJjaWQiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiaW5saW5lVGVtcGxhdGUiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiZjEiLCJmMiIsImNhbGxiYWNrIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsIl9jcmVhdGVFbGVtZW50IiwiaXMiLCJwcmUiLCJhcHBseU5TIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJmb3JjZSIsInN0eWxlIiwiY2xhc3MiLCJpbml0UmVuZGVyIiwiX3Zub2RlIiwicGFyZW50Vm5vZGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJwYXJlbnREYXRhIiwiX3BhcmVudExpc3RlbmVycyIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInJlbmRlck1peGluIiwiVnVlIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlZiIsImVuc3VyZUN0b3IiLCJjb21wIiwiYmFzZSIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwic3luYyIsInRpbWVyTG9hZGluZyIsInRpbWVyVGltZW91dCIsIiRvbiIsImZvcmNlUmVuZGVyIiwicmVuZGVyQ29tcGxldGVkIiwiJGZvcmNlVXBkYXRlIiwiY2xlYXJUaW1lb3V0IiwicmVhc29uIiwiY29tcG9uZW50IiwiZGVsYXkiLCJ0aW1lb3V0IiwiZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCIsImluaXRFdmVudHMiLCJfZXZlbnRzIiwiX2hhc0hvb2tFdmVudCIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsInJlbW92ZSQxIiwiJG9mZiIsIl90YXJnZXQiLCJvbmNlSGFuZGxlciIsIm9sZExpc3RlbmVycyIsImV2ZW50c01peGluIiwiaG9va1JFIiwiJG9uY2UiLCJpJDEiLCJjYnMiLCIkZW1pdCIsInNldEFjdGl2ZUluc3RhbmNlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiaW5pdExpZmVjeWNsZSIsIiRjaGlsZHJlbiIsIiRyZWZzIiwiX3dhdGNoZXIiLCJfaW5hY3RpdmUiLCJfZGlyZWN0SW5hY3RpdmUiLCJfaXNCZWluZ0Rlc3Ryb3llZCIsImxpZmVjeWNsZU1peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJ0ZWFyZG93biIsIl93YXRjaGVycyIsIl9kYXRhIiwibW91bnRDb21wb25lbnQiLCJlbCIsInVwZGF0ZUNvbXBvbmVudCIsIldhdGNoZXIiLCJiZWZvcmUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJpc0luSW5hY3RpdmVUcmVlIiwiZGlyZWN0IiwiaGFuZGxlcnMiLCJqIiwicXVldWUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsIndhaXRpbmciLCJmbHVzaGluZyIsInJlc2V0U2NoZWR1bGVyU3RhdGUiLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJub3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwic29ydCIsInJ1biIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJxdWV1ZVdhdGNoZXIiLCJ1aWQkMiIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJkZWVwIiwidXNlciIsImxhenkiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiZXhwcmVzc2lvbiIsImNsZWFudXBEZXBzIiwidG1wIiwib2xkVmFsdWUiLCJldmFsdWF0ZSIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInNvdXJjZUtleSIsImluaXRTdGF0ZSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiaW5pdERhdGEiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJwcm9wc09wdGlvbnMiLCJpc1Jvb3QiLCJnZXREYXRhIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJkZWZpbmVDb21wdXRlZCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiY3JlYXRlV2F0Y2hlciIsIiR3YXRjaCIsInN0YXRlTWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInVpZCQzIiwiaW5pdE1peGluIiwiX2luaXQiLCJfdWlkIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwic3VwZXIiLCJzdXBlck9wdGlvbnMiLCJjYWNoZWRTdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsImNvbXBvbmVudHMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJpbml0VXNlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0TWl4aW4kMSIsIm1peGluIiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwiQ29tcCIsImluaXRBc3NldFJlZ2lzdGVycyIsImRlZmluaXRpb24iLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJmaWx0ZXIiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsImNhY2hlZCQkMSIsInBhdHRlcm5UeXBlcyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiTnVtYmVyIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsIm1vdW50ZWQiLCJyZWYkMSIsInBhcnNlSW50IiwiYnVpbHRJbkNvbXBvbmVudHMiLCJpbml0R2xvYmFsQVBJIiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwiZGVsZXRlIiwib2JzZXJ2YWJsZSIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImF0dHIiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsImlzRmFsc3lBdHRyVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzVGV4dElucHV0VHlwZSIsInF1ZXJ5Iiwic2VsZWN0ZWQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCQxIiwidGFnTmFtZSIsIm11bHRpcGxlIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwiY3JlYXRlQ29tbWVudCIsImluc2VydEJlZm9yZSIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJub2RlT3BzIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJzYW1lSW5wdXRUeXBlIiwidHlwZUEiLCJ0eXBlQiIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwiYmFja2VuZCIsIm1vZHVsZXMiLCJlbXB0eU5vZGVBdCIsImNyZWF0ZVJtQ2IiLCJjaGlsZEVsbSIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwidHJhbnNpdGlvbiIsImFjdGl2YXRlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwicm0iLCJ1cGRhdGVDaGlsZHJlbiIsIm9sZENoIiwibmV3Q2giLCJyZW1vdmVPbmx5Iiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJwYXRjaFZub2RlIiwiZmluZElkeEluT2xkIiwiZW5kIiwiaHlkcmF0ZSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaXNSZW5kZXJlZE1vZHVsZSIsImluVlByZSIsImhhc0NoaWxkTm9kZXMiLCJpbm5lckhUTUwiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImRpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkQXJnIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJjYWxsSW5zZXJ0IiwiZW1wdHlNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJnZXRSYXdEaXJOYW1lIiwicmF3TmFtZSIsImpvaW4iLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwidGFyZ2V0JDEiLCJrbGFzcyIsIlJBTkdFX1RPS0VOIiwiQ0hFQ0tCT1hfUkFESU9fVE9LRU4iLCJub3JtYWxpemVFdmVudHMiLCJjaGFuZ2UiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJEb2N1bWVudCIsInVwZGF0ZURPTUxpc3RlbmVycyIsInN2Z0NvbnRhaW5lciIsImV2ZW50cyIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJjaGlsZE5vZGVzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsIl92TW9kaWZpZXJzIiwibnVtYmVyIiwidHJpbSIsInBhcnNlU3R5bGVUZXh0IiwiY3NzVGV4dCIsImxpc3REZWxpbWl0ZXIiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZ2V0U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZW1wdHlTdHlsZSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemVkTmFtZSIsIm5vcm1hbGl6ZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiY3NzIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImV4cGVjdGVkVHlwZSIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwic3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJzIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiY2FuY2VsbGVkIiwiX2VudGVyQ2IiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBsaWNpdEVudGVyRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBsYXRmb3JtTW9kdWxlcyIsInBhdGNoIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJvIiwibmVlZFJlc2V0IiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsImlzU2FtZUNoaWxkIiwib2xkQ2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsInJlbW92ZWQiLCJjJDEiLCJwb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ1cGRhdGVkIiwiaGFzTW92ZSIsImNhbGxQZW5kaW5nQ2JzIiwicmVjb3JkUG9zaXRpb24iLCJhcHBseVRyYW5zbGF0aW9uIiwiX3JlZmxvdyIsImJvZHkiLCJvZmZzZXRIZWlnaHQiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsIm5ld1BvcyIsIm9sZFBvcyIsImR4IiwiZHkiLCJ0b3AiLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiY2xhc3NvZiIsImh0bWwiLCJJU19JT1MiLCJsb2NhdGlvbiIsImNsZWFySW1tZWRpYXRlIiwicHJvY2VzcyIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJPTlJFQURZU1RBVEVDSEFOR0UiLCJydW5uZXIiLCJsaXN0ZW5lciIsInBvc3QiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiaG9zdCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwidmVyc2lvbnMiLCJ2OCIsImFwcGx5TWl4aW4iLCJ2dWV4SW5pdCIsInN0b3JlIiwiJHN0b3JlIiwiZGV2dG9vbEhvb2siLCJkZXZ0b29sUGx1Z2luIiwiX2RldnRvb2xIb29rIiwidGFyZ2V0U3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJzdWJzY3JpYmUiLCJtdXRhdGlvbiIsInN0YXRlIiwiZm9yRWFjaFZhbHVlIiwicGFydGlhbCIsIk1vZHVsZSIsInJhd01vZHVsZSIsInJ1bnRpbWUiLCJfY2hpbGRyZW4iLCJfcmF3TW9kdWxlIiwicmF3U3RhdGUiLCJuYW1lc3BhY2VkIiwiYWRkQ2hpbGQiLCJnZXRDaGlsZCIsImFjdGlvbnMiLCJtdXRhdGlvbnMiLCJnZXR0ZXJzIiwiZm9yRWFjaENoaWxkIiwiZm9yRWFjaEdldHRlciIsImZvckVhY2hBY3Rpb24iLCJmb3JFYWNoTXV0YXRpb24iLCJNb2R1bGVDb2xsZWN0aW9uIiwicmF3Um9vdE1vZHVsZSIsInJlZ2lzdGVyIiwidGFyZ2V0TW9kdWxlIiwibmV3TW9kdWxlIiwicm9vdCIsImdldE5hbWVzcGFjZSIsInJhd0NoaWxkTW9kdWxlIiwidW5yZWdpc3RlciIsIlN0b3JlIiwicGx1Z2lucyIsInN0cmljdCIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJfbWFrZUxvY2FsR2V0dGVyc0NhY2hlIiwiZGlzcGF0Y2giLCJjb21taXQiLCJwYXlsb2FkIiwiaW5zdGFsbE1vZHVsZSIsInJlc2V0U3RvcmVWTSIsInVzZURldnRvb2xzIiwicHJvdG90eXBlQWNjZXNzb3JzJDEiLCJnZW5lcmljU3Vic2NyaWJlIiwicmVzZXRTdG9yZSIsImhvdCIsIm9sZFZtIiwiX3ZtIiwid3JhcHBlZEdldHRlcnMiLCIkJHN0YXRlIiwiZW5hYmxlU3RyaWN0TW9kZSIsIl93aXRoQ29tbWl0Iiwicm9vdFN0YXRlIiwicGFyZW50U3RhdGUiLCJnZXROZXN0ZWRTdGF0ZSIsIm1vZHVsZU5hbWUiLCJsb2NhbCIsIm1ha2VMb2NhbENvbnRleHQiLCJuYW1lc3BhY2VkVHlwZSIsInJlZ2lzdGVyTXV0YXRpb24iLCJhY3Rpb24iLCJyZWdpc3RlckFjdGlvbiIsInJlZ2lzdGVyR2V0dGVyIiwibm9OYW1lc3BhY2UiLCJfdHlwZSIsIl9wYXlsb2FkIiwiX29wdGlvbnMiLCJ1bmlmeU9iamVjdFN0eWxlIiwibWFrZUxvY2FsR2V0dGVycyIsImdldHRlcnNQcm94eSIsInNwbGl0UG9zIiwibG9jYWxUeXBlIiwiZW50cnkiLCJyb290R2V0dGVycyIsInJhd0dldHRlciIsIl9WdWUiLCJhbGwiLCJhZnRlciIsInN1YnNjcmliZUFjdGlvbiIsInJlZ2lzdGVyTW9kdWxlIiwicHJlc2VydmVTdGF0ZSIsInVucmVnaXN0ZXJNb2R1bGUiLCJob3RVcGRhdGUiLCJuZXdPcHRpb25zIiwiY29tbWl0dGluZyIsIm1hcFN0YXRlIiwibm9ybWFsaXplTmFtZXNwYWNlIiwic3RhdGVzIiwibm9ybWFsaXplTWFwIiwiZ2V0TW9kdWxlQnlOYW1lc3BhY2UiLCJ2dWV4IiwibWFwTXV0YXRpb25zIiwibWFwR2V0dGVycyIsIm1hcEFjdGlvbnMiLCJjcmVhdGVOYW1lc3BhY2VkSGVscGVycyIsImlzVmFsaWRNYXAiLCJoZWxwZXIiLCJpbmRleF9lc20iLCJJdGVyYXRvcnMiLCJvYmplY3RLZXlzIiwiUHJvcGVydGllcyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJkZWZpbmVJdGVyYXRvciIsIlNUUklOR19JVEVSQVRPUiIsInNldEludGVybmFsU3RhdGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZ2V0dGVyRm9yIiwiaXRlcmF0ZWQiLCJzdHJpbmciLCJwb2ludCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIlMiLCJDIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwidCIsIm0iLCJyIiwidHlwZUFoZWFkUG9pbnRlciIsIm1heWJlQWRqdXN0U2Nyb2xsIiwicGl4ZWxzVG9Qb2ludGVyVG9wIiwicGl4ZWxzVG9Qb2ludGVyQm90dG9tIiwidmlld3BvcnQiLCJzY3JvbGxUbyIsImJvdHRvbSIsInBvaW50ZXJIZWlnaHQiLCJkcm9wZG93bk1lbnUiLCJkcm9wZG93bk9wZW4iLCJzY3JvbGxUb3AiLCJ1IiwiZmlsdGVyZWRPcHRpb25zIiwic2VsZWN0YWJsZSIsInR5cGVBaGVhZFVwIiwidHlwZUFoZWFkRG93biIsInR5cGVBaGVhZFNlbGVjdCIsInNlbGVjdCIsInRhZ2dhYmxlIiwic2VhcmNoIiwiY3JlYXRlT3B0aW9uIiwiY2xlYXJTZWFyY2hPblNlbGVjdCIsIm11dGFibGVMb2FkaW5nIiwidG9nZ2xlTG9hZGluZyIsIkRlc2VsZWN0IiwieG1sbnMiLCJ3aWR0aCIsImhlaWdodCIsIk9wZW5JbmRpY2F0b3IiLCJhcHBlbmRUb0JvZHkiLCJ0b2dnbGUiLCJ1bmJpbmRQb3NpdGlvbiIsImNhbGN1bGF0ZVBvc2l0aW9uIiwic2Nyb2xsWSIsInNjcm9sbFgiLCJ5IiwiZyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkaXNhYmxlZCIsImNsZWFyYWJsZSIsInNlYXJjaGFibGUiLCJjbG9zZU9uU2VsZWN0IiwibGFiZWwiLCJhdXRvY29tcGxldGUiLCJnZXRPcHRpb25MYWJlbCIsImdldE9wdGlvbktleSIsIm9uVGFiIiwic2VsZWN0T25UYWIiLCJpc0NvbXBvc2luZyIsInRhYmluZGV4IiwicHVzaFRhZ3MiLCJmaWx0ZXJhYmxlIiwiZmlsdGVyQnkiLCJvcHRpb25MaXN0IiwicmVzZXRPbk9wdGlvbnNDaGFuZ2UiLCJ2YWxpZGF0b3IiLCJpbmNsdWRlcyIsImNsZWFyU2VhcmNoT25CbHVyIiwibm9Ecm9wIiwiaW5wdXRJZCIsInNlbGVjdE9uS2V5Q29kZXMiLCJzZWFyY2hJbnB1dFF1ZXJ5U2VsZWN0b3IiLCJtYXBLZXlkb3duIiwib3BlbiIsInB1c2hlZFRhZ3MiLCJzZWxlY3RlZFZhbHVlIiwiY2xlYXJTZWxlY3Rpb24iLCJpc1RyYWNraW5nVmFsdWVzIiwic2V0SW50ZXJuYWxWYWx1ZUZyb21PcHRpb25zIiwicHVzaFRhZyIsIiRkYXRhIiwiZmluZE9wdGlvbkZyb21SZWR1Y2VkVmFsdWUiLCJpc09wdGlvblNlbGVjdGVkIiwib3B0aW9uRXhpc3RzIiwidXBkYXRlVmFsdWUiLCJvbkFmdGVyU2VsZWN0IiwiZGVzZWxlY3QiLCJvcHRpb25Db21wYXJhdG9yIiwic2VhcmNoRWwiLCJibHVyIiwidG9nZ2xlRHJvcGRvd24iLCJkZXNlbGVjdEJ1dHRvbnMiLCJjbGVhckJ1dHRvbiIsImNvbnRhaW5zIiwiZm9jdXMiLCJmaW5kIiwiY2xvc2VTZWFyY2hPcHRpb25zIiwibWF5YmVEZWxldGVWYWx1ZSIsIm5vcm1hbGl6ZU9wdGlvbkZvclNsb3QiLCJvbkVzY2FwZSIsIm9uU2VhcmNoQmx1ciIsIm1vdXNlZG93biIsInNlYXJjaGluZyIsIm9uU2VhcmNoRm9jdXMiLCJvbk1vdXNlZG93biIsIm9uTW91c2VVcCIsIm9uU2VhcmNoS2V5RG93biIsInByZXZlbnREZWZhdWx0IiwiOCIsIjkiLCIyNyIsIjM4IiwiNDAiLCJrZXlDb2RlIiwic2VsZWN0ZWRPcHRpb25zIiwic2NvcGUiLCJhdHRyaWJ1dGVzIiwic2VhcmNoUGxhY2Vob2xkZXIiLCJyZWFkb25seSIsImNvbXBvc2l0aW9uc3RhcnQiLCJjb21wb3NpdGlvbmVuZCIsImtleWRvd24iLCJpbnB1dCIsInNwaW5uZXIiLCJub09wdGlvbnMiLCJvcGVuSW5kaWNhdG9yIiwicm9sZSIsImxpc3RIZWFkZXIiLCJsaXN0Rm9vdGVyIiwiaGVhZGVyIiwiZm9vdGVyIiwiY2hpbGRDb21wb25lbnRzIiwic3RhdGVDbGFzc2VzIiwiaXNWYWx1ZUVtcHR5Iiwic2hvd0NsZWFyQnV0dG9uIiwidGl0bGUiLCJjbGljayIsIm1vdXNldXAiLCJtb3VzZW92ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJ2aXNpYmlsaXR5IiwidyIsImFqYXgiLCJwb2ludGVyIiwicG9pbnRlclNjcm9sbCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCIkZmlsdGVyIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCJhcmd1bWVudCIsIl9kZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGVPbmx5Iiwic3ltYm9scyIsInN5bSIsIl9vYmplY3RTcHJlYWQyIiwiSVNfUFVSRSIsImNvcHlyaWdodCIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwid2hpdGVzcGFjZXMiLCJ3aGl0ZXNwYWNlIiwibHRyaW0iLCJydHJpbSIsIlRZUEUiLCJGbGF0dGVkIiwiUHJpbWl0aXZlIiwicHJpbWl0aXZlIiwicGFyc2UiLCJyZXZpdmVyIiwiUHJpbWl0aXZlcyIsInByaW1pdGl2ZXMiLCJyZXZpdmUiLCJyZXBsYWNlciIsInNwYWNlIiwiZmlyc3RSdW4iLCJrbm93biIsIk1hcCIsIm91dHB1dCIsImsiLCJwYXJzZWQiLCJiaXRtYXAiLCJfaCIsInZlcnRpY2FsIiwiZ2V0QnRuQ2xhc3MiLCJkZWNyZW1lbnRBcmlhTGFiZWwiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJzcGluQnV0dG9uQXJpYUxhYmVsIiwiaW50VmFsdWUiLCJmb3JtTmFtZSIsImluY3JlbWVudEFyaWFMYWJlbCIsIkluZGV4ZWRPYmplY3QiLCJuYXRpdmVBc3NpZ24iLCJhc3NpZ24iLCJBIiwiQiIsImFscGhhYmV0IiwiY2hyIiwiVCIsImFyZ3VtZW50c0xlbmd0aCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiQ09OVkVSVF9UT19TVFJJTkciLCJmaXJzdCIsInNlY29uZCIsInBvc2l0aW9uIiwic2l6ZSIsImNvZGVBdCIsIm9yaWdpbmFsQXJyYXkiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJXZWFrTWFwIiwiZW5mb3JjZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJpbnNwZWN0U291cmNlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJURU1QTEFURSIsInVuc2FmZSIsInNpbXBsZSIsInNldFByb3RvdHlwZU9mIiwiZHVtbXkiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsIk5BTUUiLCJhY3RpdmVYRG9jdW1lbnQiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJHVCIsIkxUIiwiUFJPVE9UWVBFIiwiU0NSSVBUIiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiY29udGVudCIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdFZpYUlGcmFtZSIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwiSlMiLCJjb250ZW50V2luZG93IiwiRiIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRUb1N0cmluZ1RhZyIsIkl0ZXJhdG9yc0NvcmUiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJLRVlTIiwiVkFMVUVTIiwiRU5UUklFUyIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJwcm9wZXJ0eUtleSIsImZ1bmN0aW9uVG9TdHJpbmciLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiaXNFcnJvciIsImlzRXh0ZW5kZWRFcnJvciIsIl9uYW1lIiwiVmlldyIsInJvdXRlclZpZXciLCJyb3V0ZSIsIiRyb3V0ZSIsIl9yb3V0ZXJWaWV3Q2FjaGUiLCJkZXB0aCIsImluYWN0aXZlIiwiX3JvdXRlclJvb3QiLCJ2bm9kZURhdGEiLCJyb3V0ZXJWaWV3RGVwdGgiLCJjYWNoZWREYXRhIiwiY2FjaGVkQ29tcG9uZW50IiwiY29uZmlnUHJvcHMiLCJmaWxsUHJvcHNpbkRhdGEiLCJtYXRjaGVkIiwicmVnaXN0ZXJSb3V0ZUluc3RhbmNlIiwiaW5zdGFuY2VzIiwicHJvcHNUb1Bhc3MiLCJyZXNvbHZlUHJvcHMiLCJlbmNvZGVSZXNlcnZlUkUiLCJlbmNvZGVSZXNlcnZlUmVwbGFjZXIiLCJjb21tYVJFIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVzb2x2ZVF1ZXJ5IiwiZXh0cmFRdWVyeSIsIl9wYXJzZVF1ZXJ5IiwicGFyc2VkUXVlcnkiLCJwYXJzZVF1ZXJ5IiwicGFyYW0iLCJwYXJ0cyIsInN0cmluZ2lmeVF1ZXJ5IiwidmFsMiIsIngiLCJ0cmFpbGluZ1NsYXNoUkUiLCJjcmVhdGVSb3V0ZSIsInJlY29yZCIsInJlZGlyZWN0ZWRGcm9tIiwicm91dGVyIiwibWV0YSIsImZ1bGxQYXRoIiwiZ2V0RnVsbFBhdGgiLCJmb3JtYXRNYXRjaCIsIlNUQVJUIiwiX3N0cmluZ2lmeVF1ZXJ5IiwiaXNTYW1lUm91dGUiLCJpc09iamVjdEVxdWFsIiwiYUtleXMiLCJiS2V5cyIsImFWYWwiLCJiVmFsIiwiaXNJbmNsdWRlZFJvdXRlIiwicXVlcnlJbmNsdWRlcyIsInJlc29sdmVQYXRoIiwicmVsYXRpdmUiLCJhcHBlbmQiLCJmaXJzdENoYXIiLCJzdGFjayIsInNlZ21lbnQiLCJoYXNoSW5kZXgiLCJxdWVyeUluZGV4IiwiY2xlYW5QYXRoIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cF8xIiwicGF0aFRvUmVnZXhwIiwicGFyc2VfMSIsImNvbXBpbGVfMSIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uXzEiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHBfMSIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsIm9mZnNldCIsInByZWZpeCIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInJlcGVhdCIsIm9wdGlvbmFsIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJlbmNvZGVBc3RlcmlzayIsInByZXR0eSIsInRva2VuIiwiYXR0YWNoS2V5cyIsInJlIiwiZmxhZ3MiLCJzZW5zaXRpdmUiLCJyZWdleHBUb1JlZ2V4cCIsImdyb3VwcyIsImFycmF5VG9SZWdleHAiLCJyZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImVuZHNXaXRoRGVsaW1pdGVyIiwicmVnZXhwQ29tcGlsZUNhY2hlIiwiZmlsbFBhcmFtcyIsInJvdXRlTXNnIiwiZmlsbGVyIiwicGF0aE1hdGNoIiwibm9ybWFsaXplTG9jYXRpb24iLCJwYXJhbXMkMSIsInJhd1BhdGgiLCJwYXJzZWRQYXRoIiwiYmFzZVBhdGgiLCJ0b1R5cGVzIiwiZXZlbnRUeXBlcyIsIkxpbmsiLCJyZXF1aXJlZCIsImV4YWN0IiwiZXhhY3RBY3RpdmVDbGFzcyIsIiRyb3V0ZXIiLCJocmVmIiwiY2xhc3NlcyIsImdsb2JhbEFjdGl2ZUNsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwiZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyIsImxpbmtFeGFjdEFjdGl2ZUNsYXNzIiwiYWN0aXZlQ2xhc3NGYWxsYmFjayIsImV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayIsImNvbXBhcmVUYXJnZXQiLCJndWFyZEV2ZW50Iiwic2NvcGVkU2xvdCIsIm5hdmlnYXRlIiwiaXNBY3RpdmUiLCJpc0V4YWN0QWN0aXZlIiwiZmluZEFuY2hvciIsImFEYXRhIiwiaGFuZGxlciQxIiwiZXZlbnQkMSIsImFBdHRycyIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiaW5zdGFsbGVkIiwicmVnaXN0ZXJJbnN0YW5jZSIsImNhbGxWYWwiLCJfcm91dGVyIiwiaGlzdG9yeSIsIl9yb3V0ZSIsImJlZm9yZVJvdXRlRW50ZXIiLCJiZWZvcmVSb3V0ZUxlYXZlIiwiYmVmb3JlUm91dGVVcGRhdGUiLCJjcmVhdGVSb3V0ZU1hcCIsInJvdXRlcyIsIm9sZFBhdGhMaXN0Iiwib2xkUGF0aE1hcCIsIm9sZE5hbWVNYXAiLCJwYXRoTGlzdCIsInBhdGhNYXAiLCJuYW1lTWFwIiwiYWRkUm91dGVSZWNvcmQiLCJtYXRjaEFzIiwicGF0aFRvUmVnZXhwT3B0aW9ucyIsIm5vcm1hbGl6ZWRQYXRoIiwibm9ybWFsaXplUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJyZWdleCIsImNvbXBpbGVSb3V0ZVJlZ2V4IiwicmVkaXJlY3QiLCJjaGlsZE1hdGNoQXMiLCJhbGlhcyIsImFsaWFzZXMiLCJhbGlhc1JvdXRlIiwiY3JlYXRlTWF0Y2hlciIsImFkZFJvdXRlcyIsImN1cnJlbnRSb3V0ZSIsIl9jcmVhdGVSb3V0ZSIsInBhcmFtTmFtZXMiLCJyZWNvcmQkMSIsIm1hdGNoUm91dGUiLCJvcmlnaW5hbFJlZGlyZWN0IiwicmVzb2x2ZVJlY29yZFBhdGgiLCJyZXNvbHZlZFBhdGgiLCJhbGlhc2VkUGF0aCIsImFsaWFzZWRNYXRjaCIsImFsaWFzZWRSZWNvcmQiLCJUaW1lIiwiZ2VuU3RhdGVLZXkiLCJ0b0ZpeGVkIiwiX2tleSIsImdldFN0YXRlS2V5Iiwic2V0U3RhdGVLZXkiLCJwb3NpdGlvblN0b3JlIiwic2V0dXBTY3JvbGwiLCJwcm90b2NvbEFuZFBhdGgiLCJhYnNvbHV0ZVBhdGgiLCJzdGF0ZUNvcHkiLCJzYXZlU2Nyb2xsUG9zaXRpb24iLCJoYW5kbGVTY3JvbGwiLCJpc1BvcCIsImFwcCIsImJlaGF2aW9yIiwic2Nyb2xsQmVoYXZpb3IiLCJnZXRTY3JvbGxQb3NpdGlvbiIsInNob3VsZFNjcm9sbCIsInNjcm9sbFRvUG9zaXRpb24iLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwiZG9jRWwiLCJkb2N1bWVudEVsZW1lbnQiLCJkb2NSZWN0IiwiZWxSZWN0IiwiaXNWYWxpZFBvc2l0aW9uIiwiaXNOdW1iZXIiLCJub3JtYWxpemVQb3NpdGlvbiIsIm5vcm1hbGl6ZU9mZnNldCIsImhhc2hTdGFydHNXaXRoTnVtYmVyUkUiLCJzZWxlY3RvciIsImdldEVsZW1lbnRCeUlkIiwic3VwcG9ydHNQdXNoU3RhdGUiLCJ1YSIsInB1c2hTdGF0ZSIsInVybCIsInJ1blF1ZXVlIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50cyIsImhhc0FzeW5jIiwiZmxhdE1hcENvbXBvbmVudHMiLCJyZXNvbHZlZERlZiIsImlzRVNNb2R1bGUiLCJtc2ciLCJFcnJvciIsImZsYXR0ZW4iLCJOYXZpZ2F0aW9uRHVwbGljYXRlZCIsIm5vcm1hbGl6ZWRMb2NhdGlvbiIsIkhpc3RvcnkiLCJub3JtYWxpemVCYXNlIiwicmVhZHkiLCJyZWFkeUNicyIsInJlYWR5RXJyb3JDYnMiLCJlcnJvckNicyIsImJhc2VFbCIsInJlc29sdmVRdWV1ZSIsImFjdGl2YXRlZCIsImRlYWN0aXZhdGVkIiwiZXh0cmFjdEd1YXJkcyIsInJlY29yZHMiLCJyZXZlcnNlIiwiZ3VhcmRzIiwiaW5zdGFuY2UiLCJndWFyZCIsImV4dHJhY3RHdWFyZCIsImV4dHJhY3RMZWF2ZUd1YXJkcyIsImJpbmRHdWFyZCIsImV4dHJhY3RVcGRhdGVIb29rcyIsImV4dHJhY3RFbnRlckd1YXJkcyIsImlzVmFsaWQiLCJiaW5kRW50ZXJHdWFyZCIsInBvbGwiLCJsaXN0ZW4iLCJvblJlYWR5IiwiZXJyb3JDYiIsIm9uRXJyb3IiLCJ0cmFuc2l0aW9uVG8iLCJvbkNvbXBsZXRlIiwib25BYm9ydCIsImNvbmZpcm1UcmFuc2l0aW9uIiwidXBkYXRlUm91dGUiLCJlbnN1cmVVUkwiLCJhYm9ydCIsImJlZm9yZUhvb2tzIiwicG9zdEVudGVyQ2JzIiwiZW50ZXJHdWFyZHMiLCJyZXNvbHZlSG9va3MiLCJwcmV2IiwiYWZ0ZXJIb29rcyIsIkhUTUw1SGlzdG9yeSIsImV4cGVjdFNjcm9sbCIsInN1cHBvcnRzU2Nyb2xsIiwiaW5pdExvY2F0aW9uIiwiZ2V0TG9jYXRpb24iLCJnbyIsImZyb21Sb3V0ZSIsImdldEN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsInBhdGhuYW1lIiwiSGFzaEhpc3RvcnkiLCJjaGVja0ZhbGxiYWNrIiwiZW5zdXJlU2xhc2giLCJzZXR1cExpc3RlbmVycyIsImdldEhhc2giLCJyZXBsYWNlSGFzaCIsInB1c2hIYXNoIiwic2VhcmNoSW5kZXgiLCJnZXRVcmwiLCJBYnN0cmFjdEhpc3RvcnkiLCJ0YXJnZXRJbmRleCIsIlZ1ZVJvdXRlciIsImFwcHMiLCJtYXRjaGVyIiwicmVnaXN0ZXJIb29rIiwiY3JlYXRlSHJlZiIsInNldHVwSGFzaExpc3RlbmVyIiwiYmVmb3JlRWFjaCIsImJlZm9yZVJlc29sdmUiLCJhZnRlckVhY2giLCJiYWNrIiwiZm9yd2FyZCIsImdldE1hdGNoZWRDb21wb25lbnRzIiwibm9ybWFsaXplZFRvIiwiZm9jdXNJbiIsImNvbnRhaW5lciIsImlzRnVsbFBhZ2UiLCJwYXJlbnRFbGVtZW50IiwiYmVmb3JlRGVzdHJveSIsImNvbG9yIiwidmlld0JveCIsInN0cm9rZSIsImZpbGwiLCJjeCIsImN5IiwiYXR0cmlidXRlTmFtZSIsImR1ciIsInJlcGVhdENvdW50IiwiYmVnaW4iLCJjYWxjTW9kZSIsImF0dHJpYnV0ZVR5cGUiLCJwcm9ncmFtbWF0aWMiLCJjYW5DYW5jZWwiLCJvbkNhbmNlbCIsImJhY2tncm91bmRDb2xvciIsIm9wYWNpdHkiLCJ6SW5kZXgiLCJsb2FkZXIiLCJTcGlubmVyIiwiRG90cyIsIkJhcnMiLCJrZXlQcmVzcyIsImNhbmNlbCIsImhpZGUiLCJiYWNrZ3JvdW5kIiwiJGxvYWRpbmciLCJwb3N0Zml4IiwicmFuZG9tIiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJPcCIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIndyYXAiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJpdGVyIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJyb290RW50cnkiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJpbnZva2UiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJlbnF1ZXVlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwicmV0dXJuIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwicmV0dXJuTWV0aG9kIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJBdHRyaWJ1dGVzIiwibmF0aXZlSm9pbiIsIkVTM19TVFJJTkdTIiwic2VwYXJhdG9yIiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwic2hhcmVkIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiSElEREVOIiwiU1lNQk9MIiwiVE9fUFJJTUlUSVZFIiwiT2JqZWN0UHJvdG90eXBlIiwiJHN0cmluZ2lmeSIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsIlFPYmplY3QiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJkZXNjcmlwdGlvbiIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRjcmVhdGUiLCJWIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmFtZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRk9SQ0VEX0pTT05fU1RSSU5HSUZZIiwiJHJlcGxhY2VyIiwidmFsdWVPZiIsImNlaWwiLCJOYXRpdmVQcm9taXNlIiwic3BlY2llc0NvbnN0cnVjdG9yIiwicHJvbWlzZVJlc29sdmUiLCJOT05fR0VORVJJQyIsInJlYWwiLCJvbkZpbmFsbHkiLCJpc0Z1bmN0aW9uIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJOdW1iZXJQcm90b3R5cGUiLCJCUk9LRU5fQ0xBU1NPRiIsInRoaXJkIiwicmFkaXgiLCJtYXhDb2RlIiwiZGlnaXRzIiwiY29kZSIsIk5hTiIsIk51bWJlcldyYXBwZXIiLCJ0aHJvd2VyIiwiQUNDRVNTT1JTIiwiYXJndW1lbnQwIiwiYXJndW1lbnQxIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsImZsdXNoIiwiaGVhZCIsInByb21pc2UiLCJtYWNyb3Rhc2siLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiSVNfTk9ERSIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwiZXhpdCIsInRhc2siLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwibmF0aXZlS2V5cyIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJzcGVjaWZpY0NyZWF0ZSIsImZpbmRJbmRleCIsIk1vY2tTdG9yYWdlIiwiU2ltcGxlUHJvbWlzZVF1ZXVlIiwiX3F1ZXVlIiwiX2ZsdXNoaW5nIiwiZmx1c2hRdWV1ZSIsImNoYWluIiwibmV4dFRhc2siLCJtZXJnZSIsImludG8iLCJGbGF0dGVkSlNPTiIsIlZ1ZXhQZXJzaXN0ZW5jZSIsIl9tdXRleCIsInN1YnNjcmliZXIiLCJzdWJzY3JpYmVkIiwic3VwcG9ydENpcmN1bGFyIiwic3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsInJlZHVjZXIiLCJzdHJpY3RNb2RlIiwiUkVTVE9SRV9NVVRBVElPTiIsInNhdmVkU3RhdGUiLCJtZXJnZWRTdGF0ZSIsImFzeW5jU3RvcmFnZSIsInJlc3RvcmVTdGF0ZSIsImdldEl0ZW0iLCJzYXZlU3RhdGUiLCJzZXRJdGVtIiwicmVzdG9yZWQiLCJQUkVGRVJSRURfU1RSSU5HIiwiU0hBUkVEIiwiJGluZGV4T2YiLCJuYXRpdmVJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsInNlYXJjaEVsZW1lbnQiLCJFWElTVFMiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5IiwidmFyaWFibGUiLCJOQVNIT1JOX0JVRyIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiVEFHIiwiSVNfUklHSFQiLCJtZW1vIiwicmlnaHQiLCIkbWFwIiwiTEFSR0VfQVJSQVlfU0laRSIsIkhBU0hfVU5ERUZJTkVEIiwiSE9UX0NPVU5UIiwiSE9UX1NQQU4iLCJNQVhfU0FGRV9JTlRFR0VSIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYXN5bmNUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm51bGxUYWciLCJvYmplY3RUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVSZWdFeHBDaGFyIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJyZXF1aXJlIiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiYmFzZVRpbWVzIiwiaXRlcmF0ZWUiLCJiYXNlVW5hcnkiLCJvdmVyQXJnIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwibWFza1NyY0tleSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJvYmplY3RDcmVhdGUiLCJzeW1Ub1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVNYXgiLCJuYXRpdmVOb3ciLCJuYXRpdmVDcmVhdGUiLCJiYXNlQ3JlYXRlIiwiSGFzaCIsImhhc2hDbGVhciIsIl9fZGF0YV9fIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkxpc3RDYWNoZSIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwiYXNzb2NJbmRleE9mIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJnZXRNYXBEYXRhIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiU3RhY2siLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJwYWlycyIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlR2V0VGFnIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlSXNBcmd1bWVudHMiLCJpc09iamVjdExpa2UiLCJiYXNlSXNOYXRpdmUiLCJpc01hc2tlZCIsInRvU291cmNlIiwiYmFzZUlzVHlwZWRBcnJheSIsImlzTGVuZ3RoIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJpc1Byb3RvdHlwZSIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwiY3VzdG9taXplciIsInNyY1ZhbHVlIiwiYmFzZU1lcmdlRGVlcCIsIm5ld1ZhbHVlIiwic2FmZUdldCIsImtleXNJbiIsIm1lcmdlRnVuYyIsInN0YWNrZWQiLCJpc0NvbW1vbiIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImNvcHlBcnJheSIsImNsb25lQnVmZmVyIiwiY2xvbmVUeXBlZEFycmF5IiwidG9QbGFpbk9iamVjdCIsImluaXRDbG9uZU9iamVjdCIsImJhc2VSZXN0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYnVmZmVyIiwiaXNEZWVwIiwiY29weSIsImNsb25lQXJyYXlCdWZmZXIiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJ0eXBlZEFycmF5IiwiYnl0ZU9mZnNldCIsImNvcHlPYmplY3QiLCJpc05ldyIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiaXNJdGVyYXRlZUNhbGwiLCJmcm9tUmlnaHQiLCJrZXlzRnVuYyIsImlzS2V5YWJsZSIsImlzT3duIiwidW5tYXNrZWQiLCJpc0FycmF5TGlrZSIsIm90aGVyQXJncyIsInNob3J0T3V0IiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJvdGhlciIsInN0dWJGYWxzZSIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsImNyZWF0ZVByb3BlcnR5IiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsImFkZFRvVW5zY29wYWJsZXMiLCJBUlJBWV9JVEVSQVRPUiIsImtpbmQiLCJBcmd1bWVudHMiLCJJbnRlcm5hbCIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiUHJvbWlzZVdyYXBwZXIiLCJuYXRpdmVUaGVuIiwicmVkZWZpbmVBbGwiLCJzZXRTcGVjaWVzIiwiYW5JbnN0YW5jZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsIm1pY3JvdGFzayIsImhvc3RSZXBvcnRFcnJvcnMiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCIkZmV0Y2giLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJESVNQQVRDSF9FVkVOVCIsIlVOSEFORExFRF9SRUpFQ1RJT04iLCJSRUpFQ1RJT05fSEFORExFRCIsIlBFTkRJTkciLCJGVUxGSUxMRUQiLCJSRUpFQ1RFRCIsIkhBTkRMRUQiLCJVTkhBTkRMRUQiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJyZWFjdGlvbnMiLCJvayIsImV4aXRlZCIsInJlYWN0aW9uIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJJU19VTkhBTkRMRUQiLCJpc1VuaGFuZGxlZCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwid3JhcHBlciIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZmV0Y2giLCJjYXBhYmlsaXR5IiwiJHByb21pc2VSZXNvbHZlIiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidHJ5R2V0IiwiY2FsbGVlIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiXSwibWFwcGluZ3MiOiJvR0FBQSxJQUFJQSxFQUFrQixFQUFRLFFBRTFCQyxFQUFnQkQsRUFBZ0IsZUFDaENFLEVBQU8sR0FFWEEsRUFBS0QsR0FBaUIsSUFFdEJFLEVBQU9DLFFBQTJCLGVBQWpCQyxPQUFPSCxJLHVCQ1B4QixJQUFJSSxF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LEVBQWNqQyxFQUF1QjdrRCxNLG1CQ0g5Q3ZCLEVBQU9DLFFBQVUsQ0FDZnVpRixZQUFhLEVBQ2JDLG9CQUFxQixFQUNyQkMsYUFBYyxFQUNkQyxlQUFnQixFQUNoQkMsWUFBYSxFQUNiQyxjQUFlLEVBQ2ZDLGFBQWMsRUFDZEMscUJBQXNCLEVBQ3RCQyxTQUFVLEVBQ1ZDLGtCQUFtQixFQUNuQkMsZUFBZ0IsRUFDaEJDLGdCQUFpQixFQUNqQkMsa0JBQW1CLEVBQ25CQyxVQUFXLEVBQ1hDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxTQUFVLEVBQ1ZDLGlCQUFrQixFQUNsQkMsT0FBUSxFQUNSQyxZQUFhLEVBQ2JDLGNBQWUsRUFDZkMsY0FBZSxFQUNmQyxlQUFnQixFQUNoQkMsYUFBYyxFQUNkQyxjQUFlLEVBQ2ZDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCQyxlQUFnQixFQUNoQkMsaUJBQWtCLEVBQ2xCQyxjQUFlLEVBQ2ZDLFVBQVcsSSxxQkNqQ2IsSUFBSTNhLEVBQWdCLEVBQVEsUUFFNUIzcEUsRUFBT0MsUUFBVTBwRSxJQUVYcjFELE9BQU94TCxNQUVrQixpQkFBbkJ3TCxPQUFPbE4sVSxxQkNObkIsSUFBSTlELEVBQVMsRUFBUSxRQUVyQnRELEVBQU9DLFFBQVVxRCxFQUFPb0MiLCJmaWxlIjoiYXNzZXRzL2pzL2NodW5rLXZlbmRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgncmVkdWNlJywgeyAxOiAwIH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnZm9yRWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gKCFTVFJJQ1RfTUVUSE9EIHx8ICFVU0VTX1RPX0xFTkdUSCkgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59IDogW10uZm9yRWFjaDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKGlwaG9uZXxpcG9kfGlwYWQpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG5cbml0ZXJhdGUuc3RvcCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgcmVzdWx0KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xMVxuICogKGMpIDIwMTQtMjAxOSBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5uYXRpdmVPbikpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJUaGUgLm5hdGl2ZSBtb2RpZmllciBmb3Igdi1vbiBpcyBvbmx5IHZhbGlkIG9uIGNvbXBvbmVudHMgYnV0IGl0IHdhcyB1c2VkIG9uIDxcIiArIHRhZyArIFwiPi5cIiksXG4gICAgICAgICAgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjExJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc2FycnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xuXG52YXIgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudmFyIHJ1biA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJiAhZmFpbHMocG9zdCkpIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsIi8qKlxuICogdnVleCB2My4xLjNcbiAqIChjKSAyMDIwIEV2YW4gWW91XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gYXBwbHlNaXhpbiAoVnVlKSB7XG4gIHZhciB2ZXJzaW9uID0gTnVtYmVyKFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJylbMF0pO1xuXG4gIGlmICh2ZXJzaW9uID49IDIpIHtcbiAgICBWdWUubWl4aW4oeyBiZWZvcmVDcmVhdGU6IHZ1ZXhJbml0IH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG92ZXJyaWRlIGluaXQgYW5kIGluamVjdCB2dWV4IGluaXQgcHJvY2VkdXJlXG4gICAgLy8gZm9yIDEueCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICB2YXIgX2luaXQgPSBWdWUucHJvdG90eXBlLl9pbml0O1xuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgIG9wdGlvbnMuaW5pdCA9IG9wdGlvbnMuaW5pdFxuICAgICAgICA/IFt2dWV4SW5pdF0uY29uY2F0KG9wdGlvbnMuaW5pdClcbiAgICAgICAgOiB2dWV4SW5pdDtcbiAgICAgIF9pbml0LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWdWV4IGluaXQgaG9vaywgaW5qZWN0ZWQgaW50byBlYWNoIGluc3RhbmNlcyBpbml0IGhvb2tzIGxpc3QuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHZ1ZXhJbml0ICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gICAgLy8gc3RvcmUgaW5qZWN0aW9uXG4gICAgaWYgKG9wdGlvbnMuc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gdHlwZW9mIG9wdGlvbnMuc3RvcmUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBvcHRpb25zLnN0b3JlKClcbiAgICAgICAgOiBvcHRpb25zLnN0b3JlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJHN0b3JlKSB7XG4gICAgICB0aGlzLiRzdG9yZSA9IG9wdGlvbnMucGFyZW50LiRzdG9yZTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHRhcmdldCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gID8gd2luZG93XG4gIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFxuICAgIDoge307XG52YXIgZGV2dG9vbEhvb2sgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuZnVuY3Rpb24gZGV2dG9vbFBsdWdpbiAoc3RvcmUpIHtcbiAgaWYgKCFkZXZ0b29sSG9vaykgeyByZXR1cm4gfVxuXG4gIHN0b3JlLl9kZXZ0b29sSG9vayA9IGRldnRvb2xIb29rO1xuXG4gIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6aW5pdCcsIHN0b3JlKTtcblxuICBkZXZ0b29sSG9vay5vbigndnVleDp0cmF2ZWwtdG8tc3RhdGUnLCBmdW5jdGlvbiAodGFyZ2V0U3RhdGUpIHtcbiAgICBzdG9yZS5yZXBsYWNlU3RhdGUodGFyZ2V0U3RhdGUpO1xuICB9KTtcblxuICBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZSkge1xuICAgIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6bXV0YXRpb24nLCBtdXRhdGlvbiwgc3RhdGUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGl0ZW0gdGhhdCBwYXNzIHRoZSB0ZXN0XG4gKiBieSBzZWNvbmQgYXJndW1lbnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gKiBAcmV0dXJuIHsqfVxuICovXG5cbi8qKlxuICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hWYWx1ZSAob2JqLCBmbikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4ob2JqW2tleV0sIGtleSk7IH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikgeyB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZXhdIFwiICsgbXNnKSkgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aWFsIChmbiwgYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuKGFyZylcbiAgfVxufVxuXG4vLyBCYXNlIGRhdGEgc3RydWN0IGZvciBzdG9yZSdzIG1vZHVsZSwgcGFja2FnZSB3aXRoIHNvbWUgYXR0cmlidXRlIGFuZCBtZXRob2RcbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAvLyBTdG9yZSBzb21lIGNoaWxkcmVuIGl0ZW1cbiAgdGhpcy5fY2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSBvYmplY3Qgd2hpY2ggcGFzc2VkIGJ5IHByb2dyYW1tZXJcbiAgdGhpcy5fcmF3TW9kdWxlID0gcmF3TW9kdWxlO1xuICB2YXIgcmF3U3RhdGUgPSByYXdNb2R1bGUuc3RhdGU7XG5cbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUncyBzdGF0ZVxuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBuYW1lc3BhY2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5uYW1lc3BhY2VkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWRcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiBhZGRDaGlsZCAoa2V5LCBtb2R1bGUpIHtcbiAgdGhpcy5fY2hpbGRyZW5ba2V5XSA9IG1vZHVsZTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoa2V5KSB7XG4gIGRlbGV0ZSB0aGlzLl9jaGlsZHJlbltrZXldO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5nZXRDaGlsZCA9IGZ1bmN0aW9uIGdldENoaWxkIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW2tleV1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChyYXdNb2R1bGUpIHtcbiAgdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWQgPSByYXdNb2R1bGUubmFtZXNwYWNlZDtcbiAgaWYgKHJhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMgPSByYXdNb2R1bGUuYWN0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMgPSByYXdNb2R1bGUubXV0YXRpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzID0gcmF3TW9kdWxlLmdldHRlcnM7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gZm9yRWFjaENoaWxkIChmbikge1xuICBmb3JFYWNoVmFsdWUodGhpcy5fY2hpbGRyZW4sIGZuKTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEdldHRlciA9IGZ1bmN0aW9uIGZvckVhY2hHZXR0ZXIgKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hBY3Rpb24gPSBmdW5jdGlvbiBmb3JFYWNoQWN0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoTXV0YXRpb24gPSBmdW5jdGlvbiBmb3JFYWNoTXV0YXRpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1vZHVsZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCByYXdNb2R1bGUpO1xuICB9XG5cbiAgdmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUocmF3TW9kdWxlLCBydW50aW1lKTtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy5yb290ID0gbmV3TW9kdWxlO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgcGFyZW50LmFkZENoaWxkKHBhdGhbcGF0aC5sZW5ndGggLSAxXSwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChyYXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGUubW9kdWxlcywgZnVuY3Rpb24gKHJhd0NoaWxkTW9kdWxlLCBrZXkpIHtcbiAgICAgIHRoaXMkMS5yZWdpc3RlcihwYXRoLmNvbmNhdChrZXkpLCByYXdDaGlsZE1vZHVsZSwgcnVudGltZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIGlmICghcGFyZW50LmdldENoaWxkKGtleSkucnVudGltZSkgeyByZXR1cm4gfVxuXG4gIHBhcmVudC5yZW1vdmVDaGlsZChrZXkpO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlIChwYXRoLCB0YXJnZXRNb2R1bGUsIG5ld01vZHVsZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gdXBkYXRlIHRhcmdldCBtb2R1bGVcbiAgdGFyZ2V0TW9kdWxlLnVwZGF0ZShuZXdNb2R1bGUpO1xuXG4gIC8vIHVwZGF0ZSBuZXN0ZWQgbW9kdWxlc1xuICBpZiAobmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICAgIGlmICghdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gYWRkIGEgbmV3IG1vZHVsZSAnXCIgKyBrZXkgKyBcIicgb24gaG90IHJlbG9hZGluZywgXCIgK1xuICAgICAgICAgICAgJ21hbnVhbCByZWxvYWQgaXMgbmVlZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUoXG4gICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgIHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICBuZXdNb2R1bGUubW9kdWxlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZnVuY3Rpb25Bc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24nXG59O1xuXG52YXIgb2JqZWN0QXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uIG9yIG9iamVjdCB3aXRoIFwiaGFuZGxlclwiIGZ1bmN0aW9uJ1xufTtcblxudmFyIGFzc2VydFR5cGVzID0ge1xuICBnZXR0ZXJzOiBmdW5jdGlvbkFzc2VydCxcbiAgbXV0YXRpb25zOiBmdW5jdGlvbkFzc2VydCxcbiAgYWN0aW9uczogb2JqZWN0QXNzZXJ0XG59O1xuXG5mdW5jdGlvbiBhc3NlcnRSYXdNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSkge1xuICBPYmplY3Qua2V5cyhhc3NlcnRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFyYXdNb2R1bGVba2V5XSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGFzc2VydE9wdGlvbnMgPSBhc3NlcnRUeXBlc1trZXldO1xuXG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZVtrZXldLCBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICAgIGFzc2VydChcbiAgICAgICAgYXNzZXJ0T3B0aW9ucy5hc3NlcnQodmFsdWUpLFxuICAgICAgICBtYWtlQXNzZXJ0aW9uTWVzc2FnZShwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBhc3NlcnRPcHRpb25zLmV4cGVjdGVkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBc3NlcnRpb25NZXNzYWdlIChwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBleHBlY3RlZCkge1xuICB2YXIgYnVmID0ga2V5ICsgXCIgc2hvdWxkIGJlIFwiICsgZXhwZWN0ZWQgKyBcIiBidXQgXFxcIlwiICsga2V5ICsgXCIuXCIgKyB0eXBlICsgXCJcXFwiXCI7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBidWYgKz0gXCIgaW4gbW9kdWxlIFxcXCJcIiArIChwYXRoLmpvaW4oJy4nKSkgKyBcIlxcXCJcIjtcbiAgfVxuICBidWYgKz0gXCIgaXMgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiLlwiO1xuICByZXR1cm4gYnVmXG59XG5cbnZhciBWdWU7IC8vIGJpbmQgb24gaW5zdGFsbFxuXG52YXIgU3RvcmUgPSBmdW5jdGlvbiBTdG9yZSAob3B0aW9ucykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgLy8gQXV0byBpbnN0YWxsIGlmIGl0IGlzIG5vdCBkb25lIHlldCBhbmQgYHdpbmRvd2AgaGFzIGBWdWVgLlxuICAvLyBUbyBhbGxvdyB1c2VycyB0byBhdm9pZCBhdXRvLWluc3RhbGxhdGlvbiBpbiBzb21lIGNhc2VzLFxuICAvLyB0aGlzIGNvZGUgc2hvdWxkIGJlIHBsYWNlZCBoZXJlLiBTZWUgIzczMVxuICBpZiAoIVZ1ZSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlKSB7XG4gICAgaW5zdGFsbCh3aW5kb3cuVnVlKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KFZ1ZSwgXCJtdXN0IGNhbGwgVnVlLnVzZShWdWV4KSBiZWZvcmUgY3JlYXRpbmcgYSBzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwic3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG5cbiAgLy8gc3RvcmUgaW50ZXJuYWwgc3RhdGVcbiAgdGhpcy5fY29tbWl0dGluZyA9IGZhbHNlO1xuICB0aGlzLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9tb2R1bGVzID0gbmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7XG4gIHRoaXMuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl93YXRjaGVyVk0gPSBuZXcgVnVlKCk7XG4gIHRoaXMuX21ha2VMb2NhbEdldHRlcnNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gYmluZCBjb21taXQgYW5kIGRpc3BhdGNoIHRvIHNlbGZcbiAgdmFyIHN0b3JlID0gdGhpcztcbiAgdmFyIHJlZiA9IHRoaXM7XG4gIHZhciBkaXNwYXRjaCA9IHJlZi5kaXNwYXRjaDtcbiAgdmFyIGNvbW1pdCA9IHJlZi5jb21taXQ7XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiBib3VuZERpc3BhdGNoICh0eXBlLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoLmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQpXG4gIH07XG4gIHRoaXMuY29tbWl0ID0gZnVuY3Rpb24gYm91bmRDb21taXQgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tbWl0LmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpXG4gIH07XG5cbiAgLy8gc3RyaWN0IG1vZGVcbiAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fbW9kdWxlcy5yb290LnN0YXRlO1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHZtLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlVk0odGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICB2YXIgdXNlRGV2dG9vbHMgPSBvcHRpb25zLmRldnRvb2xzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRldnRvb2xzIDogVnVlLmNvbmZpZy5kZXZ0b29scztcbiAgaWYgKHVzZURldnRvb2xzKSB7XG4gICAgZGV2dG9vbFBsdWdpbih0aGlzKTtcbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBzdGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChmYWxzZSwgXCJ1c2Ugc3RvcmUucmVwbGFjZVN0YXRlKCkgdG8gZXhwbGljaXQgcmVwbGFjZSBzdG9yZSBzdGF0ZS5cIik7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5jb21taXQgPSBmdW5jdGlvbiBjb21taXQgKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgY29tbWl0XG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcbiAgICB2YXIgb3B0aW9ucyA9IHJlZi5vcHRpb25zO1xuXG4gIHZhciBtdXRhdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9tdXRhdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgZW50cnkuZm9yRWFjaChmdW5jdGlvbiBjb21taXRJdGVyYXRvciAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcihwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGhpcy5fc3Vic2NyaWJlcnNcbiAgICAuc2xpY2UoKSAvLyBzaGFsbG93IGNvcHkgdG8gcHJldmVudCBpdGVyYXRvciBpbnZhbGlkYXRpb24gaWYgc3Vic2NyaWJlciBzeW5jaHJvbm91c2x5IGNhbGxzIHVuc3Vic2NyaWJlXG4gICAgLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViKG11dGF0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcblxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnRcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbdnVleF0gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIuIFNpbGVudCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gXCIgK1xuICAgICAgJ1VzZSB0aGUgZmlsdGVyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHZ1ZS1kZXZ0b29scydcbiAgICApO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCAoX3R5cGUsIF9wYXlsb2FkKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGFjdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAuc2xpY2UoKSAvLyBzaGFsbG93IGNvcHkgdG8gcHJldmVudCBpdGVyYXRvciBpbnZhbGlkYXRpb24gaWYgc3Vic2NyaWJlciBzeW5jaHJvbm91c2x5IGNhbGxzIHVuc3Vic2NyaWJlXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmU7IH0pXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYmVmb3JlKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZXhdIGVycm9yIGluIGJlZm9yZSBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IGVudHJ5Lmxlbmd0aCA+IDFcbiAgICA/IFByb21pc2UuYWxsKGVudHJ5Lm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlcihwYXlsb2FkKTsgfSkpXG4gICAgOiBlbnRyeVswXShwYXlsb2FkKTtcblxuICByZXR1cm4gcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzJDEuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyOyB9KVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXIoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYWZ0ZXIgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfSlcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUgKGZuKSB7XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKGZuLCB0aGlzLl9zdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmVBY3Rpb24gPSBmdW5jdGlvbiBzdWJzY3JpYmVBY3Rpb24gKGZuKSB7XG4gIHZhciBzdWJzID0gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nID8geyBiZWZvcmU6IGZuIH0gOiBmbjtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoc3VicywgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiB3YXRjaCAoZ2V0dGVyLCBjYiwgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBnZXR0ZXIgPT09ICdmdW5jdGlvbicsIFwic3RvcmUud2F0Y2ggb25seSBhY2NlcHRzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIHJldHVybiB0aGlzLl93YXRjaGVyVk0uJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldHRlcih0aGlzJDEuc3RhdGUsIHRoaXMkMS5nZXR0ZXJzKTsgfSwgY2IsIG9wdGlvbnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gcmVwbGFjZVN0YXRlIChzdGF0ZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMkMS5fdm0uX2RhdGEuJCRzdGF0ZSA9IHN0YXRlO1xuICB9KTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyTW9kdWxlIChwYXRoLCByYXdNb2R1bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlVk0odGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy51bnJlZ2lzdGVyKHBhdGgpO1xuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZSh0aGlzJDEuc3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBWdWUuZGVsZXRlKHBhcmVudFN0YXRlLCBwYXRoW3BhdGgubGVuZ3RoIC0gMV0pO1xuICB9KTtcbiAgcmVzZXRTdG9yZSh0aGlzKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG5mdW5jdGlvbiBnZW5lcmljU3Vic2NyaWJlIChmbiwgc3Vicykge1xuICBpZiAoc3Vicy5pbmRleE9mKGZuKSA8IDApIHtcbiAgICBzdWJzLnB1c2goZm4pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBzdWJzLmluZGV4T2YoZm4pO1xuICAgIGlmIChpID4gLTEpIHtcbiAgICAgIHN1YnMuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlIChzdG9yZSwgaG90KSB7XG4gIHN0b3JlLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHN0YXRlID0gc3RvcmUuc3RhdGU7XG4gIC8vIGluaXQgYWxsIG1vZHVsZXNcbiAgaW5zdGFsbE1vZHVsZShzdG9yZSwgc3RhdGUsIFtdLCBzdG9yZS5fbW9kdWxlcy5yb290LCB0cnVlKTtcbiAgLy8gcmVzZXQgdm1cbiAgcmVzZXRTdG9yZVZNKHN0b3JlLCBzdGF0ZSwgaG90KTtcbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZVZNIChzdG9yZSwgc3RhdGUsIGhvdCkge1xuICB2YXIgb2xkVm0gPSBzdG9yZS5fdm07XG5cbiAgLy8gYmluZCBzdG9yZSBwdWJsaWMgZ2V0dGVyc1xuICBzdG9yZS5nZXR0ZXJzID0ge307XG4gIC8vIHJlc2V0IGxvY2FsIGdldHRlcnMgY2FjaGVcbiAgc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciB3cmFwcGVkR2V0dGVycyA9IHN0b3JlLl93cmFwcGVkR2V0dGVycztcbiAgdmFyIGNvbXB1dGVkID0ge307XG4gIGZvckVhY2hWYWx1ZSh3cmFwcGVkR2V0dGVycywgZnVuY3Rpb24gKGZuLCBrZXkpIHtcbiAgICAvLyB1c2UgY29tcHV0ZWQgdG8gbGV2ZXJhZ2UgaXRzIGxhenktY2FjaGluZyBtZWNoYW5pc21cbiAgICAvLyBkaXJlY3QgaW5saW5lIGZ1bmN0aW9uIHVzZSB3aWxsIGxlYWQgdG8gY2xvc3VyZSBwcmVzZXJ2aW5nIG9sZFZtLlxuICAgIC8vIHVzaW5nIHBhcnRpYWwgdG8gcmV0dXJuIGZ1bmN0aW9uIHdpdGggb25seSBhcmd1bWVudHMgcHJlc2VydmVkIGluIGNsb3N1cmUgZW52aXJvbm1lbnQuXG4gICAgY29tcHV0ZWRba2V5XSA9IHBhcnRpYWwoZm4sIHN0b3JlKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RvcmUuZ2V0dGVycywga2V5LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLl92bVtrZXldOyB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSAvLyBmb3IgbG9jYWwgZ2V0dGVyc1xuICAgIH0pO1xuICB9KTtcblxuICAvLyB1c2UgYSBWdWUgaW5zdGFuY2UgdG8gc3RvcmUgdGhlIHN0YXRlIHRyZWVcbiAgLy8gc3VwcHJlc3Mgd2FybmluZ3MganVzdCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBhZGRlZFxuICAvLyBzb21lIGZ1bmt5IGdsb2JhbCBtaXhpbnNcbiAgdmFyIHNpbGVudCA9IFZ1ZS5jb25maWcuc2lsZW50O1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHRydWU7XG4gIHN0b3JlLl92bSA9IG5ldyBWdWUoe1xuICAgIGRhdGE6IHtcbiAgICAgICQkc3RhdGU6IHN0YXRlXG4gICAgfSxcbiAgICBjb21wdXRlZDogY29tcHV0ZWRcbiAgfSk7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gc2lsZW50O1xuXG4gIC8vIGVuYWJsZSBzdHJpY3QgbW9kZSBmb3IgbmV3IHZtXG4gIGlmIChzdG9yZS5zdHJpY3QpIHtcbiAgICBlbmFibGVTdHJpY3RNb2RlKHN0b3JlKTtcbiAgfVxuXG4gIGlmIChvbGRWbSkge1xuICAgIGlmIChob3QpIHtcbiAgICAgIC8vIGRpc3BhdGNoIGNoYW5nZXMgaW4gYWxsIHN1YnNjcmliZWQgd2F0Y2hlcnNcbiAgICAgIC8vIHRvIGZvcmNlIGdldHRlciByZS1ldmFsdWF0aW9uIGZvciBob3QgcmVsb2FkaW5nLlxuICAgICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRWbS5fZGF0YS4kJHN0YXRlID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBWdWUubmV4dFRpY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gb2xkVm0uJGRlc3Ryb3koKTsgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbE1vZHVsZSAoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aCwgbW9kdWxlLCBob3QpIHtcbiAgdmFyIGlzUm9vdCA9ICFwYXRoLmxlbmd0aDtcbiAgdmFyIG5hbWVzcGFjZSA9IHN0b3JlLl9tb2R1bGVzLmdldE5hbWVzcGFjZShwYXRoKTtcblxuICAvLyByZWdpc3RlciBpbiBuYW1lc3BhY2UgbWFwXG4gIGlmIChtb2R1bGUubmFtZXNwYWNlZCkge1xuICAgIGlmIChzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIGR1cGxpY2F0ZSBuYW1lc3BhY2UgXCIgKyBuYW1lc3BhY2UgKyBcIiBmb3IgdGhlIG5hbWVzcGFjZWQgbW9kdWxlIFwiICsgKHBhdGguam9pbignLycpKSkpO1xuICAgIH1cbiAgICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdID0gbW9kdWxlO1xuICB9XG5cbiAgLy8gc2V0IHN0YXRlXG4gIGlmICghaXNSb290ICYmICFob3QpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZShyb290U3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICB2YXIgbW9kdWxlTmFtZSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAobW9kdWxlTmFtZSBpbiBwYXJlbnRTdGF0ZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIChcIlt2dWV4XSBzdGF0ZSBmaWVsZCBcXFwiXCIgKyBtb2R1bGVOYW1lICsgXCJcXFwiIHdhcyBvdmVycmlkZGVuIGJ5IGEgbW9kdWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhdCBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgVnVlLnNldChwYXJlbnRTdGF0ZSwgbW9kdWxlTmFtZSwgbW9kdWxlLnN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsb2NhbCA9IG1vZHVsZS5jb250ZXh0ID0gbWFrZUxvY2FsQ29udGV4dChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKTtcblxuICBtb2R1bGUuZm9yRWFjaE11dGF0aW9uKGZ1bmN0aW9uIChtdXRhdGlvbiwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyTXV0YXRpb24oc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBtdXRhdGlvbiwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBrZXkpIHtcbiAgICB2YXIgdHlwZSA9IGFjdGlvbi5yb290ID8ga2V5IDogbmFtZXNwYWNlICsga2V5O1xuICAgIHZhciBoYW5kbGVyID0gYWN0aW9uLmhhbmRsZXIgfHwgYWN0aW9uO1xuICAgIHJlZ2lzdGVyQWN0aW9uKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoR2V0dGVyKGZ1bmN0aW9uIChnZXR0ZXIsIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3RlckdldHRlcihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIGdldHRlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCwga2V5KSB7XG4gICAgaW5zdGFsbE1vZHVsZShzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLmNvbmNhdChrZXkpLCBjaGlsZCwgaG90KTtcbiAgfSk7XG59XG5cbi8qKlxuICogbWFrZSBsb2NhbGl6ZWQgZGlzcGF0Y2gsIGNvbW1pdCwgZ2V0dGVycyBhbmQgc3RhdGVcbiAqIGlmIHRoZXJlIGlzIG5vIG5hbWVzcGFjZSwganVzdCB1c2Ugcm9vdCBvbmVzXG4gKi9cbmZ1bmN0aW9uIG1ha2VMb2NhbENvbnRleHQgKHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpIHtcbiAgdmFyIG5vTmFtZXNwYWNlID0gbmFtZXNwYWNlID09PSAnJztcblxuICB2YXIgbG9jYWwgPSB7XG4gICAgZGlzcGF0Y2g6IG5vTmFtZXNwYWNlID8gc3RvcmUuZGlzcGF0Y2ggOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9hY3Rpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBhY3Rpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHR5cGUsIHBheWxvYWQpXG4gICAgfSxcblxuICAgIGNvbW1pdDogbm9OYW1lc3BhY2UgPyBzdG9yZS5jb21taXQgOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9tdXRhdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIG11dGF0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmNvbW1pdCh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZ2V0dGVycyBhbmQgc3RhdGUgb2JqZWN0IG11c3QgYmUgZ290dGVuIGxhemlseVxuICAvLyBiZWNhdXNlIHRoZXkgd2lsbCBiZSBjaGFuZ2VkIGJ5IHZtIHVwZGF0ZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2NhbCwge1xuICAgIGdldHRlcnM6IHtcbiAgICAgIGdldDogbm9OYW1lc3BhY2VcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZUxvY2FsR2V0dGVycyhzdG9yZSwgbmFtZXNwYWNlKTsgfVxuICAgIH0sXG4gICAgc3RhdGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0TmVzdGVkU3RhdGUoc3RvcmUuc3RhdGUsIHBhdGgpOyB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbG9jYWxcbn1cblxuZnVuY3Rpb24gbWFrZUxvY2FsR2V0dGVycyAoc3RvcmUsIG5hbWVzcGFjZSkge1xuICBpZiAoIXN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXSkge1xuICAgIHZhciBnZXR0ZXJzUHJveHkgPSB7fTtcbiAgICB2YXIgc3BsaXRQb3MgPSBuYW1lc3BhY2UubGVuZ3RoO1xuICAgIE9iamVjdC5rZXlzKHN0b3JlLmdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIC8vIHNraXAgaWYgdGhlIHRhcmdldCBnZXR0ZXIgaXMgbm90IG1hdGNoIHRoaXMgbmFtZXNwYWNlXG4gICAgICBpZiAodHlwZS5zbGljZSgwLCBzcGxpdFBvcykgIT09IG5hbWVzcGFjZSkgeyByZXR1cm4gfVxuXG4gICAgICAvLyBleHRyYWN0IGxvY2FsIGdldHRlciB0eXBlXG4gICAgICB2YXIgbG9jYWxUeXBlID0gdHlwZS5zbGljZShzcGxpdFBvcyk7XG5cbiAgICAgIC8vIEFkZCBhIHBvcnQgdG8gdGhlIGdldHRlcnMgcHJveHkuXG4gICAgICAvLyBEZWZpbmUgYXMgZ2V0dGVyIHByb3BlcnR5IGJlY2F1c2VcbiAgICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIGV2YWx1YXRlIHRoZSBnZXR0ZXJzIGluIHRoaXMgdGltZS5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzUHJveHksIGxvY2FsVHlwZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnNbdHlwZV07IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXSA9IGdldHRlcnNQcm94eTtcbiAgfVxuXG4gIHJldHVybiBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV1cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJNdXRhdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZE11dGF0aW9uSGFuZGxlciAocGF5bG9hZCkge1xuICAgIGhhbmRsZXIuY2FsbChzdG9yZSwgbG9jYWwuc3RhdGUsIHBheWxvYWQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJBY3Rpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fYWN0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX2FjdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZEFjdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5jYWxsKHN0b3JlLCB7XG4gICAgICBkaXNwYXRjaDogbG9jYWwuZGlzcGF0Y2gsXG4gICAgICBjb21taXQ6IGxvY2FsLmNvbW1pdCxcbiAgICAgIGdldHRlcnM6IGxvY2FsLmdldHRlcnMsXG4gICAgICBzdGF0ZTogbG9jYWwuc3RhdGUsXG4gICAgICByb290R2V0dGVyczogc3RvcmUuZ2V0dGVycyxcbiAgICAgIHJvb3RTdGF0ZTogc3RvcmUuc3RhdGVcbiAgICB9LCBwYXlsb2FkKTtcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9kZXZ0b29sSG9vaykge1xuICAgICAgcmV0dXJuIHJlcy5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHN0b3JlLl9kZXZ0b29sSG9vay5lbWl0KCd2dWV4OmVycm9yJywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHZXR0ZXIgKHN0b3JlLCB0eXBlLCByYXdHZXR0ZXIsIGxvY2FsKSB7XG4gIGlmIChzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIGdldHRlciBrZXk6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0gPSBmdW5jdGlvbiB3cmFwcGVkR2V0dGVyIChzdG9yZSkge1xuICAgIHJldHVybiByYXdHZXR0ZXIoXG4gICAgICBsb2NhbC5zdGF0ZSwgLy8gbG9jYWwgc3RhdGVcbiAgICAgIGxvY2FsLmdldHRlcnMsIC8vIGxvY2FsIGdldHRlcnNcbiAgICAgIHN0b3JlLnN0YXRlLCAvLyByb290IHN0YXRlXG4gICAgICBzdG9yZS5nZXR0ZXJzIC8vIHJvb3QgZ2V0dGVyc1xuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZSAoc3RvcmUpIHtcbiAgc3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhLiQkc3RhdGUgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBhc3NlcnQoc3RvcmUuX2NvbW1pdHRpbmcsIFwiZG8gbm90IG11dGF0ZSB2dWV4IHN0b3JlIHN0YXRlIG91dHNpZGUgbXV0YXRpb24gaGFuZGxlcnMuXCIpO1xuICAgIH1cbiAgfSwgeyBkZWVwOiB0cnVlLCBzeW5jOiB0cnVlIH0pO1xufVxuXG5mdW5jdGlvbiBnZXROZXN0ZWRTdGF0ZSAoc3RhdGUsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChzdGF0ZSwga2V5KSB7IHJldHVybiBzdGF0ZVtrZXldOyB9LCBzdGF0ZSlcbn1cblxuZnVuY3Rpb24gdW5pZnlPYmplY3RTdHlsZSAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICBpZiAoaXNPYmplY3QodHlwZSkgJiYgdHlwZS50eXBlKSB7XG4gICAgb3B0aW9ucyA9IHBheWxvYWQ7XG4gICAgcGF5bG9hZCA9IHR5cGU7XG4gICAgdHlwZSA9IHR5cGUudHlwZTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJywgKFwiZXhwZWN0cyBzdHJpbmcgYXMgdGhlIHR5cGUsIGJ1dCBmb3VuZCBcIiArICh0eXBlb2YgdHlwZSkgKyBcIi5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCwgb3B0aW9uczogb3B0aW9ucyB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGwgKF9WdWUpIHtcbiAgaWYgKFZ1ZSAmJiBfVnVlID09PSBWdWUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1t2dWV4XSBhbHJlYWR5IGluc3RhbGxlZC4gVnVlLnVzZShWdWV4KSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZS4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBWdWUgPSBfVnVlO1xuICBhcHBseU1peGluKFZ1ZSk7XG59XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBzdGF0ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IHN0YXRlcyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IHN0YXRlIGFuZCBnZXR0ZXJzIGZvciBwYXJhbSwgeW91IGNhbiBkbyBzb21ldGhpbmcgZm9yIHN0YXRlIGFuZCBnZXR0ZXJzIGluIGl0LlxuICogQHBhcmFtIHtPYmplY3R9XG4gKi9cbnZhciBtYXBTdGF0ZSA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBzdGF0ZXMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZE1hcChzdGF0ZXMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcFN0YXRlOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChzdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRTdGF0ZSAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLiRzdG9yZS5zdGF0ZTtcbiAgICAgIHZhciBnZXR0ZXJzID0gdGhpcy4kc3RvcmUuZ2V0dGVycztcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwU3RhdGUnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gbW9kdWxlLmNvbnRleHQuc3RhdGU7XG4gICAgICAgIGdldHRlcnMgPSBtb2R1bGUuY29udGV4dC5nZXR0ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuY2FsbCh0aGlzLCBzdGF0ZSwgZ2V0dGVycylcbiAgICAgICAgOiBzdGF0ZVt2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBjb21taXR0aW5nIHRoZSBtdXRhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbXV0YXRpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGNvbW1pdGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gY29tbWl0IG11dGF0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZE1hcChtdXRhdGlvbnMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcE11dGF0aW9uczogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAobXV0YXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkTXV0YXRpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIEdldCB0aGUgY29tbWl0IG1ldGhvZCBmcm9tIHN0b3JlXG4gICAgICB2YXIgY29tbWl0ID0gdGhpcy4kc3RvcmUuY29tbWl0O1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBNdXRhdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbW1pdCA9IG1vZHVsZS5jb250ZXh0LmNvbW1pdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtjb21taXRdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBjb21taXQuYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBnZXR0ZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBnZXR0ZXJzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBHZXR0ZXJzID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGdldHRlcnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZE1hcChnZXR0ZXJzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWV4XSBtYXBHZXR0ZXJzOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChnZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIC8vIFRoZSBuYW1lc3BhY2UgaGFzIGJlZW4gbXV0YXRlZCBieSBub3JtYWxpemVOYW1lc3BhY2VcbiAgICB2YWwgPSBuYW1lc3BhY2UgKyB2YWw7XG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRHZXR0ZXIgKCkge1xuICAgICAgaWYgKG5hbWVzcGFjZSAmJiAhZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBHZXR0ZXJzJywgbmFtZXNwYWNlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEodmFsIGluIHRoaXMuJHN0b3JlLmdldHRlcnMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gZ2V0dGVyOiBcIiArIHZhbCkpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGRpc3BhdGNoIHRoZSBhY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGFjdGlvbnMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbnRob3IgcGFyYW1zLiBZb3UgY2FuIGRpc3BhdGNoIGFjdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBBY3Rpb25zID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGFjdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZE1hcChhY3Rpb25zKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWV4XSBtYXBBY3Rpb25zOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkQWN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAvLyBnZXQgZGlzcGF0Y2ggZnVuY3Rpb24gZnJvbSBzdG9yZVxuICAgICAgdmFyIGRpc3BhdGNoID0gdGhpcy4kc3RvcmUuZGlzcGF0Y2g7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEFjdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoID0gbW9kdWxlLmNvbnRleHQuZGlzcGF0Y2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbZGlzcGF0Y2hdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBkaXNwYXRjaC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWJpbmRpbmcgbmFtZXNwYWNlIHBhcmFtIGZvciBtYXBYWFggZnVuY3Rpb24gaW4gc3BlY2lhbCBzY29wZWQsIGFuZCByZXR1cm4gdGhlbSBieSBzaW1wbGUgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsgcmV0dXJuICh7XG4gIG1hcFN0YXRlOiBtYXBTdGF0ZS5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpXG59KTsgfTtcblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIG1hcFxuICogbm9ybWFsaXplTWFwKFsxLCAyLCAzXSkgPT4gWyB7IGtleTogMSwgdmFsOiAxIH0sIHsga2V5OiAyLCB2YWw6IDIgfSwgeyBrZXk6IDMsIHZhbDogMyB9IF1cbiAqIG5vcm1hbGl6ZU1hcCh7YTogMSwgYjogMiwgYzogM30pID0+IFsgeyBrZXk6ICdhJywgdmFsOiAxIH0sIHsga2V5OiAnYicsIHZhbDogMiB9LCB7IGtleTogJ2MnLCB2YWw6IDMgfSBdXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gbWFwXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1hcCAobWFwKSB7XG4gIGlmICghaXNWYWxpZE1hcChtYXApKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKVxuICAgID8gbWFwLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBrZXkgfSk7IH0pXG4gICAgOiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBtYXBba2V5XSB9KTsgfSlcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSB3aGV0aGVyIGdpdmVuIG1hcCBpcyB2YWxpZCBvciBub3RcbiAqIEBwYXJhbSB7Kn0gbWFwXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkTWFwIChtYXApIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKSB8fCBpc09iamVjdChtYXApXG59XG5cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gZXhwZWN0IHR3byBwYXJhbSBjb250YWlucyBuYW1lc3BhY2UgYW5kIG1hcC4gaXQgd2lsbCBub3JtYWxpemUgdGhlIG5hbWVzcGFjZSBhbmQgdGhlbiB0aGUgcGFyYW0ncyBmdW5jdGlvbiB3aWxsIGhhbmRsZSB0aGUgbmV3IG5hbWVzcGFjZSBhbmQgdGhlIG1hcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTmFtZXNwYWNlIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWFwKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICBtYXAgPSBuYW1lc3BhY2U7XG4gICAgICBuYW1lc3BhY2UgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZS5jaGFyQXQobmFtZXNwYWNlLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcbiAgICAgIG5hbWVzcGFjZSArPSAnLyc7XG4gICAgfVxuICAgIHJldHVybiBmbihuYW1lc3BhY2UsIG1hcClcbiAgfVxufVxuXG4vKipcbiAqIFNlYXJjaCBhIHNwZWNpYWwgbW9kdWxlIGZyb20gc3RvcmUgYnkgbmFtZXNwYWNlLiBpZiBtb2R1bGUgbm90IGV4aXN0LCBwcmludCBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IHN0b3JlXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVscGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZHVsZUJ5TmFtZXNwYWNlIChzdG9yZSwgaGVscGVyLCBuYW1lc3BhY2UpIHtcbiAgdmFyIG1vZHVsZSA9IHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFtb2R1bGUpIHtcbiAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBtb2R1bGUgbmFtZXNwYWNlIG5vdCBmb3VuZCBpbiBcIiArIGhlbHBlciArIFwiKCk6IFwiICsgbmFtZXNwYWNlKSk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZVxufVxuXG52YXIgaW5kZXhfZXNtID0ge1xuICBTdG9yZTogU3RvcmUsXG4gIGluc3RhbGw6IGluc3RhbGwsXG4gIHZlcnNpb246ICczLjEuMycsXG4gIG1hcFN0YXRlOiBtYXBTdGF0ZSxcbiAgbWFwTXV0YXRpb25zOiBtYXBNdXRhdGlvbnMsXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMsXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMsXG4gIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzOiBjcmVhdGVOYW1lc3BhY2VkSGVscGVyc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXhfZXNtO1xuZXhwb3J0IHsgU3RvcmUsIGluc3RhbGwsIG1hcFN0YXRlLCBtYXBNdXRhdGlvbnMsIG1hcEdldHRlcnMsIG1hcEFjdGlvbnMsIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzIH07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi8uLi92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vLi4vc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vLi4vY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi8uLi92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW50ZWdlclBsdXNtaW51cy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1jZmYxYjdhNCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi8uLi92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vLi4vc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vLi4vY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi8uLi92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW50ZWdlclBsdXNtaW51cy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1jZmYxYjdhNCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIiLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gIVN0cmluZyhTeW1ib2woKSk7XG59KTtcbiIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuVnVlU2VsZWN0PWUoKTp0LlZ1ZVNlbGVjdD1lKCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihvKXtpZihlW29dKXJldHVybiBlW29dLmV4cG9ydHM7dmFyIGk9ZVtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbb10uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPXQsbi5jPWUsbi5kPWZ1bmN0aW9uKHQsZSxvKXtuLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6b30pfSxuLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1uKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBvPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKG8pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgaSBpbiB0KW4uZChvLGksZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxpKSk7cmV0dXJuIG99LG4ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gbi5kKGUsXCJhXCIsZSksZX0sbi5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxuLnA9XCIvXCIsbihuLnM9OCl9KFtmdW5jdGlvbih0LGUsbil7dmFyIG89big0KSxpPW4oNSkscz1uKDYpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gbyh0KXx8aSh0KXx8cygpfX0sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj90LmV4cG9ydHM9bj1mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OnQuZXhwb3J0cz1uPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LG4oZSl9dC5leHBvcnRzPW59LGZ1bmN0aW9uKHQsZSxuKXt9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZSBpbiB0P09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse3ZhbHVlOm4sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTp0W2VdPW4sdH19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKEFycmF5LmlzQXJyYXkodCkpe2Zvcih2YXIgZT0wLG49bmV3IEFycmF5KHQubGVuZ3RoKTtlPHQubGVuZ3RoO2UrKyluW2VdPXRbZV07cmV0dXJuIG59fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdCh0KXx8XCJbb2JqZWN0IEFyZ3VtZW50c11cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSlyZXR1cm4gQXJyYXkuZnJvbSh0KX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMik7bi5uKG8pLmF9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuLnIoZSk7dmFyIG89bigwKSxpPW4ubihvKSxzPW4oMSkscj1uLm4ocyksYT1uKDMpLGw9bi5uKGEpLGM9e3dhdGNoOnt0eXBlQWhlYWRQb2ludGVyOmZ1bmN0aW9uKCl7dGhpcy5tYXliZUFkanVzdFNjcm9sbCgpfX0sbWV0aG9kczp7bWF5YmVBZGp1c3RTY3JvbGw6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnBpeGVsc1RvUG9pbnRlclRvcCgpLGU9dGhpcy5waXhlbHNUb1BvaW50ZXJCb3R0b20oKTtyZXR1cm4gdDw9dGhpcy52aWV3cG9ydCgpLnRvcD90aGlzLnNjcm9sbFRvKHQpOmU+PXRoaXMudmlld3BvcnQoKS5ib3R0b20/dGhpcy5zY3JvbGxUbyh0aGlzLnZpZXdwb3J0KCkudG9wK3RoaXMucG9pbnRlckhlaWdodCgpKTp2b2lkIDB9LHBpeGVsc1RvUG9pbnRlclRvcDpmdW5jdGlvbigpe3ZhciB0PTA7aWYodGhpcy4kcmVmcy5kcm9wZG93bk1lbnUmJnRoaXMuZHJvcGRvd25PcGVuKWZvcih2YXIgZT0wO2U8dGhpcy50eXBlQWhlYWRQb2ludGVyO2UrKyl0Kz10aGlzLiRyZWZzLmRyb3Bkb3duTWVudS5jaGlsZHJlbltlXS5vZmZzZXRIZWlnaHQ7cmV0dXJuIHR9LHBpeGVsc1RvUG9pbnRlckJvdHRvbTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBpeGVsc1RvUG9pbnRlclRvcCgpK3RoaXMucG9pbnRlckhlaWdodCgpfSxwb2ludGVySGVpZ2h0OmZ1bmN0aW9uKCl7dmFyIHQ9ISF0aGlzLiRyZWZzLmRyb3Bkb3duTWVudSYmdGhpcy4kcmVmcy5kcm9wZG93bk1lbnUuY2hpbGRyZW5bdGhpcy50eXBlQWhlYWRQb2ludGVyXTtyZXR1cm4gdD90Lm9mZnNldEhlaWdodDowfSx2aWV3cG9ydDpmdW5jdGlvbigpe3JldHVybnt0b3A6dGhpcy4kcmVmcy5kcm9wZG93bk1lbnU/dGhpcy4kcmVmcy5kcm9wZG93bk1lbnUuc2Nyb2xsVG9wOjAsYm90dG9tOnRoaXMuJHJlZnMuZHJvcGRvd25NZW51P3RoaXMuJHJlZnMuZHJvcGRvd25NZW51Lm9mZnNldEhlaWdodCt0aGlzLiRyZWZzLmRyb3Bkb3duTWVudS5zY3JvbGxUb3A6MH19LHNjcm9sbFRvOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLiRyZWZzLmRyb3Bkb3duTWVudT90aGlzLiRyZWZzLmRyb3Bkb3duTWVudS5zY3JvbGxUb3A9dDpudWxsfX19LHU9e2RhdGE6ZnVuY3Rpb24oKXtyZXR1cm57dHlwZUFoZWFkUG9pbnRlcjotMX19LHdhdGNoOntmaWx0ZXJlZE9wdGlvbnM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MDt0PHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aDt0KyspaWYodGhpcy5zZWxlY3RhYmxlKHRoaXMuZmlsdGVyZWRPcHRpb25zW3RdKSl7dGhpcy50eXBlQWhlYWRQb2ludGVyPXQ7YnJlYWt9fX0sbWV0aG9kczp7dHlwZUFoZWFkVXA6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy50eXBlQWhlYWRQb2ludGVyLTE7dD49MDt0LS0paWYodGhpcy5zZWxlY3RhYmxlKHRoaXMuZmlsdGVyZWRPcHRpb25zW3RdKSl7dGhpcy50eXBlQWhlYWRQb2ludGVyPXQsdGhpcy5tYXliZUFkanVzdFNjcm9sbCYmdGhpcy5tYXliZUFkanVzdFNjcm9sbCgpO2JyZWFrfX0sdHlwZUFoZWFkRG93bjpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLnR5cGVBaGVhZFBvaW50ZXIrMTt0PHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aDt0KyspaWYodGhpcy5zZWxlY3RhYmxlKHRoaXMuZmlsdGVyZWRPcHRpb25zW3RdKSl7dGhpcy50eXBlQWhlYWRQb2ludGVyPXQsdGhpcy5tYXliZUFkanVzdFNjcm9sbCYmdGhpcy5tYXliZUFkanVzdFNjcm9sbCgpO2JyZWFrfX0sdHlwZUFoZWFkU2VsZWN0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy50eXBlQWhlYWRQb2ludGVyXTt0P3RoaXMuc2VsZWN0KHQpOnRoaXMudGFnZ2FibGUmJnRoaXMuc2VhcmNoLmxlbmd0aCYmdGhpcy5zZWxlY3QodGhpcy5jcmVhdGVPcHRpb24odGhpcy5zZWFyY2gpKSx0aGlzLmNsZWFyU2VhcmNoT25TZWxlY3QmJih0aGlzLnNlYXJjaD1cIlwiKX19fSxwPXtwcm9wczp7bG9hZGluZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue211dGFibGVMb2FkaW5nOiExfX0sd2F0Y2g6e3NlYXJjaDpmdW5jdGlvbigpe3RoaXMuJGVtaXQoXCJzZWFyY2hcIix0aGlzLnNlYXJjaCx0aGlzLnRvZ2dsZUxvYWRpbmcpfSxsb2FkaW5nOmZ1bmN0aW9uKHQpe3RoaXMubXV0YWJsZUxvYWRpbmc9dH19LG1ldGhvZHM6e3RvZ2dsZUxvYWRpbmc6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06bnVsbDtyZXR1cm4gdGhpcy5tdXRhYmxlTG9hZGluZz1udWxsPT10PyF0aGlzLm11dGFibGVMb2FkaW5nOnR9fX07ZnVuY3Rpb24gaCh0LGUsbixvLGkscyxyLGEpe3ZhciBsLGM9XCJmdW5jdGlvblwiPT10eXBlb2YgdD90Lm9wdGlvbnM6dDtpZihlJiYoYy5yZW5kZXI9ZSxjLnN0YXRpY1JlbmRlckZucz1uLGMuX2NvbXBpbGVkPSEwKSxvJiYoYy5mdW5jdGlvbmFsPSEwKSxzJiYoYy5fc2NvcGVJZD1cImRhdGEtdi1cIitzKSxyPyhsPWZ1bmN0aW9uKHQpeyh0PXR8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwodD1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxpJiZpLmNhbGwodGhpcyx0KSx0JiZ0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cyYmdC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKHIpfSxjLl9zc3JSZWdpc3Rlcj1sKTppJiYobD1hP2Z1bmN0aW9uKCl7aS5jYWxsKHRoaXMsdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KX06aSksbClpZihjLmZ1bmN0aW9uYWwpe2MuX2luamVjdFN0eWxlcz1sO3ZhciB1PWMucmVuZGVyO2MucmVuZGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGwuY2FsbChlKSx1KHQsZSl9fWVsc2V7dmFyIHA9Yy5iZWZvcmVDcmVhdGU7Yy5iZWZvcmVDcmVhdGU9cD9bXS5jb25jYXQocCxsKTpbbF19cmV0dXJue2V4cG9ydHM6dCxvcHRpb25zOmN9fXZhciBkPXtEZXNlbGVjdDpoKHt9LChmdW5jdGlvbigpe3ZhciB0PXRoaXMuJGNyZWF0ZUVsZW1lbnQsZT10aGlzLl9zZWxmLl9jfHx0O3JldHVybiBlKFwic3ZnXCIse2F0dHJzOnt4bWxuczpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsd2lkdGg6XCIxMFwiLGhlaWdodDpcIjEwXCJ9fSxbZShcInBhdGhcIix7YXR0cnM6e2Q6XCJNNi44OTU0NTUgNWwyLjg0Mjg5Ny0yLjg0Mjg5OGMuMzQ4ODY0LS4zNDg4NjMuMzQ4ODY0LS45MTQ0ODggMC0xLjI2MzYzNkw5LjEwNjUzNC4yNjE2NDhjLS4zNDg4NjQtLjM0ODg2NC0uOTE0NDg5LS4zNDg4NjQtMS4yNjM2MzYgMEw1IDMuMTA0NTQ1IDIuMTU3MTAyLjI2MTY0OGMtLjM0ODg2My0uMzQ4ODY0LS45MTQ0ODgtLjM0ODg2NC0xLjI2MzYzNiAwTC4yNjE2NDguODkzNDY2Yy0uMzQ4ODY0LjM0ODg2NC0uMzQ4ODY0LjkxNDQ4OSAwIDEuMjYzNjM2TDMuMTA0NTQ1IDUgLjI2MTY0OCA3Ljg0Mjg5OGMtLjM0ODg2NC4zNDg4NjMtLjM0ODg2NC45MTQ0ODggMCAxLjI2MzYzNmwuNjMxODE4LjYzMTgxOGMuMzQ4ODY0LjM0ODg2NC45MTQ3NzMuMzQ4ODY0IDEuMjYzNjM2IDBMNSA2Ljg5NTQ1NWwyLjg0Mjg5OCAyLjg0Mjg5N2MuMzQ4ODYzLjM0ODg2NC45MTQ3NzIuMzQ4ODY0IDEuMjYzNjM2IDBsLjYzMTgxOC0uNjMxODE4Yy4zNDg4NjQtLjM0ODg2NC4zNDg4NjQtLjkxNDQ4OSAwLTEuMjYzNjM2TDYuODk1NDU1IDV6XCJ9fSldKX0pLFtdLCExLG51bGwsbnVsbCxudWxsKS5leHBvcnRzLE9wZW5JbmRpY2F0b3I6aCh7fSwoZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRjcmVhdGVFbGVtZW50LGU9dGhpcy5fc2VsZi5fY3x8dDtyZXR1cm4gZShcInN2Z1wiLHthdHRyczp7eG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLHdpZHRoOlwiMTRcIixoZWlnaHQ6XCIxMFwifX0sW2UoXCJwYXRoXCIse2F0dHJzOntkOlwiTTkuMjExMzY0IDcuNTk5MzFsNC40ODMzOC00Ljg2NzIyOWMuNDA3MDA4LS40NDE4NTQuNDA3MDA4LTEuMTU4MjQ3IDAtMS42MDA0NmwtLjczNzEyLS44MDAyM2MtLjQwNzAwOC0uNDQxODU0LTEuMDY2OTA0LS40NDE4NTQtMS40NzQyNDMgMEw3IDUuMTk4NjE3IDIuNTE2NjIuMzMxMzljLS40MDcwMDgtLjQ0MTg1My0xLjA2NjkwNC0uNDQxODUzLTEuNDc0MjQzIDBsLS43MzcxMjEuODAwMjNjLS40MDcwMDguNDQxODU0LS40MDcwMDggMS4xNTgyNDggMCAxLjYwMDQ2MWw0LjQ4MzM4IDQuODY3MjI4TDcgMTBsMi4yMTEzNjQtMi40MDA2OXpcIn19KV0pfSksW10sITEsbnVsbCxudWxsLG51bGwpLmV4cG9ydHN9LGY9e2luc2VydGVkOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uLmNvbnRleHQ7aWYoby5hcHBlbmRUb0JvZHkpe3ZhciBpPW8uJHJlZnMudG9nZ2xlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHM9aS5oZWlnaHQscj1pLnRvcCxhPWkubGVmdCxsPWkud2lkdGg7dC51bmJpbmRQb3NpdGlvbj1vLmNhbGN1bGF0ZVBvc2l0aW9uKHQsbyx7d2lkdGg6bCtcInB4XCIsdG9wOndpbmRvdy5zY3JvbGxZK3IrcytcInB4XCIsbGVmdDp3aW5kb3cuc2Nyb2xsWCthK1wicHhcIn0pLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodCl9fSx1bmJpbmQ6ZnVuY3Rpb24odCxlLG4pe24uY29udGV4dC5hcHBlbmRUb0JvZHkmJih0LnVuYmluZFBvc2l0aW9uJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnVuYmluZFBvc2l0aW9uJiZ0LnVuYmluZFBvc2l0aW9uKCksdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCkpfX07dmFyIHk9ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIE9iamVjdC5rZXlzKHQpLnNvcnQoKS5mb3JFYWNoKChmdW5jdGlvbihuKXtlW25dPXRbbl19KSksSlNPTi5zdHJpbmdpZnkoZSl9LGI9MDt2YXIgZz1mdW5jdGlvbigpe3JldHVybisrYn07ZnVuY3Rpb24gdih0LGUpe3ZhciBuPU9iamVjdC5rZXlzKHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk7ZSYmKG89by5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSkuZW51bWVyYWJsZX0pKSksbi5wdXNoLmFwcGx5KG4sbyl9cmV0dXJuIG59ZnVuY3Rpb24gbSh0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgbj1udWxsIT1hcmd1bWVudHNbZV0/YXJndW1lbnRzW2VdOnt9O2UlMj92KE9iamVjdChuKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7bCgpKHQsZSxuW2VdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG4pKTp2KE9iamVjdChuKSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sZSkpfSkpfXJldHVybiB0fXZhciBfPXtjb21wb25lbnRzOm0oe30sZCksbWl4aW5zOltjLHUscF0sZGlyZWN0aXZlczp7YXBwZW5kVG9Cb2R5OmZ9LHByb3BzOnt2YWx1ZTp7fSxjb21wb25lbnRzOnt0eXBlOk9iamVjdCxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJue319fSxvcHRpb25zOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm5bXX19LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sY2xlYXJhYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc2VhcmNoYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG11bHRpcGxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scGxhY2Vob2xkZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdHJhbnNpdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInZzX19mYWRlXCJ9LGNsZWFyU2VhcmNoT25TZWxlY3Q6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbG9zZU9uU2VsZWN0Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbGFiZWw6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJsYWJlbFwifSxhdXRvY29tcGxldGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJvZmZcIn0scmVkdWNlOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6ZnVuY3Rpb24odCl7cmV0dXJuIHR9fSxzZWxlY3RhYmxlOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6ZnVuY3Rpb24odCl7cmV0dXJuITB9fSxnZXRPcHRpb25MYWJlbDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmZ1bmN0aW9uKHQpe3JldHVyblwib2JqZWN0XCI9PT1yKCkodCk/dC5oYXNPd25Qcm9wZXJ0eSh0aGlzLmxhYmVsKT90W3RoaXMubGFiZWxdOmNvbnNvbGUud2FybignW3Z1ZS1zZWxlY3Qgd2Fybl06IExhYmVsIGtleSBcIm9wdGlvbi4nLmNvbmNhdCh0aGlzLmxhYmVsLCdcIiBkb2VzIG5vdCcpK1wiIGV4aXN0IGluIG9wdGlvbnMgb2JqZWN0IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeSh0KSxcIi5cXG5cIikrXCJodHRwczovL3Z1ZS1zZWxlY3Qub3JnL2FwaS9wcm9wcy5odG1sI2dldG9wdGlvbmxhYmVsXCIpOnR9fSxnZXRPcHRpb25LZXk6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpmdW5jdGlvbih0KXtpZihcIm9iamVjdFwiIT09cigpKHQpKXJldHVybiB0O3RyeXtyZXR1cm4gdC5oYXNPd25Qcm9wZXJ0eShcImlkXCIpP3QuaWQ6eSh0KX1jYXRjaChlKXtyZXR1cm4gY29uc29sZS53YXJuKFwiW3Z1ZS1zZWxlY3Qgd2Fybl06IENvdWxkIG5vdCBzdHJpbmdpZnkgdGhpcyBvcHRpb24gdG8gZ2VuZXJhdGUgdW5pcXVlIGtleS4gUGxlYXNlIHByb3ZpZGUnZ2V0T3B0aW9uS2V5JyBwcm9wIHRvIHJldHVybiBhIHVuaXF1ZSBrZXkgZm9yIGVhY2ggb3B0aW9uLlxcbmh0dHBzOi8vdnVlLXNlbGVjdC5vcmcvYXBpL3Byb3BzLmh0bWwjZ2V0b3B0aW9ua2V5XCIsdCxlKX19fSxvblRhYjp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3RPblRhYiYmIXRoaXMuaXNDb21wb3NpbmcmJnRoaXMudHlwZUFoZWFkU2VsZWN0KCl9fSx0YWdnYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHRhYmluZGV4Ont0eXBlOk51bWJlcixkZWZhdWx0Om51bGx9LHB1c2hUYWdzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZmlsdGVyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGZpbHRlckJ5Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6ZnVuY3Rpb24odCxlLG4pe3JldHVybihlfHxcIlwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yobi50b0xvd2VyQ2FzZSgpKT4tMX19LGZpbHRlcjp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztyZXR1cm4gdC5maWx0ZXIoKGZ1bmN0aW9uKHQpe3ZhciBvPW4uZ2V0T3B0aW9uTGFiZWwodCk7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIG8mJihvPW8udG9TdHJpbmcoKSksbi5maWx0ZXJCeSh0LG8sZSl9KSl9fSxjcmVhdGVPcHRpb246e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpmdW5jdGlvbih0KXtyZXR1cm5cIm9iamVjdFwiPT09cigpKHRoaXMub3B0aW9uTGlzdFswXSk/bCgpKHt9LHRoaXMubGFiZWwsdCk6dH19LHJlc2V0T25PcHRpb25zQ2hhbmdlOntkZWZhdWx0OiExLHZhbGlkYXRvcjpmdW5jdGlvbih0KXtyZXR1cm5bXCJmdW5jdGlvblwiLFwiYm9vbGVhblwiXS5pbmNsdWRlcyhyKCkodCkpfX0sY2xlYXJTZWFyY2hPbkJsdXI6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpmdW5jdGlvbih0KXt2YXIgZT10LmNsZWFyU2VhcmNoT25TZWxlY3Qsbj10Lm11bHRpcGxlO3JldHVybiBlJiYhbn19LG5vRHJvcDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGlucHV0SWQ6e3R5cGU6U3RyaW5nfSxkaXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJhdXRvXCJ9LHNlbGVjdE9uVGFiOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sc2VsZWN0T25LZXlDb2Rlczp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuWzEzXX19LHNlYXJjaElucHV0UXVlcnlTZWxlY3Rvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlt0eXBlPXNlYXJjaF1cIn0sbWFwS2V5ZG93bjp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHR9fSxhcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxjYWxjdWxhdGVQb3NpdGlvbjp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uLndpZHRoLGk9bi50b3Ascz1uLmxlZnQ7dC5zdHlsZS50b3A9aSx0LnN0eWxlLmxlZnQ9cyx0LnN0eWxlLndpZHRoPW99fX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt1aWQ6ZygpLHNlYXJjaDpcIlwiLG9wZW46ITEsaXNDb21wb3Npbmc6ITEscHVzaGVkVGFnczpbXSxfdmFsdWU6W119fSx3YXRjaDp7b3B0aW9uczpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7IXRoaXMudGFnZ2FibGUmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnJlc2V0T25PcHRpb25zQ2hhbmdlP24ucmVzZXRPbk9wdGlvbnNDaGFuZ2UodCxlLG4uc2VsZWN0ZWRWYWx1ZSk6bi5yZXNldE9uT3B0aW9uc0NoYW5nZSkmJnRoaXMuY2xlYXJTZWxlY3Rpb24oKSx0aGlzLnZhbHVlJiZ0aGlzLmlzVHJhY2tpbmdWYWx1ZXMmJnRoaXMuc2V0SW50ZXJuYWxWYWx1ZUZyb21PcHRpb25zKHRoaXMudmFsdWUpfSx2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmlzVHJhY2tpbmdWYWx1ZXMmJnRoaXMuc2V0SW50ZXJuYWxWYWx1ZUZyb21PcHRpb25zKHQpfSxtdWx0aXBsZTpmdW5jdGlvbigpe3RoaXMuY2xlYXJTZWxlY3Rpb24oKX0sb3BlbjpmdW5jdGlvbih0KXt0aGlzLiRlbWl0KHQ/XCJvcGVuXCI6XCJjbG9zZVwiKX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLm11dGFibGVMb2FkaW5nPXRoaXMubG9hZGluZyx2b2lkIDAhPT10aGlzLnZhbHVlJiZ0aGlzLmlzVHJhY2tpbmdWYWx1ZXMmJnRoaXMuc2V0SW50ZXJuYWxWYWx1ZUZyb21PcHRpb25zKHRoaXMudmFsdWUpLHRoaXMuJG9uKFwib3B0aW9uOmNyZWF0ZWRcIix0aGlzLnB1c2hUYWcpfSxtZXRob2RzOntzZXRJbnRlcm5hbFZhbHVlRnJvbU9wdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztBcnJheS5pc0FycmF5KHQpP3RoaXMuJGRhdGEuX3ZhbHVlPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZS5maW5kT3B0aW9uRnJvbVJlZHVjZWRWYWx1ZSh0KX0pKTp0aGlzLiRkYXRhLl92YWx1ZT10aGlzLmZpbmRPcHRpb25Gcm9tUmVkdWNlZFZhbHVlKHQpfSxzZWxlY3Q6ZnVuY3Rpb24odCl7dGhpcy5pc09wdGlvblNlbGVjdGVkKHQpfHwodGhpcy50YWdnYWJsZSYmIXRoaXMub3B0aW9uRXhpc3RzKHQpJiZ0aGlzLiRlbWl0KFwib3B0aW9uOmNyZWF0ZWRcIix0KSx0aGlzLm11bHRpcGxlJiYodD10aGlzLnNlbGVjdGVkVmFsdWUuY29uY2F0KHQpKSx0aGlzLnVwZGF0ZVZhbHVlKHQpKSx0aGlzLm9uQWZ0ZXJTZWxlY3QodCl9LGRlc2VsZWN0OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy51cGRhdGVWYWx1ZSh0aGlzLnNlbGVjdGVkVmFsdWUuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4hZS5vcHRpb25Db21wYXJhdG9yKG4sdCl9KSkpfSxjbGVhclNlbGVjdGlvbjpmdW5jdGlvbigpe3RoaXMudXBkYXRlVmFsdWUodGhpcy5tdWx0aXBsZT9bXTpudWxsKX0sb25BZnRlclNlbGVjdDpmdW5jdGlvbih0KXt0aGlzLmNsb3NlT25TZWxlY3QmJih0aGlzLm9wZW49IXRoaXMub3Blbix0aGlzLnNlYXJjaEVsLmJsdXIoKSksdGhpcy5jbGVhclNlYXJjaE9uU2VsZWN0JiYodGhpcy5zZWFyY2g9XCJcIil9LHVwZGF0ZVZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5pc1RyYWNraW5nVmFsdWVzJiYodGhpcy4kZGF0YS5fdmFsdWU9dCksbnVsbCE9PXQmJih0PUFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBlLnJlZHVjZSh0KX0pKTp0aGlzLnJlZHVjZSh0KSksdGhpcy4kZW1pdChcImlucHV0XCIsdCl9LHRvZ2dsZURyb3Bkb3duOmZ1bmN0aW9uKHQpe3ZhciBlPXQudGFyZ2V0O1tdLmNvbmNhdChpKCkodGhpcy4kcmVmcy5kZXNlbGVjdEJ1dHRvbnN8fFtdKSxpKCkoW3RoaXMuJHJlZnMuY2xlYXJCdXR0b25dfHwhMSkpLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnRhaW5zKGUpfHx0PT09ZX0pKXx8KHRoaXMub3Blbj90aGlzLnNlYXJjaEVsLmJsdXIoKTp0aGlzLmRpc2FibGVkfHwodGhpcy5vcGVuPSEwLHRoaXMuc2VhcmNoRWwuZm9jdXMoKSkpfSxpc09wdGlvblNlbGVjdGVkOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuc2VsZWN0ZWRWYWx1ZS5zb21lKChmdW5jdGlvbihuKXtyZXR1cm4gZS5vcHRpb25Db21wYXJhdG9yKG4sdCl9KSl9LG9wdGlvbkNvbXBhcmF0b3I6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5nZXRPcHRpb25LZXkodCk9PT10aGlzLmdldE9wdGlvbktleShlKX0sZmluZE9wdGlvbkZyb21SZWR1Y2VkVmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPVtdLmNvbmNhdChpKCkodGhpcy5vcHRpb25zKSxpKCkodGhpcy5wdXNoZWRUYWdzKSkuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZS5yZWR1Y2UobikpPT09SlNPTi5zdHJpbmdpZnkodCl9KSk7cmV0dXJuIDE9PT1uLmxlbmd0aD9uWzBdOm4uZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIGUub3B0aW9uQ29tcGFyYXRvcih0LGUuJGRhdGEuX3ZhbHVlKX0pKXx8dH0sY2xvc2VTZWFyY2hPcHRpb25zOmZ1bmN0aW9uKCl7dGhpcy5vcGVuPSExLHRoaXMuJGVtaXQoXCJzZWFyY2g6Ymx1clwiKX0sbWF5YmVEZWxldGVWYWx1ZTpmdW5jdGlvbigpe2lmKCF0aGlzLnNlYXJjaEVsLnZhbHVlLmxlbmd0aCYmdGhpcy5zZWxlY3RlZFZhbHVlJiZ0aGlzLnNlbGVjdGVkVmFsdWUubGVuZ3RoJiZ0aGlzLmNsZWFyYWJsZSl7dmFyIHQ9bnVsbDt0aGlzLm11bHRpcGxlJiYodD1pKCkodGhpcy5zZWxlY3RlZFZhbHVlLnNsaWNlKDAsdGhpcy5zZWxlY3RlZFZhbHVlLmxlbmd0aC0xKSkpLHRoaXMudXBkYXRlVmFsdWUodCl9fSxvcHRpb25FeGlzdHM6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztyZXR1cm4gdGhpcy5vcHRpb25MaXN0LnNvbWUoKGZ1bmN0aW9uKG4pe3JldHVybiBlLm9wdGlvbkNvbXBhcmF0b3Iobix0KX0pKX0sbm9ybWFsaXplT3B0aW9uRm9yU2xvdDpmdW5jdGlvbih0KXtyZXR1cm5cIm9iamVjdFwiPT09cigpKHQpP3Q6bCgpKHt9LHRoaXMubGFiZWwsdCl9LHB1c2hUYWc6ZnVuY3Rpb24odCl7dGhpcy5wdXNoZWRUYWdzLnB1c2godCl9LG9uRXNjYXBlOmZ1bmN0aW9uKCl7dGhpcy5zZWFyY2gubGVuZ3RoP3RoaXMuc2VhcmNoPVwiXCI6dGhpcy5zZWFyY2hFbC5ibHVyKCl9LG9uU2VhcmNoQmx1cjpmdW5jdGlvbigpe2lmKCF0aGlzLm1vdXNlZG93bnx8dGhpcy5zZWFyY2hpbmcpe3ZhciB0PXRoaXMuY2xlYXJTZWFyY2hPblNlbGVjdCxlPXRoaXMubXVsdGlwbGU7cmV0dXJuIHRoaXMuY2xlYXJTZWFyY2hPbkJsdXIoe2NsZWFyU2VhcmNoT25TZWxlY3Q6dCxtdWx0aXBsZTplfSkmJih0aGlzLnNlYXJjaD1cIlwiKSx2b2lkIHRoaXMuY2xvc2VTZWFyY2hPcHRpb25zKCl9dGhpcy5tb3VzZWRvd249ITEsMCE9PXRoaXMuc2VhcmNoLmxlbmd0aHx8MCE9PXRoaXMub3B0aW9ucy5sZW5ndGh8fHRoaXMuY2xvc2VTZWFyY2hPcHRpb25zKCl9LG9uU2VhcmNoRm9jdXM6ZnVuY3Rpb24oKXt0aGlzLm9wZW49ITAsdGhpcy4kZW1pdChcInNlYXJjaDpmb2N1c1wiKX0sb25Nb3VzZWRvd246ZnVuY3Rpb24oKXt0aGlzLm1vdXNlZG93bj0hMH0sb25Nb3VzZVVwOmZ1bmN0aW9uKCl7dGhpcy5tb3VzZWRvd249ITF9LG9uU2VhcmNoS2V5RG93bjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49ZnVuY3Rpb24odCl7cmV0dXJuIHQucHJldmVudERlZmF1bHQoKSwhZS5pc0NvbXBvc2luZyYmZS50eXBlQWhlYWRTZWxlY3QoKX0sbz17ODpmdW5jdGlvbih0KXtyZXR1cm4gZS5tYXliZURlbGV0ZVZhbHVlKCl9LDk6ZnVuY3Rpb24odCl7cmV0dXJuIGUub25UYWIoKX0sMjc6ZnVuY3Rpb24odCl7cmV0dXJuIGUub25Fc2NhcGUoKX0sMzg6ZnVuY3Rpb24odCl7cmV0dXJuIHQucHJldmVudERlZmF1bHQoKSxlLnR5cGVBaGVhZFVwKCl9LDQwOmZ1bmN0aW9uKHQpe3JldHVybiB0LnByZXZlbnREZWZhdWx0KCksZS50eXBlQWhlYWREb3duKCl9fTt0aGlzLnNlbGVjdE9uS2V5Q29kZXMuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIG9bdF09bn0pKTt2YXIgaT10aGlzLm1hcEtleWRvd24obyx0aGlzKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBpW3Qua2V5Q29kZV0pcmV0dXJuIGlbdC5rZXlDb2RlXSh0KX19LGNvbXB1dGVkOntpc1RyYWNraW5nVmFsdWVzOmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXRoaXMudmFsdWV8fHRoaXMuJG9wdGlvbnMucHJvcHNEYXRhLmhhc093blByb3BlcnR5KFwicmVkdWNlXCIpfSxzZWxlY3RlZFZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy52YWx1ZTtyZXR1cm4gdGhpcy5pc1RyYWNraW5nVmFsdWVzJiYodD10aGlzLiRkYXRhLl92YWx1ZSksdD9bXS5jb25jYXQodCk6W119LG9wdGlvbkxpc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHRpb25zLmNvbmNhdCh0aGlzLnB1c2hUYWdzP3RoaXMucHVzaGVkVGFnczpbXSl9LHNlYXJjaEVsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJHNjb3BlZFNsb3RzLnNlYXJjaD90aGlzLiRyZWZzLnNlbGVjdGVkT3B0aW9ucy5xdWVyeVNlbGVjdG9yKHRoaXMuc2VhcmNoSW5wdXRRdWVyeVNlbGVjdG9yKTp0aGlzLiRyZWZzLnNlYXJjaH0sc2NvcGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9e3NlYXJjaDp0aGlzLnNlYXJjaCxsb2FkaW5nOnRoaXMubG9hZGluZyxzZWFyY2hpbmc6dGhpcy5zZWFyY2hpbmcsZmlsdGVyZWRPcHRpb25zOnRoaXMuZmlsdGVyZWRPcHRpb25zfTtyZXR1cm57c2VhcmNoOnthdHRyaWJ1dGVzOm0oe2Rpc2FibGVkOnRoaXMuZGlzYWJsZWQscGxhY2Vob2xkZXI6dGhpcy5zZWFyY2hQbGFjZWhvbGRlcix0YWJpbmRleDp0aGlzLnRhYmluZGV4LHJlYWRvbmx5OiF0aGlzLnNlYXJjaGFibGUsaWQ6dGhpcy5pbnB1dElkLFwiYXJpYS1hdXRvY29tcGxldGVcIjpcImxpc3RcIixcImFyaWEtbGFiZWxsZWRieVwiOlwidnNcIi5jb25jYXQodGhpcy51aWQsXCJfX2NvbWJvYm94XCIpLFwiYXJpYS1jb250cm9sc1wiOlwidnNcIi5jb25jYXQodGhpcy51aWQsXCJfX2xpc3Rib3hcIikscmVmOlwic2VhcmNoXCIsdHlwZTpcInNlYXJjaFwiLGF1dG9jb21wbGV0ZTp0aGlzLmF1dG9jb21wbGV0ZSx2YWx1ZTp0aGlzLnNlYXJjaH0sdGhpcy5kcm9wZG93bk9wZW4mJnRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMudHlwZUFoZWFkUG9pbnRlcl0/e1wiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCI6XCJ2c1wiLmNvbmNhdCh0aGlzLnVpZCxcIl9fb3B0aW9uLVwiKS5jb25jYXQodGhpcy50eXBlQWhlYWRQb2ludGVyKX06e30pLGV2ZW50czp7Y29tcG9zaXRpb25zdGFydDpmdW5jdGlvbigpe3JldHVybiB0LmlzQ29tcG9zaW5nPSEwfSxjb21wb3NpdGlvbmVuZDpmdW5jdGlvbigpe3JldHVybiB0LmlzQ29tcG9zaW5nPSExfSxrZXlkb3duOnRoaXMub25TZWFyY2hLZXlEb3duLGJsdXI6dGhpcy5vblNlYXJjaEJsdXIsZm9jdXM6dGhpcy5vblNlYXJjaEZvY3VzLGlucHV0OmZ1bmN0aW9uKGUpe3JldHVybiB0LnNlYXJjaD1lLnRhcmdldC52YWx1ZX19fSxzcGlubmVyOntsb2FkaW5nOnRoaXMubXV0YWJsZUxvYWRpbmd9LG5vT3B0aW9uczp7c2VhcmNoOnRoaXMuc2VhcmNoLGxvYWRpbmc6dGhpcy5sb2FkaW5nLHNlYXJjaGluZzp0aGlzLnNlYXJjaGluZ30sb3BlbkluZGljYXRvcjp7YXR0cmlidXRlczp7cmVmOlwib3BlbkluZGljYXRvclwiLHJvbGU6XCJwcmVzZW50YXRpb25cIixjbGFzczpcInZzX19vcGVuLWluZGljYXRvclwifX0sbGlzdEhlYWRlcjplLGxpc3RGb290ZXI6ZSxoZWFkZXI6bSh7fSxlLHtkZXNlbGVjdDp0aGlzLmRlc2VsZWN0fSksZm9vdGVyOm0oe30sZSx7ZGVzZWxlY3Q6dGhpcy5kZXNlbGVjdH0pfX0sY2hpbGRDb21wb25lbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIG0oe30sZCx7fSx0aGlzLmNvbXBvbmVudHMpfSxzdGF0ZUNsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJ2cy0tb3BlblwiOnRoaXMuZHJvcGRvd25PcGVuLFwidnMtLXNpbmdsZVwiOiF0aGlzLm11bHRpcGxlLFwidnMtLXNlYXJjaGluZ1wiOnRoaXMuc2VhcmNoaW5nJiYhdGhpcy5ub0Ryb3AsXCJ2cy0tc2VhcmNoYWJsZVwiOnRoaXMuc2VhcmNoYWJsZSYmIXRoaXMubm9Ecm9wLFwidnMtLXVuc2VhcmNoYWJsZVwiOiF0aGlzLnNlYXJjaGFibGUsXCJ2cy0tbG9hZGluZ1wiOnRoaXMubXV0YWJsZUxvYWRpbmcsXCJ2cy0tZGlzYWJsZWRcIjp0aGlzLmRpc2FibGVkfX0sc2VhcmNoaW5nOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLnNlYXJjaH0sZHJvcGRvd25PcGVuOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMubm9Ecm9wJiYodGhpcy5vcGVuJiYhdGhpcy5tdXRhYmxlTG9hZGluZyl9LHNlYXJjaFBsYWNlaG9sZGVyOmZ1bmN0aW9uKCl7aWYodGhpcy5pc1ZhbHVlRW1wdHkmJnRoaXMucGxhY2Vob2xkZXIpcmV0dXJuIHRoaXMucGxhY2Vob2xkZXJ9LGZpbHRlcmVkT3B0aW9uczpmdW5jdGlvbigpe3ZhciB0PVtdLmNvbmNhdCh0aGlzLm9wdGlvbkxpc3QpO2lmKCF0aGlzLmZpbHRlcmFibGUmJiF0aGlzLnRhZ2dhYmxlKXJldHVybiB0O3ZhciBlPXRoaXMuc2VhcmNoLmxlbmd0aD90aGlzLmZpbHRlcih0LHRoaXMuc2VhcmNoLHRoaXMpOnQ7cmV0dXJuIHRoaXMudGFnZ2FibGUmJnRoaXMuc2VhcmNoLmxlbmd0aCYmIXRoaXMub3B0aW9uRXhpc3RzKHRoaXMuY3JlYXRlT3B0aW9uKHRoaXMuc2VhcmNoKSkmJmUudW5zaGlmdCh0aGlzLnNlYXJjaCksZX0saXNWYWx1ZUVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLnNlbGVjdGVkVmFsdWUubGVuZ3RofSxzaG93Q2xlYXJCdXR0b246ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5tdWx0aXBsZSYmdGhpcy5jbGVhcmFibGUmJiF0aGlzLm9wZW4mJiF0aGlzLmlzVmFsdWVFbXB0eX19fSxPPShuKDcpLGgoXywoZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2LXNlbGVjdFwiLGNsYXNzOnQuc3RhdGVDbGFzc2VzLGF0dHJzOntkaXI6dC5kaXJ9fSxbdC5fdChcImhlYWRlclwiLG51bGwsbnVsbCx0LnNjb3BlLmhlYWRlciksdC5fdihcIiBcIiksbihcImRpdlwiLHtyZWY6XCJ0b2dnbGVcIixzdGF0aWNDbGFzczpcInZzX19kcm9wZG93bi10b2dnbGVcIixhdHRyczp7aWQ6XCJ2c1wiK3QudWlkK1wiX19jb21ib2JveFwiLHJvbGU6XCJjb21ib2JveFwiLFwiYXJpYS1leHBhbmRlZFwiOnQuZHJvcGRvd25PcGVuLnRvU3RyaW5nKCksXCJhcmlhLW93bnNcIjpcInZzXCIrdC51aWQrXCJfX2xpc3Rib3hcIixcImFyaWEtbGFiZWxcIjpcIlNlYXJjaCBmb3Igb3B0aW9uXCJ9LG9uOnttb3VzZWRvd246ZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJldmVudERlZmF1bHQoKSx0LnRvZ2dsZURyb3Bkb3duKGUpfX19LFtuKFwiZGl2XCIse3JlZjpcInNlbGVjdGVkT3B0aW9uc1wiLHN0YXRpY0NsYXNzOlwidnNfX3NlbGVjdGVkLW9wdGlvbnNcIn0sW3QuX2wodC5zZWxlY3RlZFZhbHVlLChmdW5jdGlvbihlKXtyZXR1cm4gdC5fdChcInNlbGVjdGVkLW9wdGlvbi1jb250YWluZXJcIixbbihcInNwYW5cIix7a2V5OnQuZ2V0T3B0aW9uS2V5KGUpLHN0YXRpY0NsYXNzOlwidnNfX3NlbGVjdGVkXCJ9LFt0Ll90KFwic2VsZWN0ZWQtb3B0aW9uXCIsW3QuX3YoXCJcXG4gICAgICAgICAgICBcIit0Ll9zKHQuZ2V0T3B0aW9uTGFiZWwoZSkpK1wiXFxuICAgICAgICAgIFwiKV0sbnVsbCx0Lm5vcm1hbGl6ZU9wdGlvbkZvclNsb3QoZSkpLHQuX3YoXCIgXCIpLHQubXVsdGlwbGU/bihcImJ1dHRvblwiLHtyZWY6XCJkZXNlbGVjdEJ1dHRvbnNcIixyZWZJbkZvcjohMCxzdGF0aWNDbGFzczpcInZzX19kZXNlbGVjdFwiLGF0dHJzOntkaXNhYmxlZDp0LmRpc2FibGVkLHR5cGU6XCJidXR0b25cIix0aXRsZTpcIkRlc2VsZWN0IFwiK3QuZ2V0T3B0aW9uTGFiZWwoZSksXCJhcmlhLWxhYmVsXCI6XCJEZXNlbGVjdCBcIit0LmdldE9wdGlvbkxhYmVsKGUpfSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7cmV0dXJuIHQuZGVzZWxlY3QoZSl9fX0sW24odC5jaGlsZENvbXBvbmVudHMuRGVzZWxlY3Qse3RhZzpcImNvbXBvbmVudFwifSldLDEpOnQuX2UoKV0sMildLHtvcHRpb246dC5ub3JtYWxpemVPcHRpb25Gb3JTbG90KGUpLGRlc2VsZWN0OnQuZGVzZWxlY3QsbXVsdGlwbGU6dC5tdWx0aXBsZSxkaXNhYmxlZDp0LmRpc2FibGVkfSl9KSksdC5fdihcIiBcIiksdC5fdChcInNlYXJjaFwiLFtuKFwiaW5wdXRcIix0Ll9nKHQuX2Ioe3N0YXRpY0NsYXNzOlwidnNfX3NlYXJjaFwifSxcImlucHV0XCIsdC5zY29wZS5zZWFyY2guYXR0cmlidXRlcywhMSksdC5zY29wZS5zZWFyY2guZXZlbnRzKSldLG51bGwsdC5zY29wZS5zZWFyY2gpXSwyKSx0Ll92KFwiIFwiKSxuKFwiZGl2XCIse3JlZjpcImFjdGlvbnNcIixzdGF0aWNDbGFzczpcInZzX19hY3Rpb25zXCJ9LFtuKFwiYnV0dG9uXCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTp0LnNob3dDbGVhckJ1dHRvbixleHByZXNzaW9uOlwic2hvd0NsZWFyQnV0dG9uXCJ9XSxyZWY6XCJjbGVhckJ1dHRvblwiLHN0YXRpY0NsYXNzOlwidnNfX2NsZWFyXCIsYXR0cnM6e2Rpc2FibGVkOnQuZGlzYWJsZWQsdHlwZTpcImJ1dHRvblwiLHRpdGxlOlwiQ2xlYXIgU2VsZWN0ZWRcIixcImFyaWEtbGFiZWxcIjpcIkNsZWFyIFNlbGVjdGVkXCJ9LG9uOntjbGljazp0LmNsZWFyU2VsZWN0aW9ufX0sW24odC5jaGlsZENvbXBvbmVudHMuRGVzZWxlY3Qse3RhZzpcImNvbXBvbmVudFwifSldLDEpLHQuX3YoXCIgXCIpLHQuX3QoXCJvcGVuLWluZGljYXRvclwiLFt0Lm5vRHJvcD90Ll9lKCk6bih0LmNoaWxkQ29tcG9uZW50cy5PcGVuSW5kaWNhdG9yLHQuX2Ioe3RhZzpcImNvbXBvbmVudFwifSxcImNvbXBvbmVudFwiLHQuc2NvcGUub3BlbkluZGljYXRvci5hdHRyaWJ1dGVzLCExKSldLG51bGwsdC5zY29wZS5vcGVuSW5kaWNhdG9yKSx0Ll92KFwiIFwiKSx0Ll90KFwic3Bpbm5lclwiLFtuKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTp0Lm11dGFibGVMb2FkaW5nLGV4cHJlc3Npb246XCJtdXRhYmxlTG9hZGluZ1wifV0sc3RhdGljQ2xhc3M6XCJ2c19fc3Bpbm5lclwifSxbdC5fdihcIkxvYWRpbmcuLi5cIildKV0sbnVsbCx0LnNjb3BlLnNwaW5uZXIpXSwyKV0pLHQuX3YoXCIgXCIpLG4oXCJ0cmFuc2l0aW9uXCIse2F0dHJzOntuYW1lOnQudHJhbnNpdGlvbn19LFt0LmRyb3Bkb3duT3Blbj9uKFwidWxcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJhcHBlbmQtdG8tYm9keVwiLHJhd05hbWU6XCJ2LWFwcGVuZC10by1ib2R5XCJ9XSxyZWY6XCJkcm9wZG93bk1lbnVcIixzdGF0aWNDbGFzczpcInZzX19kcm9wZG93bi1tZW51XCIsYXR0cnM6e2lkOlwidnNcIit0LnVpZCtcIl9fbGlzdGJveFwiLHJvbGU6XCJsaXN0Ym94XCJ9LG9uOnttb3VzZWRvd246ZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJldmVudERlZmF1bHQoKSx0Lm9uTW91c2Vkb3duKGUpfSxtb3VzZXVwOnQub25Nb3VzZVVwfX0sW3QuX3QoXCJsaXN0LWhlYWRlclwiLG51bGwsbnVsbCx0LnNjb3BlLmxpc3RIZWFkZXIpLHQuX3YoXCIgXCIpLHQuX2wodC5maWx0ZXJlZE9wdGlvbnMsKGZ1bmN0aW9uKGUsbyl7cmV0dXJuIG4oXCJsaVwiLHtrZXk6dC5nZXRPcHRpb25LZXkoZSksc3RhdGljQ2xhc3M6XCJ2c19fZHJvcGRvd24tb3B0aW9uXCIsY2xhc3M6e1widnNfX2Ryb3Bkb3duLW9wdGlvbi0tc2VsZWN0ZWRcIjp0LmlzT3B0aW9uU2VsZWN0ZWQoZSksXCJ2c19fZHJvcGRvd24tb3B0aW9uLS1oaWdobGlnaHRcIjpvPT09dC50eXBlQWhlYWRQb2ludGVyLFwidnNfX2Ryb3Bkb3duLW9wdGlvbi0tZGlzYWJsZWRcIjohdC5zZWxlY3RhYmxlKGUpfSxhdHRyczp7cm9sZTpcIm9wdGlvblwiLGlkOlwidnNcIit0LnVpZCtcIl9fb3B0aW9uLVwiK28sXCJhcmlhLXNlbGVjdGVkXCI6bz09PXQudHlwZUFoZWFkUG9pbnRlcnx8bnVsbH0sb246e21vdXNlb3ZlcjpmdW5jdGlvbihuKXt0LnNlbGVjdGFibGUoZSkmJih0LnR5cGVBaGVhZFBvaW50ZXI9byl9LG1vdXNlZG93bjpmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0LnNlbGVjdGFibGUoZSkmJnQuc2VsZWN0KGUpfX19LFt0Ll90KFwib3B0aW9uXCIsW3QuX3YoXCJcXG4gICAgICAgICAgXCIrdC5fcyh0LmdldE9wdGlvbkxhYmVsKGUpKStcIlxcbiAgICAgICAgXCIpXSxudWxsLHQubm9ybWFsaXplT3B0aW9uRm9yU2xvdChlKSldLDIpfSkpLHQuX3YoXCIgXCIpLDA9PT10LmZpbHRlcmVkT3B0aW9ucy5sZW5ndGg/bihcImxpXCIse3N0YXRpY0NsYXNzOlwidnNfX25vLW9wdGlvbnNcIn0sW3QuX3QoXCJuby1vcHRpb25zXCIsW3QuX3YoXCJTb3JyeSwgbm8gbWF0Y2hpbmcgb3B0aW9ucy5cIildLG51bGwsdC5zY29wZS5ub09wdGlvbnMpXSwyKTp0Ll9lKCksdC5fdihcIiBcIiksdC5fdChcImxpc3QtZm9vdGVyXCIsbnVsbCxudWxsLHQuc2NvcGUubGlzdEZvb3RlcildLDIpOm4oXCJ1bFwiLHtzdGF0aWNTdHlsZTp7ZGlzcGxheTpcIm5vbmVcIix2aXNpYmlsaXR5OlwiaGlkZGVuXCJ9LGF0dHJzOntpZDpcInZzXCIrdC51aWQrXCJfX2xpc3Rib3hcIixyb2xlOlwibGlzdGJveFwifX0pXSksdC5fdihcIiBcIiksdC5fdChcImZvb3RlclwiLG51bGwsbnVsbCx0LnNjb3BlLmZvb3RlcildLDIpfSksW10sITEsbnVsbCxudWxsLG51bGwpLmV4cG9ydHMpLHc9e2FqYXg6cCxwb2ludGVyOnUscG9pbnRlclNjcm9sbDpjfTtuLmQoZSxcIlZ1ZVNlbGVjdFwiLChmdW5jdGlvbigpe3JldHVybiBPfSkpLG4uZChlLFwibWl4aW5zXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHd9KSk7ZS5kZWZhdWx0PU99XSl9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12dWUtc2VsZWN0LmpzLm1hcCIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG4vLyBFZGdlIDE0LSBpc3N1ZVxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2ZpbHRlcicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eVwiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuNi40JyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbm1vZHVsZS5leHBvcnRzID0gJ1xcdTAwMDlcXHUwMDBBXFx1MDAwQlxcdTAwMENcXHUwMDBEXFx1MDAyMFxcdTAwQTBcXHUxNjgwXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIHdoaXRlc3BhY2UgPSAnWycgKyB3aGl0ZXNwYWNlcyArICddJztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyB3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAod2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKiQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gICAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwidmFyIEZsYXR0ZWQgPSAoZnVuY3Rpb24gKFByaW1pdGl2ZSwgcHJpbWl0aXZlKSB7XG5cbiAgLyohXG4gICAqIElTQyBMaWNlbnNlXG4gICAqXG4gICAqIENvcHlyaWdodCAoYykgMjAxOCwgQW5kcmVhIEdpYW1tYXJjaGksIEBXZWJSZWZsZWN0aW9uXG4gICAqXG4gICAqIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxuICAgKiBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4gICAqIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG4gICAqXG4gICAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcbiAgICogUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG4gICAqIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbiAgICogSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG4gICAqIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFXG4gICAqIE9SIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcbiAgICogUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbiAgICovXG5cbiAgdmFyIEZsYXR0ZWQgPSB7XG5cbiAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UodGV4dCwgcmV2aXZlcikge1xuICAgICAgdmFyIGlucHV0ID0gSlNPTi5wYXJzZSh0ZXh0LCBQcmltaXRpdmVzKS5tYXAocHJpbWl0aXZlcyk7XG4gICAgICB2YXIgdmFsdWUgPSBpbnB1dFswXTtcbiAgICAgIHZhciAkID0gcmV2aXZlciB8fCBub29wO1xuICAgICAgdmFyIHRtcCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgP1xuICAgICAgICAgICAgICAgICAgcmV2aXZlKGlucHV0LCBuZXcgU2V0LCB2YWx1ZSwgJCkgOlxuICAgICAgICAgICAgICAgICAgdmFsdWU7XG4gICAgICByZXR1cm4gJC5jYWxsKHsnJzogdG1wfSwgJycsIHRtcCk7XG4gICAgfSxcblxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIGZvciAodmFyXG4gICAgICAgIGZpcnN0UnVuLFxuICAgICAgICBrbm93biA9IG5ldyBNYXAsXG4gICAgICAgIGlucHV0ID0gW10sXG4gICAgICAgIG91dHB1dCA9IFtdLFxuICAgICAgICAkID0gcmVwbGFjZXIgJiYgdHlwZW9mIHJlcGxhY2VyID09PSB0eXBlb2YgaW5wdXQgP1xuICAgICAgICAgICAgICBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgICAgICAgIGlmIChrID09PSAnJyB8fCAtMSA8IHJlcGxhY2VyLmluZGV4T2YoaykpIHJldHVybiB2O1xuICAgICAgICAgICAgICB9IDpcbiAgICAgICAgICAgICAgKHJlcGxhY2VyIHx8IG5vb3ApLFxuICAgICAgICBpID0gK3NldChrbm93biwgaW5wdXQsICQuY2FsbCh7Jyc6IHZhbHVlfSwgJycsIHZhbHVlKSksXG4gICAgICAgIHJlcGxhY2UgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgZmlyc3RSdW4gPSAhZmlyc3RSdW47XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhZnRlciA9ICQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBhZnRlcikge1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgaWYgKGFmdGVyID09PSBudWxsKSByZXR1cm4gYWZ0ZXI7XG4gICAgICAgICAgICBjYXNlIHByaW1pdGl2ZTpcbiAgICAgICAgICAgICAgcmV0dXJuIGtub3duLmdldChhZnRlcikgfHwgc2V0KGtub3duLCBpbnB1dCwgYWZ0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgICAgIH07XG4gICAgICAgIGkgPCBpbnB1dC5sZW5ndGg7IGkrK1xuICAgICAgKSB7XG4gICAgICAgIGZpcnN0UnVuID0gdHJ1ZTtcbiAgICAgICAgb3V0cHV0W2ldID0gSlNPTi5zdHJpbmdpZnkoaW5wdXRbaV0sIHJlcGxhY2UsIHNwYWNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnWycgKyBvdXRwdXQuam9pbignLCcpICsgJ10nO1xuICAgIH1cblxuICB9O1xuXG4gIHJldHVybiBGbGF0dGVkO1xuXG4gIGZ1bmN0aW9uIG5vb3Aoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJldml2ZShpbnB1dCwgcGFyc2VkLCBvdXRwdXQsICQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob3V0cHV0KS5yZWR1Y2UoXG4gICAgICBmdW5jdGlvbiAob3V0cHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb3V0cHV0W2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFByaW1pdGl2ZSkge1xuICAgICAgICAgIHZhciB0bXAgPSBpbnB1dFt2YWx1ZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiB0bXAgPT09ICdvYmplY3QnICYmICFwYXJzZWQuaGFzKHRtcCkpIHtcbiAgICAgICAgICAgIHBhcnNlZC5hZGQodG1wKTtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gJC5jYWxsKG91dHB1dCwga2V5LCByZXZpdmUoaW5wdXQsIHBhcnNlZCwgdG1wLCAkKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gJC5jYWxsKG91dHB1dCwga2V5LCB0bXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgb3V0cHV0W2tleV0gPSAkLmNhbGwob3V0cHV0LCBrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgIH0sXG4gICAgICBvdXRwdXRcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0KGtub3duLCBpbnB1dCwgdmFsdWUpIHtcbiAgICB2YXIgaW5kZXggPSBQcmltaXRpdmUoaW5wdXQucHVzaCh2YWx1ZSkgLSAxKTtcbiAgICBrbm93bi5zZXQodmFsdWUsIGluZGV4KTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvLyB0aGUgdHdvIGtpbmRzIG9mIHByaW1pdGl2ZXNcbiAgLy8gIDEuIHRoZSByZWFsIG9uZVxuICAvLyAgMi4gdGhlIHdyYXBwZWQgb25lXG5cbiAgZnVuY3Rpb24gcHJpbWl0aXZlcyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByaW1pdGl2ZSA/IFByaW1pdGl2ZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFByaW1pdGl2ZXMoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IHByaW1pdGl2ZSA/IG5ldyBQcmltaXRpdmUodmFsdWUpIDogdmFsdWU7XG4gIH1cblxufShTdHJpbmcsICdzdHJpbmcnKSk7XG5leHBvcnQgZGVmYXVsdCBGbGF0dGVkO1xuZXhwb3J0IHZhciBwYXJzZSA9IEZsYXR0ZWQucGFyc2U7XG5leHBvcnQgdmFyIHN0cmluZ2lmeSA9IEZsYXR0ZWQuc3RyaW5naWZ5O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImludC1wbVwiLGNsYXNzOnsnaW50LXBtLXZlcnRpY2FsJzogX3ZtLnZlcnRpY2FsfX0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImludC1wbS1idG5cIixjbGFzczpfdm0uZ2V0QnRuQ2xhc3ModHJ1ZSksYXR0cnM6e1wiYXJpYS1sYWJlbFwiOl92bS5kZWNyZW1lbnRBcmlhTGFiZWwsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS52ZXJ0aWNhbCA/IF92bS5pbmNyZW1lbnQoKSA6IF92bS5kZWNyZW1lbnQoKX19fSxbX3ZtLl90KF92bS52ZXJ0aWNhbCA/ICdpbmNyZW1lbnQnIDogJ2RlY3JlbWVudCcsW192bS5fdihfdm0uX3MoX3ZtLnZlcnRpY2FsID8gJysnIDogJy0nKSldKV0sMiksX2MoJ2Rpdicse3JlZjpcInNwaW5idXR0b25cIixzdGF0aWNDbGFzczpcImludC1wbS12YWx1ZVwiLGF0dHJzOntcInJvbGVcIjpcInNwaW5idXR0b25cIixcInRhYmluZGV4XCI6XCIwXCIsXCJhcmlhLXZhbHVlbm93XCI6X3ZtLnZhbHVlLFwiYXJpYS12YWx1ZW1pblwiOl92bS5taW4sXCJhcmlhLXZhbHVlbWF4XCI6X3ZtLm1heCxcImFyaWEtbGFiZWxcIjpfdm0uc3BpbkJ1dHRvbkFyaWFMYWJlbH19LFtfdm0uX3QoXCJkZWZhdWx0XCIsW192bS5fdihfdm0uX3MoX3ZtLmludFZhbHVlKSldKV0sMiksX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwiaGlkZGVuXCIsXCJuYW1lXCI6X3ZtLmZvcm1OYW1lfSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5pbnRWYWx1ZX19KSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJpbnQtcG0tYnRuXCIsY2xhc3M6X3ZtLmdldEJ0bkNsYXNzKGZhbHNlKSxhdHRyczp7XCJhcmlhLWxhYmVsXCI6X3ZtLmluY3JlbWVudEFyaWFMYWJlbCxcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnZlcnRpY2FsID8gX3ZtLmRlY3JlbWVudCgpIDogX3ZtLmluY3JlbWVudCgpfX19LFtfdm0uX3QoX3ZtLnZlcnRpY2FsID8gJ2RlY3JlbWVudCcgOiAnaW5jcmVtZW50JyxbX3ZtLl92KF92bS5fcyhfdm0udmVydGljYWwgPyAnLScgOiAnKycpKV0pXSwyKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiaW50LXBtXCIgOmNsYXNzPVwieydpbnQtcG0tdmVydGljYWwnOiB2ZXJ0aWNhbH1cIj5cclxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaW50LXBtLWJ0blwiIDpjbGFzcz1cImdldEJ0bkNsYXNzKHRydWUpXCIgdi1vbjpjbGljaz1cInZlcnRpY2FsID8gaW5jcmVtZW50KCkgOiBkZWNyZW1lbnQoKVwiXHJcbiAgICAgICAgICAgICAgICA6YXJpYS1sYWJlbD1cImRlY3JlbWVudEFyaWFMYWJlbFwiIDpkaXNhYmxlZD1cImRpc2FibGVkXCI+XHJcbiAgICAgICAgICAgIDxzbG90IDpuYW1lPVwidmVydGljYWwgPyAnaW5jcmVtZW50JyA6ICdkZWNyZW1lbnQnXCI+e3sgdmVydGljYWwgPyAnKycgOiAnLScgfX08L3Nsb3Q+XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImludC1wbS12YWx1ZVwiIHJlZj1cInNwaW5idXR0b25cIiByb2xlPVwic3BpbmJ1dHRvblwiIHRhYmluZGV4PVwiMFwiXHJcbiAgICAgICAgICAgICA6YXJpYS12YWx1ZW5vdz1cInZhbHVlXCIgOmFyaWEtdmFsdWVtaW49XCJtaW5cIiA6YXJpYS12YWx1ZW1heD1cIm1heFwiIDphcmlhLWxhYmVsPVwic3BpbkJ1dHRvbkFyaWFMYWJlbFwiPlxyXG4gICAgICAgICAgICA8c2xvdD57eyBpbnRWYWx1ZSB9fTwvc2xvdD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIDpuYW1lPVwiZm9ybU5hbWVcIiA6dmFsdWU9XCJpbnRWYWx1ZVwiIC8+XHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImludC1wbS1idG5cIiA6Y2xhc3M9XCJnZXRCdG5DbGFzcyhmYWxzZSlcIiB2LW9uOmNsaWNrPVwidmVydGljYWwgPyBkZWNyZW1lbnQoKSA6IGluY3JlbWVudCgpXCJcclxuICAgICAgICAgICAgICAgIDphcmlhLWxhYmVsPVwiaW5jcmVtZW50QXJpYUxhYmVsXCIgOmRpc2FibGVkPVwiZGlzYWJsZWRcIj5cclxuICAgICAgICAgICAgPHNsb3QgOm5hbWU9XCJ2ZXJ0aWNhbCA/ICdkZWNyZW1lbnQnIDogJ2luY3JlbWVudCdcIj57eyB2ZXJ0aWNhbCA/ICctJyA6ICcrJyB9fTwvc2xvdD5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnSW50ZWdlclBsdXNtaW51cycsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICB2YWx1ZToge1xyXG4gICAgICAgIGRlZmF1bHQ6IDAsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyXHJcbiAgICAgIH0sXHJcbiAgICAgIG1pbjoge1xyXG4gICAgICAgIGRlZmF1bHQ6IDAsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyXHJcbiAgICAgIH0sXHJcbiAgICAgIG1heDoge1xyXG4gICAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCxcclxuICAgICAgICB0eXBlOiBOdW1iZXJcclxuICAgICAgfSxcclxuICAgICAgc3RlcDoge1xyXG4gICAgICAgIGRlZmF1bHQ6IDEsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyXHJcbiAgICAgIH0sXHJcbiAgICAgIHZlcnRpY2FsOiB7XHJcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgICAgICAgdHlwZTogQm9vbGVhblxyXG4gICAgICB9LFxyXG4gICAgICBpbmNyZW1lbnRBcmlhTGFiZWw6IHtcclxuICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgIHR5cGU6IFN0cmluZ1xyXG4gICAgICB9LFxyXG4gICAgICBkZWNyZW1lbnRBcmlhTGFiZWw6IHtcclxuICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgIHR5cGU6IFN0cmluZ1xyXG4gICAgICB9LFxyXG4gICAgICBzcGluQnV0dG9uQXJpYUxhYmVsOiB7XHJcbiAgICAgICAgZGVmYXVsdDogbnVsbCxcclxuICAgICAgICB0eXBlOiBTdHJpbmdcclxuICAgICAgfSxcclxuICAgICAgZGlzYWJsZWQ6IHtcclxuICAgICAgICBkZWZhdWx0OiBmYWxzZSxcclxuICAgICAgICB0eXBlOiBCb29sZWFuXHJcbiAgICAgIH0sXHJcbiAgICAgIGZvcm1OYW1lOiB7XHJcbiAgICAgICAgZGVmYXVsdDogJ2ludGVnZXJQbHVzTWludXMnLFxyXG4gICAgICAgIHR5cGU6IFN0cmluZ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGF0YSAoKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaW50VmFsdWU6IDBcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgIGNhbkluY3JlbWVudCAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybiBmYWxzZVxyXG4gICAgICAgIHJldHVybiAodGhpcy5tYXggPT09IHVuZGVmaW5lZCB8fCAoKHRoaXMuaW50VmFsdWUgKyB0aGlzLnN0ZXApIDw9IHRoaXMubWF4KSlcclxuICAgICAgfSxcclxuICAgICAgY2FuRGVjcmVtZW50ICgpIHtcclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgcmV0dXJuICgodGhpcy5pbnRWYWx1ZSAtIHRoaXMuc3RlcCkgPj0gdGhpcy5taW4pXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgbW91bnRlZCAoKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5rZXlVcClcclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgIGtleVVwIChldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU3BpbkJ1dHRvbkZvY3VzZWQoKSkge1xyXG4gICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDMzIHx8IGV2ZW50LmtleUNvZGUgPT09IDM4KSB7IC8vIHBhZ2UgdXAgfHwgdXAgYXJyb3dcclxuICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnQoKVxyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM0IHx8IGV2ZW50LmtleUNvZGUgPT09IDQwKSB7IC8vIHBhZ2UgZG93biB8fCBkb3duIGFycm93XHJcbiAgICAgICAgICAgIHRoaXMuZGVjcmVtZW50KClcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzNikgeyAvLyBob21lIGJ1dHRvblxyXG4gICAgICAgICAgICB0aGlzLnNldFRvTWluKClcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIGlmIG1heCwgc2V0IHRvIG1heFxyXG4gICAgICAgICAgaWYgKHRoaXMubWF4ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQua2V5Q29kZSA9PT0gMzUpIHsgLy8gZW5kIGJ1dHRvblxyXG4gICAgICAgICAgICB0aGlzLnNldFRvTWF4KClcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgaXNTcGluQnV0dG9uRm9jdXNlZCgpIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcy4kcmVmcy5zcGluYnV0dG9uXHJcbiAgICAgIH0sXHJcbiAgICAgIGdldEJ0bkNsYXNzIChmaXJzdEJ0bikge1xyXG4gICAgICAgIGxldCBidG5DbGFzcyA9ICdpbnQtcG0tJ1xyXG4gICAgICAgIGlmICgoZmlyc3RCdG4gJiYgIXRoaXMudmVydGljYWwpIHx8ICghZmlyc3RCdG4gJiYgdGhpcy52ZXJ0aWNhbCkpIHtcclxuICAgICAgICAgIGJ0bkNsYXNzICs9ICdkZWNyZW1lbnQnXHJcbiAgICAgICAgICBpZiAoIXRoaXMuY2FuRGVjcmVtZW50KSBidG5DbGFzcyArPSAnIGRpc2FibGVkJ1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBidG5DbGFzcyArPSAnaW5jcmVtZW50J1xyXG4gICAgICAgICAgaWYgKCF0aGlzLmNhbkluY3JlbWVudCkgYnRuQ2xhc3MgKz0gJyBkaXNhYmxlZCdcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ0bkNsYXNzXHJcbiAgICAgIH0sXHJcbiAgICAgIHNldFRvTWluICgpIHtcclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuXHJcbiAgICAgICAgdGhpcy5pbnRWYWx1ZSA9IHRoaXMubWluXHJcbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB0aGlzLmludFZhbHVlKVxyXG4gICAgICB9LFxyXG4gICAgICBzZXRUb01heCgpIHtcclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuXHJcbiAgICAgICAgdGhpcy5pbnRWYWx1ZSA9IHRoaXMubWF4XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB0aGlzLmludFZhbHVlKVxyXG4gICAgICB9LFxyXG4gICAgICBpbmNyZW1lbnQgKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbkluY3JlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5pbnRWYWx1ZSA9IHRoaXMuaW50VmFsdWUgKyB0aGlzLnN0ZXBcclxuICAgICAgICAgIHRoaXMuJGVtaXQoJ2lwbS1pbmNyZW1lbnQnLCB0aGlzLmludFZhbHVlKVxyXG4gICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB0aGlzLmludFZhbHVlKVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZGVjcmVtZW50ICgpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW5EZWNyZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMuaW50VmFsdWUgPSB0aGlzLmludFZhbHVlIC0gdGhpcy5zdGVwXHJcbiAgICAgICAgICB0aGlzLiRlbWl0KCdpcG0tZGVjcmVtZW50JywgdGhpcy5pbnRWYWx1ZSlcclxuICAgICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5pbnRWYWx1ZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB3YXRjaDoge1xyXG4gICAgICB2YWx1ZToge1xyXG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIChuZXdWYWwsIG9sZFZhbCkge1xyXG4gICAgICAgICAgdGhpcy5pbnRWYWx1ZSA9IG5ld1ZhbFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZWQgKCkge1xyXG4gICAgICB0aGlzLmludFZhbHVlID0gdGhpcy52YWx1ZVxyXG4gICAgICBpZiAodGhpcy5zdGVwIDwgMSkgdGhpcy5zdGVwID0gMVxyXG4gICAgICBpZiAodGhpcy5tYXggPCB0aGlzLm1pbikgdGhpcy5tYXggPSB1bmRlZmluZWRcclxuICAgIH1cclxuICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4gICAgLmludC1wbSB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG4gICAgICAgIC5pbnQtcG0tdmFsdWUge1xyXG4gICAgICAgICAgICBib3JkZXItd2lkdGg6IDFweCAwO1xyXG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICNDQ0M7XHJcbiAgICAgICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgMTBweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5pbnQtcG0tYnRuIHtcclxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI0NDQztcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0RERDtcclxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcclxuXHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0NDQztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJi5kaXNhYmxlZCB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUVFO1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICM3Nzc7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xyXG4gICAgICAgICAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0VFRTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi5pbnQtcG0tdmVydGljYWwge1xyXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG5cclxuICAgICAgICAgICAgLmludC1wbS12YWx1ZSB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDAgMXB4O1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTEyLTAhLi4vLi4vLi4vdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vLi4vdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ludGVnZXJQbHVzbWludXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMi0wIS4uLy4uLy4uL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vSW50ZWdlclBsdXNtaW51cy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Y2ZmMWI3YTQmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vSW50ZWdlclBsdXNtaW51cy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0ludGVnZXJQbHVzbWludXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0ludGVnZXJQbHVzbWludXMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9Y2ZmMWI3YTQmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImNmZjFiN2E0XCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gIW5hdGl2ZUFzc2lnbiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG4gIGlmIChERVNDUklQVE9SUyAmJiBuYXRpdmVBc3NpZ24oeyBiOiAxIH0sIG5hdGl2ZUFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiBuYXRpdmVBc3NpZ247XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVApIHtcbiAgdmFyIHN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgdHlwZW9mIChOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIE5ld1RhcmdldCAhPT0gV3JhcHBlciAmJlxuICAgIGlzT2JqZWN0KE5ld1RhcmdldFByb3RvdHlwZSA9IE5ld1RhcmdldC5wcm90b3R5cGUpICYmXG4gICAgTmV3VGFyZ2V0UHJvdG90eXBlICE9PSBXcmFwcGVyLnByb3RvdHlwZVxuICApIHNldFByb3RvdHlwZU9mKCR0aGlzLCBOZXdUYXJnZXRQcm90b3R5cGUpO1xuICByZXR1cm4gJHRoaXM7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXMoU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwiLyohXG4gICogdnVlLXJvdXRlciB2My4xLjZcbiAgKiAoYykgMjAyMCBFdmFuIFlvdVxuICAqIEBsaWNlbnNlIE1JVFxuICAqL1xuLyogICovXG5cbmZ1bmN0aW9uIGFzc2VydCAoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKChcIlt2dWUtcm91dGVyXSBcIiArIG1lc3NhZ2UpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm4gKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZGl0aW9uKSB7XG4gICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2FybigoXCJbdnVlLXJvdXRlcl0gXCIgKyBtZXNzYWdlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFcnJvciAoZXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXJyKS5pbmRleE9mKCdFcnJvcicpID4gLTFcbn1cblxuZnVuY3Rpb24gaXNFeHRlbmRlZEVycm9yIChjb25zdHJ1Y3RvciwgZXJyKSB7XG4gIHJldHVybiAoXG4gICAgZXJyIGluc3RhbmNlb2YgY29uc3RydWN0b3IgfHxcbiAgICAvLyBfbmFtZSBpcyB0byBzdXBwb3J0IElFOSB0b29cbiAgICAoZXJyICYmIChlcnIubmFtZSA9PT0gY29uc3RydWN0b3IubmFtZSB8fCBlcnIuX25hbWUgPT09IGNvbnN0cnVjdG9yLl9uYW1lKSlcbiAgKVxufVxuXG5mdW5jdGlvbiBleHRlbmQgKGEsIGIpIHtcbiAgZm9yICh2YXIga2V5IGluIGIpIHtcbiAgICBhW2tleV0gPSBiW2tleV07XG4gIH1cbiAgcmV0dXJuIGFcbn1cblxudmFyIFZpZXcgPSB7XG4gIG5hbWU6ICdSb3V0ZXJWaWV3JyxcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChfLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG5cbiAgICAvLyB1c2VkIGJ5IGRldnRvb2xzIHRvIGRpc3BsYXkgYSByb3V0ZXItdmlldyBiYWRnZVxuICAgIGRhdGEucm91dGVyVmlldyA9IHRydWU7XG5cbiAgICAvLyBkaXJlY3RseSB1c2UgcGFyZW50IGNvbnRleHQncyBjcmVhdGVFbGVtZW50KCkgZnVuY3Rpb25cbiAgICAvLyBzbyB0aGF0IGNvbXBvbmVudHMgcmVuZGVyZWQgYnkgcm91dGVyLXZpZXcgY2FuIHJlc29sdmUgbmFtZWQgc2xvdHNcbiAgICB2YXIgaCA9IHBhcmVudC4kY3JlYXRlRWxlbWVudDtcbiAgICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gICAgdmFyIHJvdXRlID0gcGFyZW50LiRyb3V0ZTtcbiAgICB2YXIgY2FjaGUgPSBwYXJlbnQuX3JvdXRlclZpZXdDYWNoZSB8fCAocGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgPSB7fSk7XG5cbiAgICAvLyBkZXRlcm1pbmUgY3VycmVudCB2aWV3IGRlcHRoLCBhbHNvIGNoZWNrIHRvIHNlZSBpZiB0aGUgdHJlZVxuICAgIC8vIGhhcyBiZWVuIHRvZ2dsZWQgaW5hY3RpdmUgYnV0IGtlcHQtYWxpdmUuXG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICB2YXIgaW5hY3RpdmUgPSBmYWxzZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5fcm91dGVyUm9vdCAhPT0gcGFyZW50KSB7XG4gICAgICB2YXIgdm5vZGVEYXRhID0gcGFyZW50LiR2bm9kZSA/IHBhcmVudC4kdm5vZGUuZGF0YSA6IHt9O1xuICAgICAgaWYgKHZub2RlRGF0YS5yb3V0ZXJWaWV3KSB7XG4gICAgICAgIGRlcHRoKys7XG4gICAgICB9XG4gICAgICBpZiAodm5vZGVEYXRhLmtlZXBBbGl2ZSAmJiBwYXJlbnQuX2RpcmVjdEluYWN0aXZlICYmIHBhcmVudC5faW5hY3RpdmUpIHtcbiAgICAgICAgaW5hY3RpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIGRhdGEucm91dGVyVmlld0RlcHRoID0gZGVwdGg7XG5cbiAgICAvLyByZW5kZXIgcHJldmlvdXMgdmlldyBpZiB0aGUgdHJlZSBpcyBpbmFjdGl2ZSBhbmQga2VwdC1hbGl2ZVxuICAgIGlmIChpbmFjdGl2ZSkge1xuICAgICAgdmFyIGNhY2hlZERhdGEgPSBjYWNoZVtuYW1lXTtcbiAgICAgIHZhciBjYWNoZWRDb21wb25lbnQgPSBjYWNoZWREYXRhICYmIGNhY2hlZERhdGEuY29tcG9uZW50O1xuICAgICAgaWYgKGNhY2hlZENvbXBvbmVudCkge1xuICAgICAgICAvLyAjMjMwMVxuICAgICAgICAvLyBwYXNzIHByb3BzXG4gICAgICAgIGlmIChjYWNoZWREYXRhLmNvbmZpZ1Byb3BzKSB7XG4gICAgICAgICAgZmlsbFByb3BzaW5EYXRhKGNhY2hlZENvbXBvbmVudCwgZGF0YSwgY2FjaGVkRGF0YS5yb3V0ZSwgY2FjaGVkRGF0YS5jb25maWdQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGgoY2FjaGVkQ29tcG9uZW50LCBkYXRhLCBjaGlsZHJlbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlbmRlciBwcmV2aW91cyBlbXB0eSB2aWV3XG4gICAgICAgIHJldHVybiBoKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZCA9IHJvdXRlLm1hdGNoZWRbZGVwdGhdO1xuICAgIHZhciBjb21wb25lbnQgPSBtYXRjaGVkICYmIG1hdGNoZWQuY29tcG9uZW50c1tuYW1lXTtcblxuICAgIC8vIHJlbmRlciBlbXB0eSBub2RlIGlmIG5vIG1hdGNoZWQgcm91dGUgb3Igbm8gY29uZmlnIGNvbXBvbmVudFxuICAgIGlmICghbWF0Y2hlZCB8fCAhY29tcG9uZW50KSB7XG4gICAgICBjYWNoZVtuYW1lXSA9IG51bGw7XG4gICAgICByZXR1cm4gaCgpXG4gICAgfVxuXG4gICAgLy8gY2FjaGUgY29tcG9uZW50XG4gICAgY2FjaGVbbmFtZV0gPSB7IGNvbXBvbmVudDogY29tcG9uZW50IH07XG5cbiAgICAvLyBhdHRhY2ggaW5zdGFuY2UgcmVnaXN0cmF0aW9uIGhvb2tcbiAgICAvLyB0aGlzIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBpbnN0YW5jZSdzIGluamVjdGVkIGxpZmVjeWNsZSBob29rc1xuICAgIGRhdGEucmVnaXN0ZXJSb3V0ZUluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCB2YWwpIHtcbiAgICAgIC8vIHZhbCBjb3VsZCBiZSB1bmRlZmluZWQgZm9yIHVucmVnaXN0cmF0aW9uXG4gICAgICB2YXIgY3VycmVudCA9IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdO1xuICAgICAgaWYgKFxuICAgICAgICAodmFsICYmIGN1cnJlbnQgIT09IHZtKSB8fFxuICAgICAgICAoIXZhbCAmJiBjdXJyZW50ID09PSB2bSlcbiAgICAgICkge1xuICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbHNvIHJlZ2lzdGVyIGluc3RhbmNlIGluIHByZXBhdGNoIGhvb2tcbiAgICAvLyBpbiBjYXNlIHRoZSBzYW1lIGNvbXBvbmVudCBpbnN0YW5jZSBpcyByZXVzZWQgYWNyb3NzIGRpZmZlcmVudCByb3V0ZXNcbiAgICA7KGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pKS5wcmVwYXRjaCA9IGZ1bmN0aW9uIChfLCB2bm9kZSkge1xuICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW5zdGFuY2UgaW4gaW5pdCBob29rXG4gICAgLy8gaW4gY2FzZSBrZXB0LWFsaXZlIGNvbXBvbmVudCBiZSBhY3RpdmVkIHdoZW4gcm91dGVzIGNoYW5nZWRcbiAgICBkYXRhLmhvb2suaW5pdCA9IGZ1bmN0aW9uICh2bm9kZSkge1xuICAgICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlICYmXG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICE9PSBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXVxuICAgICAgKSB7XG4gICAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBjb25maWdQcm9wcyA9IG1hdGNoZWQucHJvcHMgJiYgbWF0Y2hlZC5wcm9wc1tuYW1lXTtcbiAgICAvLyBzYXZlIHJvdXRlIGFuZCBjb25maWdQcm9wcyBpbiBjYWNoY2VcbiAgICBpZiAoY29uZmlnUHJvcHMpIHtcbiAgICAgIGV4dGVuZChjYWNoZVtuYW1lXSwge1xuICAgICAgICByb3V0ZTogcm91dGUsXG4gICAgICAgIGNvbmZpZ1Byb3BzOiBjb25maWdQcm9wc1xuICAgICAgfSk7XG4gICAgICBmaWxsUHJvcHNpbkRhdGEoY29tcG9uZW50LCBkYXRhLCByb3V0ZSwgY29uZmlnUHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiBoKGNvbXBvbmVudCwgZGF0YSwgY2hpbGRyZW4pXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZpbGxQcm9wc2luRGF0YSAoY29tcG9uZW50LCBkYXRhLCByb3V0ZSwgY29uZmlnUHJvcHMpIHtcbiAgLy8gcmVzb2x2ZSBwcm9wc1xuICB2YXIgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gcmVzb2x2ZVByb3BzKHJvdXRlLCBjb25maWdQcm9wcyk7XG4gIGlmIChwcm9wc1RvUGFzcykge1xuICAgIC8vIGNsb25lIHRvIHByZXZlbnQgbXV0YXRpb25cbiAgICBwcm9wc1RvUGFzcyA9IGRhdGEucHJvcHMgPSBleHRlbmQoe30sIHByb3BzVG9QYXNzKTtcbiAgICAvLyBwYXNzIG5vbi1kZWNsYXJlZCBwcm9wcyBhcyBhdHRyc1xuICAgIHZhciBhdHRycyA9IGRhdGEuYXR0cnMgPSBkYXRhLmF0dHJzIHx8IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wc1RvUGFzcykge1xuICAgICAgaWYgKCFjb21wb25lbnQucHJvcHMgfHwgIShrZXkgaW4gY29tcG9uZW50LnByb3BzKSkge1xuICAgICAgICBhdHRyc1trZXldID0gcHJvcHNUb1Bhc3Nba2V5XTtcbiAgICAgICAgZGVsZXRlIHByb3BzVG9QYXNzW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQcm9wcyAocm91dGUsIGNvbmZpZykge1xuICBzd2l0Y2ggKHR5cGVvZiBjb25maWcpIHtcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHJldHVybiBjb25maWdcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gY29uZmlnKHJvdXRlKVxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIGNvbmZpZyA/IHJvdXRlLnBhcmFtcyA6IHVuZGVmaW5lZFxuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwicHJvcHMgaW4gXFxcIlwiICsgKHJvdXRlLnBhdGgpICsgXCJcXFwiIGlzIGEgXCIgKyAodHlwZW9mIGNvbmZpZykgKyBcIiwgXCIgK1xuICAgICAgICAgIFwiZXhwZWN0aW5nIGFuIG9iamVjdCwgZnVuY3Rpb24gb3IgYm9vbGVhbi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZW5jb2RlUmVzZXJ2ZVJFID0gL1shJygpKl0vZztcbnZhciBlbmNvZGVSZXNlcnZlUmVwbGFjZXIgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTsgfTtcbnZhciBjb21tYVJFID0gLyUyQy9nO1xuXG4vLyBmaXhlZCBlbmNvZGVVUklDb21wb25lbnQgd2hpY2ggaXMgbW9yZSBjb25mb3JtYW50IHRvIFJGQzM5ODY6XG4vLyAtIGVzY2FwZXMgWyEnKCkqXVxuLy8gLSBwcmVzZXJ2ZSBjb21tYXNcbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKVxuICAucmVwbGFjZShlbmNvZGVSZXNlcnZlUkUsIGVuY29kZVJlc2VydmVSZXBsYWNlcilcbiAgLnJlcGxhY2UoY29tbWFSRSwgJywnKTsgfTtcblxudmFyIGRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcblxuZnVuY3Rpb24gcmVzb2x2ZVF1ZXJ5IChcbiAgcXVlcnksXG4gIGV4dHJhUXVlcnksXG4gIF9wYXJzZVF1ZXJ5XG4pIHtcbiAgaWYgKCBleHRyYVF1ZXJ5ID09PSB2b2lkIDAgKSBleHRyYVF1ZXJ5ID0ge307XG5cbiAgdmFyIHBhcnNlID0gX3BhcnNlUXVlcnkgfHwgcGFyc2VRdWVyeTtcbiAgdmFyIHBhcnNlZFF1ZXJ5O1xuICB0cnkge1xuICAgIHBhcnNlZFF1ZXJ5ID0gcGFyc2UocXVlcnkgfHwgJycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBlLm1lc3NhZ2UpO1xuICAgIHBhcnNlZFF1ZXJ5ID0ge307XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIGV4dHJhUXVlcnkpIHtcbiAgICBwYXJzZWRRdWVyeVtrZXldID0gZXh0cmFRdWVyeVtrZXldO1xuICB9XG4gIHJldHVybiBwYXJzZWRRdWVyeVxufVxuXG5mdW5jdGlvbiBwYXJzZVF1ZXJ5IChxdWVyeSkge1xuICB2YXIgcmVzID0ge307XG5cbiAgcXVlcnkgPSBxdWVyeS50cmltKCkucmVwbGFjZSgvXihcXD98I3wmKS8sICcnKTtcblxuICBpZiAoIXF1ZXJ5KSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgcXVlcnkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG4gICAgdmFyIGtleSA9IGRlY29kZShwYXJ0cy5zaGlmdCgpKTtcbiAgICB2YXIgdmFsID0gcGFydHMubGVuZ3RoID4gMFxuICAgICAgPyBkZWNvZGUocGFydHMuam9pbignPScpKVxuICAgICAgOiBudWxsO1xuXG4gICAgaWYgKHJlc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc1trZXldID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXNba2V5XSkpIHtcbiAgICAgIHJlc1trZXldLnB1c2godmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW2tleV0gPSBbcmVzW2tleV0sIHZhbF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVF1ZXJ5IChvYmopIHtcbiAgdmFyIHJlcyA9IG9iaiA/IE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsID0gb2JqW2tleV07XG5cbiAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbmNvZGUoa2V5KVxuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHZhbC5mb3JFYWNoKGZ1bmN0aW9uICh2YWwyKSB7XG4gICAgICAgIGlmICh2YWwyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsMiA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwyKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcmJylcbiAgICB9XG5cbiAgICByZXR1cm4gZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodmFsKVxuICB9KS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgubGVuZ3RoID4gMDsgfSkuam9pbignJicpIDogbnVsbDtcbiAgcmV0dXJuIHJlcyA/IChcIj9cIiArIHJlcykgOiAnJ1xufVxuXG4vKiAgKi9cblxudmFyIHRyYWlsaW5nU2xhc2hSRSA9IC9cXC8/JC87XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlIChcbiAgcmVjb3JkLFxuICBsb2NhdGlvbixcbiAgcmVkaXJlY3RlZEZyb20sXG4gIHJvdXRlclxuKSB7XG4gIHZhciBzdHJpbmdpZnlRdWVyeSA9IHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5zdHJpbmdpZnlRdWVyeTtcblxuICB2YXIgcXVlcnkgPSBsb2NhdGlvbi5xdWVyeSB8fCB7fTtcbiAgdHJ5IHtcbiAgICBxdWVyeSA9IGNsb25lKHF1ZXJ5KTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcm91dGUgPSB7XG4gICAgbmFtZTogbG9jYXRpb24ubmFtZSB8fCAocmVjb3JkICYmIHJlY29yZC5uYW1lKSxcbiAgICBtZXRhOiAocmVjb3JkICYmIHJlY29yZC5tZXRhKSB8fCB7fSxcbiAgICBwYXRoOiBsb2NhdGlvbi5wYXRoIHx8ICcvJyxcbiAgICBoYXNoOiBsb2NhdGlvbi5oYXNoIHx8ICcnLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBwYXJhbXM6IGxvY2F0aW9uLnBhcmFtcyB8fCB7fSxcbiAgICBmdWxsUGF0aDogZ2V0RnVsbFBhdGgobG9jYXRpb24sIHN0cmluZ2lmeVF1ZXJ5KSxcbiAgICBtYXRjaGVkOiByZWNvcmQgPyBmb3JtYXRNYXRjaChyZWNvcmQpIDogW11cbiAgfTtcbiAgaWYgKHJlZGlyZWN0ZWRGcm9tKSB7XG4gICAgcm91dGUucmVkaXJlY3RlZEZyb20gPSBnZXRGdWxsUGF0aChyZWRpcmVjdGVkRnJvbSwgc3RyaW5naWZ5UXVlcnkpO1xuICB9XG4gIHJldHVybiBPYmplY3QuZnJlZXplKHJvdXRlKVxufVxuXG5mdW5jdGlvbiBjbG9uZSAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcChjbG9uZSlcbiAgfSBlbHNlIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgcmVzW2tleV0gPSBjbG9uZSh2YWx1ZVtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG59XG5cbi8vIHRoZSBzdGFydGluZyByb3V0ZSB0aGF0IHJlcHJlc2VudHMgdGhlIGluaXRpYWwgc3RhdGVcbnZhciBTVEFSVCA9IGNyZWF0ZVJvdXRlKG51bGwsIHtcbiAgcGF0aDogJy8nXG59KTtcblxuZnVuY3Rpb24gZm9ybWF0TWF0Y2ggKHJlY29yZCkge1xuICB2YXIgcmVzID0gW107XG4gIHdoaWxlIChyZWNvcmQpIHtcbiAgICByZXMudW5zaGlmdChyZWNvcmQpO1xuICAgIHJlY29yZCA9IHJlY29yZC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRGdWxsUGF0aCAoXG4gIHJlZixcbiAgX3N0cmluZ2lmeVF1ZXJ5XG4pIHtcbiAgdmFyIHBhdGggPSByZWYucGF0aDtcbiAgdmFyIHF1ZXJ5ID0gcmVmLnF1ZXJ5OyBpZiAoIHF1ZXJ5ID09PSB2b2lkIDAgKSBxdWVyeSA9IHt9O1xuICB2YXIgaGFzaCA9IHJlZi5oYXNoOyBpZiAoIGhhc2ggPT09IHZvaWQgMCApIGhhc2ggPSAnJztcblxuICB2YXIgc3RyaW5naWZ5ID0gX3N0cmluZ2lmeVF1ZXJ5IHx8IHN0cmluZ2lmeVF1ZXJ5O1xuICByZXR1cm4gKHBhdGggfHwgJy8nKSArIHN0cmluZ2lmeShxdWVyeSkgKyBoYXNoXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVJvdXRlIChhLCBiKSB7XG4gIGlmIChiID09PSBTVEFSVCkge1xuICAgIHJldHVybiBhID09PSBiXG4gIH0gZWxzZSBpZiAoIWIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmIChhLnBhdGggJiYgYi5wYXRoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGEucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpID09PSBiLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSAmJlxuICAgICAgYS5oYXNoID09PSBiLmhhc2ggJiZcbiAgICAgIGlzT2JqZWN0RXF1YWwoYS5xdWVyeSwgYi5xdWVyeSlcbiAgICApXG4gIH0gZWxzZSBpZiAoYS5uYW1lICYmIGIubmFtZSkge1xuICAgIHJldHVybiAoXG4gICAgICBhLm5hbWUgPT09IGIubmFtZSAmJlxuICAgICAgYS5oYXNoID09PSBiLmhhc2ggJiZcbiAgICAgIGlzT2JqZWN0RXF1YWwoYS5xdWVyeSwgYi5xdWVyeSkgJiZcbiAgICAgIGlzT2JqZWN0RXF1YWwoYS5wYXJhbXMsIGIucGFyYW1zKVxuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09iamVjdEVxdWFsIChhLCBiKSB7XG4gIGlmICggYSA9PT0gdm9pZCAwICkgYSA9IHt9O1xuICBpZiAoIGIgPT09IHZvaWQgMCApIGIgPSB7fTtcblxuICAvLyBoYW5kbGUgbnVsbCB2YWx1ZSAjMTU2NlxuICBpZiAoIWEgfHwgIWIpIHsgcmV0dXJuIGEgPT09IGIgfVxuICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG4gIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGFWYWwgPSBhW2tleV07XG4gICAgdmFyIGJWYWwgPSBiW2tleV07XG4gICAgLy8gY2hlY2sgbmVzdGVkIGVxdWFsaXR5XG4gICAgaWYgKHR5cGVvZiBhVmFsID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYlZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBpc09iamVjdEVxdWFsKGFWYWwsIGJWYWwpXG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcoYVZhbCkgPT09IFN0cmluZyhiVmFsKVxuICB9KVxufVxuXG5mdW5jdGlvbiBpc0luY2x1ZGVkUm91dGUgKGN1cnJlbnQsIHRhcmdldCkge1xuICByZXR1cm4gKFxuICAgIGN1cnJlbnQucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJy8nKS5pbmRleE9mKFxuICAgICAgdGFyZ2V0LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJylcbiAgICApID09PSAwICYmXG4gICAgKCF0YXJnZXQuaGFzaCB8fCBjdXJyZW50Lmhhc2ggPT09IHRhcmdldC5oYXNoKSAmJlxuICAgIHF1ZXJ5SW5jbHVkZXMoY3VycmVudC5xdWVyeSwgdGFyZ2V0LnF1ZXJ5KVxuICApXG59XG5cbmZ1bmN0aW9uIHF1ZXJ5SW5jbHVkZXMgKGN1cnJlbnQsIHRhcmdldCkge1xuICBmb3IgKHZhciBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgaWYgKCEoa2V5IGluIGN1cnJlbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRoIChcbiAgcmVsYXRpdmUsXG4gIGJhc2UsXG4gIGFwcGVuZFxuKSB7XG4gIHZhciBmaXJzdENoYXIgPSByZWxhdGl2ZS5jaGFyQXQoMCk7XG4gIGlmIChmaXJzdENoYXIgPT09ICcvJykge1xuICAgIHJldHVybiByZWxhdGl2ZVxuICB9XG5cbiAgaWYgKGZpcnN0Q2hhciA9PT0gJz8nIHx8IGZpcnN0Q2hhciA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGJhc2UgKyByZWxhdGl2ZVxuICB9XG5cbiAgdmFyIHN0YWNrID0gYmFzZS5zcGxpdCgnLycpO1xuXG4gIC8vIHJlbW92ZSB0cmFpbGluZyBzZWdtZW50IGlmOlxuICAvLyAtIG5vdCBhcHBlbmRpbmdcbiAgLy8gLSBhcHBlbmRpbmcgdG8gdHJhaWxpbmcgc2xhc2ggKGxhc3Qgc2VnbWVudCBpcyBlbXB0eSlcbiAgaWYgKCFhcHBlbmQgfHwgIXN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICAvLyByZXNvbHZlIHJlbGF0aXZlIHBhdGhcbiAgdmFyIHNlZ21lbnRzID0gcmVsYXRpdmUucmVwbGFjZSgvXlxcLy8sICcnKS5zcGxpdCgnLycpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICBpZiAoc2VnbWVudCA9PT0gJy4uJykge1xuICAgICAgc3RhY2sucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSAnLicpIHtcbiAgICAgIHN0YWNrLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9XG5cbiAgLy8gZW5zdXJlIGxlYWRpbmcgc2xhc2hcbiAgaWYgKHN0YWNrWzBdICE9PSAnJykge1xuICAgIHN0YWNrLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgcmV0dXJuIHN0YWNrLmpvaW4oJy8nKVxufVxuXG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIHF1ZXJ5ID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICBoYXNoID0gcGF0aC5zbGljZShoYXNoSW5kZXgpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgcXVlcnlJbmRleCA9IHBhdGguaW5kZXhPZignPycpO1xuICBpZiAocXVlcnlJbmRleCA+PSAwKSB7XG4gICAgcXVlcnkgPSBwYXRoLnNsaWNlKHF1ZXJ5SW5kZXggKyAxKTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBxdWVyeUluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFuUGF0aCAocGF0aCkge1xuICByZXR1cm4gcGF0aC5yZXBsYWNlKC9cXC9cXC8vZywgJy8nKVxufVxuXG52YXIgaXNhcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG52YXIgcGF0aFRvUmVnZXhwXzEgPSBwYXRoVG9SZWdleHA7XG52YXIgcGFyc2VfMSA9IHBhcnNlO1xudmFyIGNvbXBpbGVfMSA9IGNvbXBpbGU7XG52YXIgdG9rZW5zVG9GdW5jdGlvbl8xID0gdG9rZW5zVG9GdW5jdGlvbjtcbnZhciB0b2tlbnNUb1JlZ0V4cF8xID0gdG9rZW5zVG9SZWdFeHA7XG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJyk7XG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIGtleSA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBwYXRoID0gJyc7XG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLyc7XG4gIHZhciByZXM7XG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXTtcbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXTtcbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4O1xuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpO1xuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGg7XG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdO1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF07XG4gICAgdmFyIHByZWZpeCA9IHJlc1syXTtcbiAgICB2YXIgbmFtZSA9IHJlc1szXTtcbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XTtcbiAgICB2YXIgZ3JvdXAgPSByZXNbNV07XG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdO1xuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XTtcblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpO1xuICAgICAgcGF0aCA9ICcnO1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeDtcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJztcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXI7XG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwO1xuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleCk7XG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpO1xuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJztcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge307XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlbjtcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdO1xuICAgICAgdmFyIHNlZ21lbnQ7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSk7XG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXM7XG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKTtcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKTtcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpO1xuICAgIGtleXMgPSBbXTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDtcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZTtcbiAgdmFyIHJvdXRlID0gJyc7XG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpO1xuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSc7XG5cbiAgICAgIGtleXMucHVzaCh0b2tlbik7XG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonO1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/JztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSc7XG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpO1xuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlcjtcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/JztcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCc7XG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJztcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKTtcbiAgICBrZXlzID0gW107XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG5wYXRoVG9SZWdleHBfMS5wYXJzZSA9IHBhcnNlXzE7XG5wYXRoVG9SZWdleHBfMS5jb21waWxlID0gY29tcGlsZV8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25fMTtcbnBhdGhUb1JlZ2V4cF8xLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBfMTtcblxuLyogICovXG5cbi8vICRmbG93LWRpc2FibGUtbGluZVxudmFyIHJlZ2V4cENvbXBpbGVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIGZpbGxQYXJhbXMgKFxuICBwYXRoLFxuICBwYXJhbXMsXG4gIHJvdXRlTXNnXG4pIHtcbiAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICB0cnkge1xuICAgIHZhciBmaWxsZXIgPVxuICAgICAgcmVnZXhwQ29tcGlsZUNhY2hlW3BhdGhdIHx8XG4gICAgICAocmVnZXhwQ29tcGlsZUNhY2hlW3BhdGhdID0gcGF0aFRvUmVnZXhwXzEuY29tcGlsZShwYXRoKSk7XG5cbiAgICAvLyBGaXggIzI1MDUgcmVzb2x2aW5nIGFzdGVyaXNrIHJvdXRlcyB7IG5hbWU6ICdub3QtZm91bmQnLCBwYXJhbXM6IHsgcGF0aE1hdGNoOiAnL25vdC1mb3VuZCcgfX1cbiAgICAvLyBhbmQgZml4ICMzMTA2IHNvIHRoYXQgeW91IGNhbiB3b3JrIHdpdGggbG9jYXRpb24gZGVzY3JpcHRvciBvYmplY3QgaGF2aW5nIHBhcmFtcy5wYXRoTWF0Y2ggZXF1YWwgdG8gZW1wdHkgc3RyaW5nXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMucGF0aE1hdGNoID09PSAnc3RyaW5nJykgeyBwYXJhbXNbMF0gPSBwYXJhbXMucGF0aE1hdGNoOyB9XG5cbiAgICByZXR1cm4gZmlsbGVyKHBhcmFtcywgeyBwcmV0dHk6IHRydWUgfSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBGaXggIzMwNzIgbm8gd2FybiBpZiBgcGF0aE1hdGNoYCBpcyBzdHJpbmdcbiAgICAgIHdhcm4odHlwZW9mIHBhcmFtcy5wYXRoTWF0Y2ggPT09ICdzdHJpbmcnLCAoXCJtaXNzaW5nIHBhcmFtIGZvciBcIiArIHJvdXRlTXNnICsgXCI6IFwiICsgKGUubWVzc2FnZSkpKTtcbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH0gZmluYWxseSB7XG4gICAgLy8gZGVsZXRlIHRoZSAwIGlmIGl0IHdhcyBhZGRlZFxuICAgIGRlbGV0ZSBwYXJhbXNbMF07XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2F0aW9uIChcbiAgcmF3LFxuICBjdXJyZW50LFxuICBhcHBlbmQsXG4gIHJvdXRlclxuKSB7XG4gIHZhciBuZXh0ID0gdHlwZW9mIHJhdyA9PT0gJ3N0cmluZycgPyB7IHBhdGg6IHJhdyB9IDogcmF3O1xuICAvLyBuYW1lZCB0YXJnZXRcbiAgaWYgKG5leHQuX25vcm1hbGl6ZWQpIHtcbiAgICByZXR1cm4gbmV4dFxuICB9IGVsc2UgaWYgKG5leHQubmFtZSkge1xuICAgIG5leHQgPSBleHRlbmQoe30sIHJhdyk7XG4gICAgdmFyIHBhcmFtcyA9IG5leHQucGFyYW1zO1xuICAgIGlmIChwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG5leHQucGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgLy8gcmVsYXRpdmUgcGFyYW1zXG4gIGlmICghbmV4dC5wYXRoICYmIG5leHQucGFyYW1zICYmIGN1cnJlbnQpIHtcbiAgICBuZXh0ID0gZXh0ZW5kKHt9LCBuZXh0KTtcbiAgICBuZXh0Ll9ub3JtYWxpemVkID0gdHJ1ZTtcbiAgICB2YXIgcGFyYW1zJDEgPSBleHRlbmQoZXh0ZW5kKHt9LCBjdXJyZW50LnBhcmFtcyksIG5leHQucGFyYW1zKTtcbiAgICBpZiAoY3VycmVudC5uYW1lKSB7XG4gICAgICBuZXh0Lm5hbWUgPSBjdXJyZW50Lm5hbWU7XG4gICAgICBuZXh0LnBhcmFtcyA9IHBhcmFtcyQxO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudC5tYXRjaGVkLmxlbmd0aCkge1xuICAgICAgdmFyIHJhd1BhdGggPSBjdXJyZW50Lm1hdGNoZWRbY3VycmVudC5tYXRjaGVkLmxlbmd0aCAtIDFdLnBhdGg7XG4gICAgICBuZXh0LnBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcyQxLCAoXCJwYXRoIFwiICsgKGN1cnJlbnQucGF0aCkpKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oZmFsc2UsIFwicmVsYXRpdmUgcGFyYW1zIG5hdmlnYXRpb24gcmVxdWlyZXMgYSBjdXJyZW50IHJvdXRlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHRcbiAgfVxuXG4gIHZhciBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKG5leHQucGF0aCB8fCAnJyk7XG4gIHZhciBiYXNlUGF0aCA9IChjdXJyZW50ICYmIGN1cnJlbnQucGF0aCkgfHwgJy8nO1xuICB2YXIgcGF0aCA9IHBhcnNlZFBhdGgucGF0aFxuICAgID8gcmVzb2x2ZVBhdGgocGFyc2VkUGF0aC5wYXRoLCBiYXNlUGF0aCwgYXBwZW5kIHx8IG5leHQuYXBwZW5kKVxuICAgIDogYmFzZVBhdGg7XG5cbiAgdmFyIHF1ZXJ5ID0gcmVzb2x2ZVF1ZXJ5KFxuICAgIHBhcnNlZFBhdGgucXVlcnksXG4gICAgbmV4dC5xdWVyeSxcbiAgICByb3V0ZXIgJiYgcm91dGVyLm9wdGlvbnMucGFyc2VRdWVyeVxuICApO1xuXG4gIHZhciBoYXNoID0gbmV4dC5oYXNoIHx8IHBhcnNlZFBhdGguaGFzaDtcbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykge1xuICAgIGhhc2ggPSBcIiNcIiArIGhhc2g7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIGhhc2g6IGhhc2hcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gd29yayBhcm91bmQgd2VpcmQgZmxvdyBidWdcbnZhciB0b1R5cGVzID0gW1N0cmluZywgT2JqZWN0XTtcbnZhciBldmVudFR5cGVzID0gW1N0cmluZywgQXJyYXldO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuXG52YXIgTGluayA9IHtcbiAgbmFtZTogJ1JvdXRlckxpbmsnLFxuICBwcm9wczoge1xuICAgIHRvOiB7XG4gICAgICB0eXBlOiB0b1R5cGVzLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2EnXG4gICAgfSxcbiAgICBleGFjdDogQm9vbGVhbixcbiAgICBhcHBlbmQ6IEJvb2xlYW4sXG4gICAgcmVwbGFjZTogQm9vbGVhbixcbiAgICBhY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGV4YWN0QWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBldmVudDoge1xuICAgICAgdHlwZTogZXZlbnRUeXBlcyxcbiAgICAgIGRlZmF1bHQ6ICdjbGljaydcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcm91dGVyID0gdGhpcy4kcm91dGVyO1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy4kcm91dGU7XG4gICAgdmFyIHJlZiA9IHJvdXRlci5yZXNvbHZlKFxuICAgICAgdGhpcy50byxcbiAgICAgIGN1cnJlbnQsXG4gICAgICB0aGlzLmFwcGVuZFxuICAgICk7XG4gICAgdmFyIGxvY2F0aW9uID0gcmVmLmxvY2F0aW9uO1xuICAgIHZhciByb3V0ZSA9IHJlZi5yb3V0ZTtcbiAgICB2YXIgaHJlZiA9IHJlZi5ocmVmO1xuXG4gICAgdmFyIGNsYXNzZXMgPSB7fTtcbiAgICB2YXIgZ2xvYmFsQWN0aXZlQ2xhc3MgPSByb3V0ZXIub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MgPSByb3V0ZXIub3B0aW9ucy5saW5rRXhhY3RBY3RpdmVDbGFzcztcbiAgICAvLyBTdXBwb3J0IGdsb2JhbCBlbXB0eSBhY3RpdmUgY2xhc3NcbiAgICB2YXIgYWN0aXZlQ2xhc3NGYWxsYmFjayA9XG4gICAgICBnbG9iYWxBY3RpdmVDbGFzcyA9PSBudWxsID8gJ3JvdXRlci1saW5rLWFjdGl2ZScgOiBnbG9iYWxBY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrID1cbiAgICAgIGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgICA/ICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnXG4gICAgICAgIDogZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcztcbiAgICB2YXIgYWN0aXZlQ2xhc3MgPVxuICAgICAgdGhpcy5hY3RpdmVDbGFzcyA9PSBudWxsID8gYWN0aXZlQ2xhc3NGYWxsYmFjayA6IHRoaXMuYWN0aXZlQ2xhc3M7XG4gICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3MgPVxuICAgICAgdGhpcy5leGFjdEFjdGl2ZUNsYXNzID09IG51bGxcbiAgICAgICAgPyBleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2tcbiAgICAgICAgOiB0aGlzLmV4YWN0QWN0aXZlQ2xhc3M7XG5cbiAgICB2YXIgY29tcGFyZVRhcmdldCA9IHJvdXRlLnJlZGlyZWN0ZWRGcm9tXG4gICAgICA/IGNyZWF0ZVJvdXRlKG51bGwsIG5vcm1hbGl6ZUxvY2F0aW9uKHJvdXRlLnJlZGlyZWN0ZWRGcm9tKSwgbnVsbCwgcm91dGVyKVxuICAgICAgOiByb3V0ZTtcblxuICAgIGNsYXNzZXNbZXhhY3RBY3RpdmVDbGFzc10gPSBpc1NhbWVSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcbiAgICBjbGFzc2VzW2FjdGl2ZUNsYXNzXSA9IHRoaXMuZXhhY3RcbiAgICAgID8gY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXVxuICAgICAgOiBpc0luY2x1ZGVkUm91dGUoY3VycmVudCwgY29tcGFyZVRhcmdldCk7XG5cbiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZ3VhcmRFdmVudChlKSkge1xuICAgICAgICBpZiAodGhpcyQxLnJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXIucmVwbGFjZShsb2NhdGlvbiwgbm9vcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyLnB1c2gobG9jYXRpb24sIG5vb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBvbiA9IHsgY2xpY2s6IGd1YXJkRXZlbnQgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmV2ZW50KSkge1xuICAgICAgdGhpcy5ldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIG9uW2VdID0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblt0aGlzLmV2ZW50XSA9IGhhbmRsZXI7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB7IGNsYXNzOiBjbGFzc2VzIH07XG5cbiAgICB2YXIgc2NvcGVkU2xvdCA9XG4gICAgICAhdGhpcy4kc2NvcGVkU2xvdHMuJGhhc05vcm1hbCAmJlxuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCAmJlxuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCh7XG4gICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgIHJvdXRlOiByb3V0ZSxcbiAgICAgICAgbmF2aWdhdGU6IGhhbmRsZXIsXG4gICAgICAgIGlzQWN0aXZlOiBjbGFzc2VzW2FjdGl2ZUNsYXNzXSxcbiAgICAgICAgaXNFeGFjdEFjdGl2ZTogY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXVxuICAgICAgfSk7XG5cbiAgICBpZiAoc2NvcGVkU2xvdCkge1xuICAgICAgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzY29wZWRTbG90WzBdXG4gICAgICB9IGVsc2UgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID4gMSB8fCAhc2NvcGVkU2xvdC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAoXCJSb3V0ZXJMaW5rIHdpdGggdG89XFxcIlwiICsgKHRoaXMudG8pICsgXCJcXFwiIGlzIHRyeWluZyB0byB1c2UgYSBzY29wZWQgc2xvdCBidXQgaXQgZGlkbid0IHByb3ZpZGUgZXhhY3RseSBvbmUgY2hpbGQuIFdyYXBwaW5nIHRoZSBjb250ZW50IHdpdGggYSBzcGFuIGVsZW1lbnQuXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGVkU2xvdC5sZW5ndGggPT09IDAgPyBoKCkgOiBoKCdzcGFuJywge30sIHNjb3BlZFNsb3QpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGFnID09PSAnYScpIHtcbiAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIGRhdGEuYXR0cnMgPSB7IGhyZWY6IGhyZWYgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmluZCB0aGUgZmlyc3QgPGE+IGNoaWxkIGFuZCBhcHBseSBsaXN0ZW5lciBhbmQgaHJlZlxuICAgICAgdmFyIGEgPSBmaW5kQW5jaG9yKHRoaXMuJHNsb3RzLmRlZmF1bHQpO1xuICAgICAgaWYgKGEpIHtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgPGE+IGlzIGEgc3RhdGljIG5vZGVcbiAgICAgICAgYS5pc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICB2YXIgYURhdGEgPSAoYS5kYXRhID0gZXh0ZW5kKHt9LCBhLmRhdGEpKTtcbiAgICAgICAgYURhdGEub24gPSBhRGF0YS5vbiB8fCB7fTtcbiAgICAgICAgLy8gdHJhbnNmb3JtIGV4aXN0aW5nIGV2ZW50cyBpbiBib3RoIG9iamVjdHMgaW50byBhcnJheXMgc28gd2UgY2FuIHB1c2ggbGF0ZXJcbiAgICAgICAgZm9yICh2YXIgZXZlbnQgaW4gYURhdGEub24pIHtcbiAgICAgICAgICB2YXIgaGFuZGxlciQxID0gYURhdGEub25bZXZlbnRdO1xuICAgICAgICAgIGlmIChldmVudCBpbiBvbikge1xuICAgICAgICAgICAgYURhdGEub25bZXZlbnRdID0gQXJyYXkuaXNBcnJheShoYW5kbGVyJDEpID8gaGFuZGxlciQxIDogW2hhbmRsZXIkMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFwcGVuZCBuZXcgbGlzdGVuZXJzIGZvciByb3V0ZXItbGlua1xuICAgICAgICBmb3IgKHZhciBldmVudCQxIGluIG9uKSB7XG4gICAgICAgICAgaWYgKGV2ZW50JDEgaW4gYURhdGEub24pIHtcbiAgICAgICAgICAgIC8vIG9uW2V2ZW50XSBpcyBhbHdheXMgYSBmdW5jdGlvblxuICAgICAgICAgICAgYURhdGEub25bZXZlbnQkMV0ucHVzaChvbltldmVudCQxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50JDFdID0gaGFuZGxlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYUF0dHJzID0gKGEuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYS5kYXRhLmF0dHJzKSk7XG4gICAgICAgIGFBdHRycy5ocmVmID0gaHJlZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRvZXNuJ3QgaGF2ZSA8YT4gY2hpbGQsIGFwcGx5IGxpc3RlbmVyIHRvIHNlbGZcbiAgICAgICAgZGF0YS5vbiA9IG9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoKHRoaXMudGFnLCBkYXRhLCB0aGlzLiRzbG90cy5kZWZhdWx0KVxuICB9XG59O1xuXG5mdW5jdGlvbiBndWFyZEV2ZW50IChlKSB7XG4gIC8vIGRvbid0IHJlZGlyZWN0IHdpdGggY29udHJvbCBrZXlzXG4gIGlmIChlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUuc2hpZnRLZXkpIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2hlbiBwcmV2ZW50RGVmYXVsdCBjYWxsZWRcbiAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCBvbiByaWdodCBjbGlja1xuICBpZiAoZS5idXR0b24gIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbiAhPT0gMCkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCBpZiBgdGFyZ2V0PVwiX2JsYW5rXCJgXG4gIGlmIChlLmN1cnJlbnRUYXJnZXQgJiYgZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKTtcbiAgICBpZiAoL1xcYl9ibGFua1xcYi9pLnRlc3QodGFyZ2V0KSkgeyByZXR1cm4gfVxuICB9XG4gIC8vIHRoaXMgbWF5IGJlIGEgV2VleCBldmVudCB3aGljaCBkb2Vzbid0IGhhdmUgdGhpcyBtZXRob2RcbiAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZmluZEFuY2hvciAoY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuKSB7XG4gICAgdmFyIGNoaWxkO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAnYScpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgICBpZiAoY2hpbGQuY2hpbGRyZW4gJiYgKGNoaWxkID0gZmluZEFuY2hvcihjaGlsZC5jaGlsZHJlbikpKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgX1Z1ZTtcblxuZnVuY3Rpb24gaW5zdGFsbCAoVnVlKSB7XG4gIGlmIChpbnN0YWxsLmluc3RhbGxlZCAmJiBfVnVlID09PSBWdWUpIHsgcmV0dXJuIH1cbiAgaW5zdGFsbC5pbnN0YWxsZWQgPSB0cnVlO1xuXG4gIF9WdWUgPSBWdWU7XG5cbiAgdmFyIGlzRGVmID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYgIT09IHVuZGVmaW5lZDsgfTtcblxuICB2YXIgcmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uICh2bSwgY2FsbFZhbCkge1xuICAgIHZhciBpID0gdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICAgIGlmIChpc0RlZihpKSAmJiBpc0RlZihpID0gaS5kYXRhKSAmJiBpc0RlZihpID0gaS5yZWdpc3RlclJvdXRlSW5zdGFuY2UpKSB7XG4gICAgICBpKHZtLCBjYWxsVmFsKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLm1peGluKHtcbiAgICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSAoKSB7XG4gICAgICBpZiAoaXNEZWYodGhpcy4kb3B0aW9ucy5yb3V0ZXIpKSB7XG4gICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yb3V0ZXIgPSB0aGlzLiRvcHRpb25zLnJvdXRlcjtcbiAgICAgICAgdGhpcy5fcm91dGVyLmluaXQodGhpcyk7XG4gICAgICAgIFZ1ZS51dGlsLmRlZmluZVJlYWN0aXZlKHRoaXMsICdfcm91dGUnLCB0aGlzLl9yb3V0ZXIuaGlzdG9yeS5jdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSAodGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5fcm91dGVyUm9vdCkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgdGhpcyk7XG4gICAgfSxcbiAgICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGVyJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlciB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHJvdXRlJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlIH1cbiAgfSk7XG5cbiAgVnVlLmNvbXBvbmVudCgnUm91dGVyVmlldycsIFZpZXcpO1xuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJMaW5rJywgTGluayk7XG5cbiAgdmFyIHN0cmF0cyA9IFZ1ZS5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuICAvLyB1c2UgdGhlIHNhbWUgaG9vayBtZXJnaW5nIHN0cmF0ZWd5IGZvciByb3V0ZSBob29rc1xuICBzdHJhdHMuYmVmb3JlUm91dGVFbnRlciA9IHN0cmF0cy5iZWZvcmVSb3V0ZUxlYXZlID0gc3RyYXRzLmJlZm9yZVJvdXRlVXBkYXRlID0gc3RyYXRzLmNyZWF0ZWQ7XG59XG5cbi8qICAqL1xuXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZU1hcCAoXG4gIHJvdXRlcyxcbiAgb2xkUGF0aExpc3QsXG4gIG9sZFBhdGhNYXAsXG4gIG9sZE5hbWVNYXBcbikge1xuICAvLyB0aGUgcGF0aCBsaXN0IGlzIHVzZWQgdG8gY29udHJvbCBwYXRoIG1hdGNoaW5nIHByaW9yaXR5XG4gIHZhciBwYXRoTGlzdCA9IG9sZFBhdGhMaXN0IHx8IFtdO1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHBhdGhNYXAgPSBvbGRQYXRoTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgbmFtZU1hcCA9IG9sZE5hbWVNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGUpIHtcbiAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcm91dGUpO1xuICB9KTtcblxuICAvLyBlbnN1cmUgd2lsZGNhcmQgcm91dGVzIGFyZSBhbHdheXMgYXQgdGhlIGVuZFxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdGhMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChwYXRoTGlzdFtpXSA9PT0gJyonKSB7XG4gICAgICBwYXRoTGlzdC5wdXNoKHBhdGhMaXN0LnNwbGljZShpLCAxKVswXSk7XG4gICAgICBsLS07XG4gICAgICBpLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgLy8gd2FybiBpZiByb3V0ZXMgZG8gbm90IGluY2x1ZGUgbGVhZGluZyBzbGFzaGVzXG4gICAgdmFyIGZvdW5kID0gcGF0aExpc3RcbiAgICAvLyBjaGVjayBmb3IgbWlzc2luZyBsZWFkaW5nIHNsYXNoXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYXRoKSB7IHJldHVybiBwYXRoICYmIHBhdGguY2hhckF0KDApICE9PSAnKicgJiYgcGF0aC5jaGFyQXQoMCkgIT09ICcvJzsgfSk7XG5cbiAgICBpZiAoZm91bmQubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHBhdGhOYW1lcyA9IGZvdW5kLm1hcChmdW5jdGlvbiAocGF0aCkgeyByZXR1cm4gKFwiLSBcIiArIHBhdGgpOyB9KS5qb2luKCdcXG4nKTtcbiAgICAgIHdhcm4oZmFsc2UsIChcIk5vbi1uZXN0ZWQgcm91dGVzIG11c3QgaW5jbHVkZSBhIGxlYWRpbmcgc2xhc2ggY2hhcmFjdGVyLiBGaXggdGhlIGZvbGxvd2luZyByb3V0ZXM6IFxcblwiICsgcGF0aE5hbWVzKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoTGlzdDogcGF0aExpc3QsXG4gICAgcGF0aE1hcDogcGF0aE1hcCxcbiAgICBuYW1lTWFwOiBuYW1lTWFwXG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkUm91dGVSZWNvcmQgKFxuICBwYXRoTGlzdCxcbiAgcGF0aE1hcCxcbiAgbmFtZU1hcCxcbiAgcm91dGUsXG4gIHBhcmVudCxcbiAgbWF0Y2hBc1xuKSB7XG4gIHZhciBwYXRoID0gcm91dGUucGF0aDtcbiAgdmFyIG5hbWUgPSByb3V0ZS5uYW1lO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChwYXRoICE9IG51bGwsIFwiXFxcInBhdGhcXFwiIGlzIHJlcXVpcmVkIGluIGEgcm91dGUgY29uZmlndXJhdGlvbi5cIik7XG4gICAgYXNzZXJ0KFxuICAgICAgdHlwZW9mIHJvdXRlLmNvbXBvbmVudCAhPT0gJ3N0cmluZycsXG4gICAgICBcInJvdXRlIGNvbmZpZyBcXFwiY29tcG9uZW50XFxcIiBmb3IgcGF0aDogXCIgKyAoU3RyaW5nKFxuICAgICAgICBwYXRoIHx8IG5hbWVcbiAgICAgICkpICsgXCIgY2Fubm90IGJlIGEgXCIgKyBcInN0cmluZyBpZC4gVXNlIGFuIGFjdHVhbCBjb21wb25lbnQgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cblxuICB2YXIgcGF0aFRvUmVnZXhwT3B0aW9ucyA9XG4gICAgcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoLCBwYXJlbnQsIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc3RyaWN0KTtcblxuICBpZiAodHlwZW9mIHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09ICdib29sZWFuJykge1xuICAgIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc2Vuc2l0aXZlID0gcm91dGUuY2FzZVNlbnNpdGl2ZTtcbiAgfVxuXG4gIHZhciByZWNvcmQgPSB7XG4gICAgcGF0aDogbm9ybWFsaXplZFBhdGgsXG4gICAgcmVnZXg6IGNvbXBpbGVSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRQYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSxcbiAgICBjb21wb25lbnRzOiByb3V0ZS5jb21wb25lbnRzIHx8IHsgZGVmYXVsdDogcm91dGUuY29tcG9uZW50IH0sXG4gICAgaW5zdGFuY2VzOiB7fSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIG1hdGNoQXM6IG1hdGNoQXMsXG4gICAgcmVkaXJlY3Q6IHJvdXRlLnJlZGlyZWN0LFxuICAgIGJlZm9yZUVudGVyOiByb3V0ZS5iZWZvcmVFbnRlcixcbiAgICBtZXRhOiByb3V0ZS5tZXRhIHx8IHt9LFxuICAgIHByb3BzOlxuICAgICAgcm91dGUucHJvcHMgPT0gbnVsbFxuICAgICAgICA/IHt9XG4gICAgICAgIDogcm91dGUuY29tcG9uZW50c1xuICAgICAgICAgID8gcm91dGUucHJvcHNcbiAgICAgICAgICA6IHsgZGVmYXVsdDogcm91dGUucHJvcHMgfVxuICB9O1xuXG4gIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgIC8vIFdhcm4gaWYgcm91dGUgaXMgbmFtZWQsIGRvZXMgbm90IHJlZGlyZWN0IGFuZCBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLlxuICAgIC8vIElmIHVzZXJzIG5hdmlnYXRlIHRvIHRoaXMgcm91dGUgYnkgbmFtZSwgdGhlIGRlZmF1bHQgY2hpbGQgd2lsbFxuICAgIC8vIG5vdCBiZSByZW5kZXJlZCAoR0ggSXNzdWUgIzYyOSlcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKFxuICAgICAgICByb3V0ZS5uYW1lICYmXG4gICAgICAgICFyb3V0ZS5yZWRpcmVjdCAmJlxuICAgICAgICByb3V0ZS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gL15cXC8/JC8udGVzdChjaGlsZC5wYXRoKTsgfSlcbiAgICAgICkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiTmFtZWQgUm91dGUgJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuIFwiICtcbiAgICAgICAgICAgIFwiV2hlbiBuYXZpZ2F0aW5nIHRvIHRoaXMgbmFtZWQgcm91dGUgKDp0bz1cXFwie25hbWU6ICdcIiArIChyb3V0ZS5uYW1lKSArIFwiJ1xcXCIpLCBcIiArXG4gICAgICAgICAgICBcInRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBSZW1vdmUgdGhlIG5hbWUgZnJvbSBcIiArXG4gICAgICAgICAgICBcInRoaXMgcm91dGUgYW5kIHVzZSB0aGUgbmFtZSBvZiB0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSBmb3IgbmFtZWQgXCIgK1xuICAgICAgICAgICAgXCJsaW5rcyBpbnN0ZWFkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRNYXRjaEFzID0gbWF0Y2hBc1xuICAgICAgICA/IGNsZWFuUGF0aCgobWF0Y2hBcyArIFwiL1wiICsgKGNoaWxkLnBhdGgpKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgY2hpbGQsIHJlY29yZCwgY2hpbGRNYXRjaEFzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghcGF0aE1hcFtyZWNvcmQucGF0aF0pIHtcbiAgICBwYXRoTGlzdC5wdXNoKHJlY29yZC5wYXRoKTtcbiAgICBwYXRoTWFwW3JlY29yZC5wYXRoXSA9IHJlY29yZDtcbiAgfVxuXG4gIGlmIChyb3V0ZS5hbGlhcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KHJvdXRlLmFsaWFzKSA/IHJvdXRlLmFsaWFzIDogW3JvdXRlLmFsaWFzXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsaWFzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBhbGlhcyA9IGFsaWFzZXNbaV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhbGlhcyA9PT0gcGF0aCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIChcIkZvdW5kIGFuIGFsaWFzIHdpdGggdGhlIHNhbWUgdmFsdWUgYXMgdGhlIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCIuIFlvdSBoYXZlIHRvIHJlbW92ZSB0aGF0IGFsaWFzLiBJdCB3aWxsIGJlIGlnbm9yZWQgaW4gZGV2ZWxvcG1lbnQuXCIpXG4gICAgICAgICk7XG4gICAgICAgIC8vIHNraXAgaW4gZGV2IHRvIG1ha2UgaXQgd29ya1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgYWxpYXNSb3V0ZSA9IHtcbiAgICAgICAgcGF0aDogYWxpYXMsXG4gICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlblxuICAgICAgfTtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKFxuICAgICAgICBwYXRoTGlzdCxcbiAgICAgICAgcGF0aE1hcCxcbiAgICAgICAgbmFtZU1hcCxcbiAgICAgICAgYWxpYXNSb3V0ZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICByZWNvcmQucGF0aCB8fCAnLycgLy8gbWF0Y2hBc1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmICghbmFtZU1hcFtuYW1lXSkge1xuICAgICAgbmFtZU1hcFtuYW1lXSA9IHJlY29yZDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1hdGNoQXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIkR1cGxpY2F0ZSBuYW1lZCByb3V0ZXMgZGVmaW5pdGlvbjogXCIgK1xuICAgICAgICAgIFwieyBuYW1lOiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBwYXRoOiBcXFwiXCIgKyAocmVjb3JkLnBhdGgpICsgXCJcXFwiIH1cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGlsZVJvdXRlUmVnZXggKFxuICBwYXRoLFxuICBwYXRoVG9SZWdleHBPcHRpb25zXG4pIHtcbiAgdmFyIHJlZ2V4ID0gcGF0aFRvUmVnZXhwXzEocGF0aCwgW10sIHBhdGhUb1JlZ2V4cE9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZWdleC5rZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgd2FybihcbiAgICAgICAgIWtleXNba2V5Lm5hbWVdLFxuICAgICAgICAoXCJEdXBsaWNhdGUgcGFyYW0ga2V5cyBpbiByb3V0ZSB3aXRoIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCJcIilcbiAgICAgICk7XG4gICAgICBrZXlzW2tleS5uYW1lXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlZ2V4XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGggKFxuICBwYXRoLFxuICBwYXJlbnQsXG4gIHN0cmljdFxuKSB7XG4gIGlmICghc3RyaWN0KSB7IHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7IH1cbiAgaWYgKHBhdGhbMF0gPT09ICcvJykgeyByZXR1cm4gcGF0aCB9XG4gIGlmIChwYXJlbnQgPT0gbnVsbCkgeyByZXR1cm4gcGF0aCB9XG4gIHJldHVybiBjbGVhblBhdGgoKChwYXJlbnQucGF0aCkgKyBcIi9cIiArIHBhdGgpKVxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXIgKFxuICByb3V0ZXMsXG4gIHJvdXRlclxuKSB7XG4gIHZhciByZWYgPSBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMpO1xuICB2YXIgcGF0aExpc3QgPSByZWYucGF0aExpc3Q7XG4gIHZhciBwYXRoTWFwID0gcmVmLnBhdGhNYXA7XG4gIHZhciBuYW1lTWFwID0gcmVmLm5hbWVNYXA7XG5cbiAgZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgICBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hdGNoIChcbiAgICByYXcsXG4gICAgY3VycmVudFJvdXRlLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZUxvY2F0aW9uKHJhdywgY3VycmVudFJvdXRlLCBmYWxzZSwgcm91dGVyKTtcbiAgICB2YXIgbmFtZSA9IGxvY2F0aW9uLm5hbWU7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFyIHJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKHJlY29yZCwgKFwiUm91dGUgd2l0aCBuYW1lICdcIiArIG5hbWUgKyBcIicgZG9lcyBub3QgZXhpc3RcIikpO1xuICAgICAgfVxuICAgICAgaWYgKCFyZWNvcmQpIHsgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbikgfVxuICAgICAgdmFyIHBhcmFtTmFtZXMgPSByZWNvcmQucmVnZXgua2V5c1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFrZXkub3B0aW9uYWw7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5Lm5hbWU7IH0pO1xuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uLnBhcmFtcyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50Um91dGUgJiYgdHlwZW9mIGN1cnJlbnRSb3V0ZS5wYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50Um91dGUucGFyYW1zKSB7XG4gICAgICAgICAgaWYgKCEoa2V5IGluIGxvY2F0aW9uLnBhcmFtcykgJiYgcGFyYW1OYW1lcy5pbmRleE9mKGtleSkgPiAtMSkge1xuICAgICAgICAgICAgbG9jYXRpb24ucGFyYW1zW2tleV0gPSBjdXJyZW50Um91dGUucGFyYW1zW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxvY2F0aW9uLnBhdGggPSBmaWxsUGFyYW1zKHJlY29yZC5wYXRoLCBsb2NhdGlvbi5wYXJhbXMsIChcIm5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGgpIHtcbiAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhMaXN0W2ldO1xuICAgICAgICB2YXIgcmVjb3JkJDEgPSBwYXRoTWFwW3BhdGhdO1xuICAgICAgICBpZiAobWF0Y2hSb3V0ZShyZWNvcmQkMS5yZWdleCwgbG9jYXRpb24ucGF0aCwgbG9jYXRpb24ucGFyYW1zKSkge1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlUm91dGUocmVjb3JkJDEsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBubyBtYXRjaFxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiByZWRpcmVjdCAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uXG4gICkge1xuICAgIHZhciBvcmlnaW5hbFJlZGlyZWN0ID0gcmVjb3JkLnJlZGlyZWN0O1xuICAgIHZhciByZWRpcmVjdCA9IHR5cGVvZiBvcmlnaW5hbFJlZGlyZWN0ID09PSAnZnVuY3Rpb24nXG4gICAgICA/IG9yaWdpbmFsUmVkaXJlY3QoY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgbnVsbCwgcm91dGVyKSlcbiAgICAgIDogb3JpZ2luYWxSZWRpcmVjdDtcblxuICAgIGlmICh0eXBlb2YgcmVkaXJlY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZWRpcmVjdCA9IHsgcGF0aDogcmVkaXJlY3QgfTtcbiAgICB9XG5cbiAgICBpZiAoIXJlZGlyZWN0IHx8IHR5cGVvZiByZWRpcmVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgICB9XG5cbiAgICB2YXIgcmUgPSByZWRpcmVjdDtcbiAgICB2YXIgbmFtZSA9IHJlLm5hbWU7XG4gICAgdmFyIHBhdGggPSByZS5wYXRoO1xuICAgIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5O1xuICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGFyYW1zID0gbG9jYXRpb24ucGFyYW1zO1xuICAgIHF1ZXJ5ID0gcmUuaGFzT3duUHJvcGVydHkoJ3F1ZXJ5JykgPyByZS5xdWVyeSA6IHF1ZXJ5O1xuICAgIGhhc2ggPSByZS5oYXNPd25Qcm9wZXJ0eSgnaGFzaCcpID8gcmUuaGFzaCA6IGhhc2g7XG4gICAgcGFyYW1zID0gcmUuaGFzT3duUHJvcGVydHkoJ3BhcmFtcycpID8gcmUucGFyYW1zIDogcGFyYW1zO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIC8vIHJlc29sdmVkIG5hbWVkIGRpcmVjdFxuICAgICAgdmFyIHRhcmdldFJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQodGFyZ2V0UmVjb3JkLCAoXCJyZWRpcmVjdCBmYWlsZWQ6IG5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYXNoOiBoYXNoLFxuICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgfSwgdW5kZWZpbmVkLCBsb2NhdGlvbilcbiAgICB9IGVsc2UgaWYgKHBhdGgpIHtcbiAgICAgIC8vIDEuIHJlc29sdmUgcmVsYXRpdmUgcmVkaXJlY3RcbiAgICAgIHZhciByYXdQYXRoID0gcmVzb2x2ZVJlY29yZFBhdGgocGF0aCwgcmVjb3JkKTtcbiAgICAgIC8vIDIuIHJlc29sdmUgcGFyYW1zXG4gICAgICB2YXIgcmVzb2x2ZWRQYXRoID0gZmlsbFBhcmFtcyhyYXdQYXRoLCBwYXJhbXMsIChcInJlZGlyZWN0IHJvdXRlIHdpdGggcGF0aCBcXFwiXCIgKyByYXdQYXRoICsgXCJcXFwiXCIpKTtcbiAgICAgIC8vIDMuIHJlbWF0Y2ggd2l0aCBleGlzdGluZyBxdWVyeSBhbmQgaGFzaFxuICAgICAgcmV0dXJuIG1hdGNoKHtcbiAgICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgICAgIHBhdGg6IHJlc29sdmVkUGF0aCxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYXNoOiBoYXNoXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKGZhbHNlLCAoXCJpbnZhbGlkIHJlZGlyZWN0IG9wdGlvbjogXCIgKyAoSlNPTi5zdHJpbmdpZnkocmVkaXJlY3QpKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhbGlhcyAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIG1hdGNoQXNcbiAgKSB7XG4gICAgdmFyIGFsaWFzZWRQYXRoID0gZmlsbFBhcmFtcyhtYXRjaEFzLCBsb2NhdGlvbi5wYXJhbXMsIChcImFsaWFzZWQgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIG1hdGNoQXMgKyBcIlxcXCJcIikpO1xuICAgIHZhciBhbGlhc2VkTWF0Y2ggPSBtYXRjaCh7XG4gICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgIHBhdGg6IGFsaWFzZWRQYXRoXG4gICAgfSk7XG4gICAgaWYgKGFsaWFzZWRNYXRjaCkge1xuICAgICAgdmFyIG1hdGNoZWQgPSBhbGlhc2VkTWF0Y2gubWF0Y2hlZDtcbiAgICAgIHZhciBhbGlhc2VkUmVjb3JkID0gbWF0Y2hlZFttYXRjaGVkLmxlbmd0aCAtIDFdO1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0gYWxpYXNlZE1hdGNoLnBhcmFtcztcbiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUoYWxpYXNlZFJlY29yZCwgbG9jYXRpb24pXG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlUm91dGUgKFxuICAgIHJlY29yZCxcbiAgICBsb2NhdGlvbixcbiAgICByZWRpcmVjdGVkRnJvbVxuICApIHtcbiAgICBpZiAocmVjb3JkICYmIHJlY29yZC5yZWRpcmVjdCkge1xuICAgICAgcmV0dXJuIHJlZGlyZWN0KHJlY29yZCwgcmVkaXJlY3RlZEZyb20gfHwgbG9jYXRpb24pXG4gICAgfVxuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLm1hdGNoQXMpIHtcbiAgICAgIHJldHVybiBhbGlhcyhyZWNvcmQsIGxvY2F0aW9uLCByZWNvcmQubWF0Y2hBcylcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tLCByb3V0ZXIpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1hdGNoOiBtYXRjaCxcbiAgICBhZGRSb3V0ZXM6IGFkZFJvdXRlc1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGUgKFxuICByZWdleCxcbiAgcGF0aCxcbiAgcGFyYW1zXG4pIHtcbiAgdmFyIG0gPSBwYXRoLm1hdGNoKHJlZ2V4KTtcblxuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBtLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGtleSA9IHJlZ2V4LmtleXNbaSAtIDFdO1xuICAgIHZhciB2YWwgPSB0eXBlb2YgbVtpXSA9PT0gJ3N0cmluZycgPyBkZWNvZGVVUklDb21wb25lbnQobVtpXSkgOiBtW2ldO1xuICAgIGlmIChrZXkpIHtcbiAgICAgIC8vIEZpeCAjMTk5NDogdXNpbmcgKiB3aXRoIHByb3BzOiB0cnVlIGdlbmVyYXRlcyBhIHBhcmFtIG5hbWVkIDBcbiAgICAgIHBhcmFtc1trZXkubmFtZSB8fCAncGF0aE1hdGNoJ10gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVJlY29yZFBhdGggKHBhdGgsIHJlY29yZCkge1xuICByZXR1cm4gcmVzb2x2ZVBhdGgocGF0aCwgcmVjb3JkLnBhcmVudCA/IHJlY29yZC5wYXJlbnQucGF0aCA6ICcvJywgdHJ1ZSlcbn1cblxuLyogICovXG5cbi8vIHVzZSBVc2VyIFRpbWluZyBhcGkgKGlmIHByZXNlbnQpIGZvciBtb3JlIGFjY3VyYXRlIGtleSBwcmVjaXNpb25cbnZhciBUaW1lID1cbiAgaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93XG4gICAgPyB3aW5kb3cucGVyZm9ybWFuY2VcbiAgICA6IERhdGU7XG5cbmZ1bmN0aW9uIGdlblN0YXRlS2V5ICgpIHtcbiAgcmV0dXJuIFRpbWUubm93KCkudG9GaXhlZCgzKVxufVxuXG52YXIgX2tleSA9IGdlblN0YXRlS2V5KCk7XG5cbmZ1bmN0aW9uIGdldFN0YXRlS2V5ICgpIHtcbiAgcmV0dXJuIF9rZXlcbn1cblxuZnVuY3Rpb24gc2V0U3RhdGVLZXkgKGtleSkge1xuICByZXR1cm4gKF9rZXkgPSBrZXkpXG59XG5cbi8qICAqL1xuXG52YXIgcG9zaXRpb25TdG9yZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIHNldHVwU2Nyb2xsICgpIHtcbiAgLy8gRml4IGZvciAjMTU4NSBmb3IgRmlyZWZveFxuICAvLyBGaXggZm9yICMyMTk1IEFkZCBvcHRpb25hbCB0aGlyZCBhdHRyaWJ1dGUgdG8gd29ya2Fyb3VuZCBhIGJ1ZyBpbiBzYWZhcmkgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4MjY3OFxuICAvLyBGaXggZm9yICMyNzc0IFN1cHBvcnQgZm9yIGFwcHMgbG9hZGVkIGZyb20gV2luZG93cyBmaWxlIHNoYXJlcyBub3QgbWFwcGVkIHRvIG5ldHdvcmsgZHJpdmVzOiByZXBsYWNlZCBsb2NhdGlvbi5vcmlnaW4gd2l0aFxuICAvLyB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RcbiAgLy8gbG9jYXRpb24uaG9zdCBjb250YWlucyB0aGUgcG9ydCBhbmQgbG9jYXRpb24uaG9zdG5hbWUgZG9lc24ndFxuICB2YXIgcHJvdG9jb2xBbmRQYXRoID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICB2YXIgYWJzb2x1dGVQYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZShwcm90b2NvbEFuZFBhdGgsICcnKTtcbiAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXJcbiAgdmFyIHN0YXRlQ29weSA9IGV4dGVuZCh7fSwgd2luZG93Lmhpc3Rvcnkuc3RhdGUpO1xuICBzdGF0ZUNvcHkua2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHN0YXRlQ29weSwgJycsIGFic29sdXRlUGF0aCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gICAgaWYgKGUuc3RhdGUgJiYgZS5zdGF0ZS5rZXkpIHtcbiAgICAgIHNldFN0YXRlS2V5KGUuc3RhdGUua2V5KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTY3JvbGwgKFxuICByb3V0ZXIsXG4gIHRvLFxuICBmcm9tLFxuICBpc1BvcFxuKSB7XG4gIGlmICghcm91dGVyLmFwcCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJlaGF2aW9yID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gIGlmICghYmVoYXZpb3IpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiZWhhdmlvciA9PT0gJ2Z1bmN0aW9uJywgXCJzY3JvbGxCZWhhdmlvciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICAvLyB3YWl0IHVudGlsIHJlLXJlbmRlciBmaW5pc2hlcyBiZWZvcmUgc2Nyb2xsaW5nXG4gIHJvdXRlci5hcHAuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIHZhciBzaG91bGRTY3JvbGwgPSBiZWhhdmlvci5jYWxsKFxuICAgICAgcm91dGVyLFxuICAgICAgdG8sXG4gICAgICBmcm9tLFxuICAgICAgaXNQb3AgPyBwb3NpdGlvbiA6IG51bGxcbiAgICApO1xuXG4gICAgaWYgKCFzaG91bGRTY3JvbGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2hvdWxkU2Nyb2xsLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNob3VsZFNjcm9sbFxuICAgICAgICAudGhlbihmdW5jdGlvbiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgc2Nyb2xsVG9Qb3NpdGlvbigoc2hvdWxkU2Nyb2xsKSwgcG9zaXRpb24pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY3JvbGxUb1Bvc2l0aW9uKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbiAoKSB7XG4gIHZhciBrZXkgPSBnZXRTdGF0ZUtleSgpO1xuICBpZiAoa2V5KSB7XG4gICAgcG9zaXRpb25TdG9yZVtrZXldID0ge1xuICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbiAoKSB7XG4gIHZhciBrZXkgPSBnZXRTdGF0ZUtleSgpO1xuICBpZiAoa2V5KSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uU3RvcmVba2V5XVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbiAoZWwsIG9mZnNldCkge1xuICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBkb2NSZWN0ID0gZG9jRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB4OiBlbFJlY3QubGVmdCAtIGRvY1JlY3QubGVmdCAtIG9mZnNldC54LFxuICAgIHk6IGVsUmVjdC50b3AgLSBkb2NSZWN0LnRvcCAtIG9mZnNldC55XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZFBvc2l0aW9uIChvYmopIHtcbiAgcmV0dXJuIGlzTnVtYmVyKG9iai54KSB8fCBpc051bWJlcihvYmoueSlcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgIHk6IGlzTnVtYmVyKG9iai55KSA/IG9iai55IDogd2luZG93LnBhZ2VZT2Zmc2V0XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplT2Zmc2V0IChvYmopIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBpc051bWJlcihvYmoueCkgPyBvYmoueCA6IDAsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiAwXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIgKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnbnVtYmVyJ1xufVxuXG52YXIgaGFzaFN0YXJ0c1dpdGhOdW1iZXJSRSA9IC9eI1xcZC87XG5cbmZ1bmN0aW9uIHNjcm9sbFRvUG9zaXRpb24gKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pIHtcbiAgdmFyIGlzT2JqZWN0ID0gdHlwZW9mIHNob3VsZFNjcm9sbCA9PT0gJ29iamVjdCc7XG4gIGlmIChpc09iamVjdCAmJiB0eXBlb2Ygc2hvdWxkU2Nyb2xsLnNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIC8vIGdldEVsZW1lbnRCeUlkIHdvdWxkIHN0aWxsIGZhaWwgaWYgdGhlIHNlbGVjdG9yIGNvbnRhaW5zIGEgbW9yZSBjb21wbGljYXRlZCBxdWVyeSBsaWtlICNtYWluW2RhdGEtYXR0cl1cbiAgICAvLyBidXQgYXQgdGhlIHNhbWUgdGltZSwgaXQgZG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgdG8gc2VsZWN0IGFuIGVsZW1lbnQgd2l0aCBhbiBpZCBhbmQgYW4gZXh0cmEgc2VsZWN0b3JcbiAgICB2YXIgZWwgPSBoYXNoU3RhcnRzV2l0aE51bWJlclJFLnRlc3Qoc2hvdWxkU2Nyb2xsLnNlbGVjdG9yKSAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2hvdWxkU2Nyb2xsLnNlbGVjdG9yLnNsaWNlKDEpKSAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzaG91bGRTY3JvbGwuc2VsZWN0b3IpO1xuXG4gICAgaWYgKGVsKSB7XG4gICAgICB2YXIgb2Zmc2V0ID1cbiAgICAgICAgc2hvdWxkU2Nyb2xsLm9mZnNldCAmJiB0eXBlb2Ygc2hvdWxkU2Nyb2xsLm9mZnNldCA9PT0gJ29iamVjdCdcbiAgICAgICAgICA/IHNob3VsZFNjcm9sbC5vZmZzZXRcbiAgICAgICAgICA6IHt9O1xuICAgICAgb2Zmc2V0ID0gbm9ybWFsaXplT2Zmc2V0KG9mZnNldCk7XG4gICAgICBwb3NpdGlvbiA9IGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGlzVmFsaWRQb3NpdGlvbihzaG91bGRTY3JvbGwpKSB7XG4gICAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0ICYmIGlzVmFsaWRQb3NpdGlvbihzaG91bGRTY3JvbGwpKSB7XG4gICAgcG9zaXRpb24gPSBub3JtYWxpemVQb3NpdGlvbihzaG91bGRTY3JvbGwpO1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uKSB7XG4gICAgd2luZG93LnNjcm9sbFRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgc3VwcG9ydHNQdXNoU3RhdGUgPVxuICBpbkJyb3dzZXIgJiZcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICAgIGlmIChcbiAgICAgICh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJlxuICAgICAgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJlxuICAgICAgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmXG4gICAgICB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3RvcnlcbiAgfSkoKTtcblxuZnVuY3Rpb24gcHVzaFN0YXRlICh1cmwsIHJlcGxhY2UpIHtcbiAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gIC8vIHRyeS4uLmNhdGNoIHRoZSBwdXNoU3RhdGUgY2FsbCB0byBnZXQgYXJvdW5kIFNhZmFyaVxuICAvLyBET00gRXhjZXB0aW9uIDE4IHdoZXJlIGl0IGxpbWl0cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzXG4gIHZhciBoaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHRyeSB7XG4gICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgIC8vIHByZXNlcnZlIGV4aXN0aW5nIGhpc3Rvcnkgc3RhdGUgYXMgaXQgY291bGQgYmUgb3ZlcnJpZGVuIGJ5IHRoZSB1c2VyXG4gICAgICB2YXIgc3RhdGVDb3B5ID0gZXh0ZW5kKHt9LCBoaXN0b3J5LnN0YXRlKTtcbiAgICAgIHN0YXRlQ29weS5rZXkgPSBnZXRTdGF0ZUtleSgpO1xuICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGVDb3B5LCAnJywgdXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IHNldFN0YXRlS2V5KGdlblN0YXRlS2V5KCkpIH0sICcnLCB1cmwpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbltyZXBsYWNlID8gJ3JlcGxhY2UnIDogJ2Fzc2lnbiddKHVybCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZVN0YXRlICh1cmwpIHtcbiAgcHVzaFN0YXRlKHVybCwgdHJ1ZSk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBydW5RdWV1ZSAocXVldWUsIGZuLCBjYikge1xuICB2YXIgc3RlcCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIGlmIChpbmRleCA+PSBxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNiKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChxdWV1ZVtpbmRleF0pIHtcbiAgICAgICAgZm4ocXVldWVbaW5kZXhdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAoaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHN0ZXAoMCk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzIChtYXRjaGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIG5leHQpIHtcbiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTtcbiAgICB2YXIgcGVuZGluZyA9IDA7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZ1bmN0aW9uIChkZWYsIF8sIG1hdGNoLCBrZXkpIHtcbiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCxcbiAgICAgIC8vIGFzc3VtZSBpdCdzIGFuIGFzeW5jIGNvbXBvbmVudCByZXNvbHZlIGZ1bmN0aW9uLlxuICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBWdWUncyBkZWZhdWx0IGFzeW5jIHJlc29sdmluZyBtZWNoYW5pc20gYmVjYXVzZVxuICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW5cbiAgICAgIC8vIHJlc29sdmVkLlxuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZGVmLmNpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhhc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgcGVuZGluZysrO1xuXG4gICAgICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzb2x2ZWREZWYpIHtcbiAgICAgICAgICBpZiAoaXNFU01vZHVsZShyZXNvbHZlZERlZikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWYuZGVmYXVsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZVxuICAgICAgICAgIGRlZi5yZXNvbHZlZCA9IHR5cGVvZiByZXNvbHZlZERlZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyByZXNvbHZlZERlZlxuICAgICAgICAgICAgOiBfVnVlLmV4dGVuZChyZXNvbHZlZERlZik7XG4gICAgICAgICAgbWF0Y2guY29tcG9uZW50c1trZXldID0gcmVzb2x2ZWREZWY7XG4gICAgICAgICAgcGVuZGluZy0tO1xuICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQgXCIgKyBrZXkgKyBcIjogXCIgKyByZWFzb247XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gaXNFcnJvcihyZWFzb24pXG4gICAgICAgICAgICAgID8gcmVhc29uXG4gICAgICAgICAgICAgIDogbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gZGVmKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuM1xuICAgICAgICAgICAgdmFyIGNvbXAgPSByZXMuY29tcG9uZW50O1xuICAgICAgICAgICAgaWYgKGNvbXAgJiYgdHlwZW9mIGNvbXAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjb21wLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghaGFzQXN5bmMpIHsgbmV4dCgpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcENvbXBvbmVudHMgKFxuICBtYXRjaGVkLFxuICBmblxuKSB7XG4gIHJldHVybiBmbGF0dGVuKG1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKFxuICAgICAgbS5jb21wb25lbnRzW2tleV0sXG4gICAgICBtLmluc3RhbmNlc1trZXldLFxuICAgICAgbSwga2V5XG4gICAgKTsgfSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4gKGFycikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZSAob2JqKSB7XG4gIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbn1cblxuLy8gaW4gV2VicGFjayAyLCByZXF1aXJlLmVuc3VyZSBub3cgYWxzbyByZXR1cm5zIGEgUHJvbWlzZVxuLy8gc28gdGhlIHJlc29sdmUvcmVqZWN0IGZ1bmN0aW9ucyBtYXkgZ2V0IGNhbGxlZCBhbiBleHRyYSB0aW1lXG4vLyBpZiB0aGUgdXNlciB1c2VzIGFuIGFycm93IGZ1bmN0aW9uIHNob3J0aGFuZCB0aGF0IGhhcHBlbnMgdG9cbi8vIHJldHVybiB0aGF0IFByb21pc2UuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgaWYgKGNhbGxlZCkgeyByZXR1cm4gfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gIH1cbn1cblxudmFyIE5hdmlnYXRpb25EdXBsaWNhdGVkID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRXJyb3IpIHtcbiAgZnVuY3Rpb24gTmF2aWdhdGlvbkR1cGxpY2F0ZWQgKG5vcm1hbGl6ZWRMb2NhdGlvbikge1xuICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5uYW1lID0gdGhpcy5fbmFtZSA9ICdOYXZpZ2F0aW9uRHVwbGljYXRlZCc7XG4gICAgLy8gcGFzc2luZyB0aGUgbWVzc2FnZSB0byBzdXBlcigpIGRvZXNuJ3Qgc2VlbSB0byB3b3JrIGluIHRoZSB0cmFuc3BpbGVkIHZlcnNpb25cbiAgICB0aGlzLm1lc3NhZ2UgPSBcIk5hdmlnYXRpbmcgdG8gY3VycmVudCBsb2NhdGlvbiAoXFxcIlwiICsgKG5vcm1hbGl6ZWRMb2NhdGlvbi5mdWxsUGF0aCkgKyBcIlxcXCIpIGlzIG5vdCBhbGxvd2VkXCI7XG4gICAgLy8gYWRkIGEgc3RhY2sgcHJvcGVydHkgc28gc2VydmljZXMgbGlrZSBTZW50cnkgY2FuIGNvcnJlY3RseSBkaXNwbGF5IGl0XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgIHZhbHVlOiBuZXcgRXJyb3IoKS5zdGFjayxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLy8gd2UgY291bGQgYWxzbyBoYXZlIHVzZWRcbiAgICAvLyBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKVxuICAgIC8vIGJ1dCBpdCBvbmx5IGV4aXN0cyBvbiBub2RlIGFuZCBjaHJvbWVcbiAgfVxuXG4gIGlmICggRXJyb3IgKSBOYXZpZ2F0aW9uRHVwbGljYXRlZC5fX3Byb3RvX18gPSBFcnJvcjtcbiAgTmF2aWdhdGlvbkR1cGxpY2F0ZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXJyb3IgJiYgRXJyb3IucHJvdG90eXBlICk7XG4gIE5hdmlnYXRpb25EdXBsaWNhdGVkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5hdmlnYXRpb25EdXBsaWNhdGVkO1xuXG4gIHJldHVybiBOYXZpZ2F0aW9uRHVwbGljYXRlZDtcbn0oRXJyb3IpKTtcblxuLy8gc3VwcG9ydCBJRTlcbk5hdmlnYXRpb25EdXBsaWNhdGVkLl9uYW1lID0gJ05hdmlnYXRpb25EdXBsaWNhdGVkJztcblxuLyogICovXG5cbnZhciBIaXN0b3J5ID0gZnVuY3Rpb24gSGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB0aGlzLmJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xuICAvLyBzdGFydCB3aXRoIGEgcm91dGUgb2JqZWN0IHRoYXQgc3RhbmRzIGZvciBcIm5vd2hlcmVcIlxuICB0aGlzLmN1cnJlbnQgPSBTVEFSVDtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB0aGlzLnJlYWR5Q2JzID0gW107XG4gIHRoaXMucmVhZHlFcnJvckNicyA9IFtdO1xuICB0aGlzLmVycm9yQ2JzID0gW107XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4gKGNiKSB7XG4gIHRoaXMuY2IgPSBjYjtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWFkeUNicy5wdXNoKGNiKTtcbiAgICBpZiAoZXJyb3JDYikge1xuICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG4gICAgfVxuICB9XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8gKFxuICBsb2NhdGlvbixcbiAgb25Db21wbGV0ZSxcbiAgb25BYm9ydFxuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJvdXRlID0gdGhpcy5yb3V0ZXIubWF0Y2gobG9jYXRpb24sIHRoaXMuY3VycmVudCk7XG4gIHRoaXMuY29uZmlybVRyYW5zaXRpb24oXG4gICAgcm91dGUsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB0aGlzJDEuZW5zdXJlVVJMKCk7XG5cbiAgICAgIC8vIGZpcmUgcmVhZHkgY2JzIG9uY2VcbiAgICAgIGlmICghdGhpcyQxLnJlYWR5KSB7XG4gICAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMkMS5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAob25BYm9ydCkge1xuICAgICAgICBvbkFib3J0KGVycik7XG4gICAgICB9XG4gICAgICBpZiAoZXJyICYmICF0aGlzJDEucmVhZHkpIHtcbiAgICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcyQxLnJlYWR5RXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICBjYihlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5jb25maXJtVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uIChyb3V0ZSwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgLy8gYWZ0ZXIgbWVyZ2luZyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9wdWxsLzI3NzEgd2VcbiAgICAvLyBXaGVuIHRoZSB1c2VyIG5hdmlnYXRlcyB0aHJvdWdoIGhpc3RvcnkgdGhyb3VnaCBiYWNrL2ZvcndhcmQgYnV0dG9uc1xuICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIHRocm93IHRoZSBlcnJvci4gV2Ugb25seSB0aHJvdyBpdCBpZiBkaXJlY3RseSBjYWxsaW5nXG4gICAgLy8gcHVzaC9yZXBsYWNlLiBUaGF0J3Mgd2h5IGl0J3Mgbm90IGluY2x1ZGVkIGluIGlzRXJyb3JcbiAgICBpZiAoIWlzRXh0ZW5kZWRFcnJvcihOYXZpZ2F0aW9uRHVwbGljYXRlZCwgZXJyKSAmJiBpc0Vycm9yKGVycikpIHtcbiAgICAgIGlmICh0aGlzJDEuZXJyb3JDYnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMkMS5lcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihmYWxzZSwgJ3VuY2F1Z2h0IGVycm9yIGR1cmluZyByb3V0ZSBuYXZpZ2F0aW9uOicpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIG9uQWJvcnQgJiYgb25BYm9ydChlcnIpO1xuICB9O1xuICBpZiAoXG4gICAgaXNTYW1lUm91dGUocm91dGUsIGN1cnJlbnQpICYmXG4gICAgLy8gaW4gdGhlIGNhc2UgdGhlIHJvdXRlIG1hcCBoYXMgYmVlbiBkeW5hbWljYWxseSBhcHBlbmRlZCB0b1xuICAgIHJvdXRlLm1hdGNoZWQubGVuZ3RoID09PSBjdXJyZW50Lm1hdGNoZWQubGVuZ3RoXG4gICkge1xuICAgIHRoaXMuZW5zdXJlVVJMKCk7XG4gICAgcmV0dXJuIGFib3J0KG5ldyBOYXZpZ2F0aW9uRHVwbGljYXRlZChyb3V0ZSkpXG4gIH1cblxuICB2YXIgcmVmID0gcmVzb2x2ZVF1ZXVlKFxuICAgIHRoaXMuY3VycmVudC5tYXRjaGVkLFxuICAgIHJvdXRlLm1hdGNoZWRcbiAgKTtcbiAgICB2YXIgdXBkYXRlZCA9IHJlZi51cGRhdGVkO1xuICAgIHZhciBkZWFjdGl2YXRlZCA9IHJlZi5kZWFjdGl2YXRlZDtcbiAgICB2YXIgYWN0aXZhdGVkID0gcmVmLmFjdGl2YXRlZDtcblxuICB2YXIgcXVldWUgPSBbXS5jb25jYXQoXG4gICAgLy8gaW4tY29tcG9uZW50IGxlYXZlIGd1YXJkc1xuICAgIGV4dHJhY3RMZWF2ZUd1YXJkcyhkZWFjdGl2YXRlZCksXG4gICAgLy8gZ2xvYmFsIGJlZm9yZSBob29rc1xuICAgIHRoaXMucm91dGVyLmJlZm9yZUhvb2tzLFxuICAgIC8vIGluLWNvbXBvbmVudCB1cGRhdGUgaG9va3NcbiAgICBleHRyYWN0VXBkYXRlSG9va3ModXBkYXRlZCksXG4gICAgLy8gaW4tY29uZmlnIGVudGVyIGd1YXJkc1xuICAgIGFjdGl2YXRlZC5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uYmVmb3JlRW50ZXI7IH0pLFxuICAgIC8vIGFzeW5jIGNvbXBvbmVudHNcbiAgICByZXNvbHZlQXN5bmNDb21wb25lbnRzKGFjdGl2YXRlZClcbiAgKTtcblxuICB0aGlzLnBlbmRpbmcgPSByb3V0ZTtcbiAgdmFyIGl0ZXJhdG9yID0gZnVuY3Rpb24gKGhvb2ssIG5leHQpIHtcbiAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICByZXR1cm4gYWJvcnQoKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgaG9vayhyb3V0ZSwgY3VycmVudCwgZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0byA9PT0gZmFsc2UgfHwgaXNFcnJvcih0bykpIHtcbiAgICAgICAgICAvLyBuZXh0KGZhbHNlKSAtPiBhYm9ydCBuYXZpZ2F0aW9uLCBlbnN1cmUgY3VycmVudCBVUkxcbiAgICAgICAgICB0aGlzJDEuZW5zdXJlVVJMKHRydWUpO1xuICAgICAgICAgIGFib3J0KHRvKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICB0eXBlb2YgdG8gPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgKHR5cGVvZiB0byA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICh0eXBlb2YgdG8ucGF0aCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRvLm5hbWUgPT09ICdzdHJpbmcnKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gbmV4dCgnLycpIG9yIG5leHQoeyBwYXRoOiAnLycgfSkgLT4gcmVkaXJlY3RcbiAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09ICdvYmplY3QnICYmIHRvLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHRoaXMkMS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcyQxLnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25maXJtIHRyYW5zaXRpb24gYW5kIHBhc3Mgb24gdGhlIHZhbHVlXG4gICAgICAgICAgbmV4dCh0byk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFib3J0KGUpO1xuICAgIH1cbiAgfTtcblxuICBydW5RdWV1ZShxdWV1ZSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zdEVudGVyQ2JzID0gW107XG4gICAgdmFyIGlzVmFsaWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuY3VycmVudCA9PT0gcm91dGU7IH07XG4gICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmVcbiAgICAvLyBleHRyYWN0aW5nIGluLWNvbXBvbmVudCBlbnRlciBndWFyZHNcbiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkLCBwb3N0RW50ZXJDYnMsIGlzVmFsaWQpO1xuICAgIHZhciBxdWV1ZSA9IGVudGVyR3VhcmRzLmNvbmNhdCh0aGlzJDEucm91dGVyLnJlc29sdmVIb29rcyk7XG4gICAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICAgIHJldHVybiBhYm9ydCgpXG4gICAgICB9XG4gICAgICB0aGlzJDEucGVuZGluZyA9IG51bGw7XG4gICAgICBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIGlmICh0aGlzJDEucm91dGVyLmFwcCkge1xuICAgICAgICB0aGlzJDEucm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBvc3RFbnRlckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudXBkYXRlUm91dGUgPSBmdW5jdGlvbiB1cGRhdGVSb3V0ZSAocm91dGUpIHtcbiAgdmFyIHByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMuY3VycmVudCA9IHJvdXRlO1xuICB0aGlzLmNiICYmIHRoaXMuY2Iocm91dGUpO1xuICB0aGlzLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UgKGJhc2UpIHtcbiAgaWYgKCFiYXNlKSB7XG4gICAgaWYgKGluQnJvd3Nlcikge1xuICAgICAgLy8gcmVzcGVjdCA8YmFzZT4gdGFnXG4gICAgICB2YXIgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgICAgYmFzZSA9IChiYXNlRWwgJiYgYmFzZUVsLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB8fCAnLyc7XG4gICAgICAvLyBzdHJpcCBmdWxsIFVSTCBvcmlnaW5cbiAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15odHRwcz86XFwvXFwvW15cXC9dKy8sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9ICcvJztcbiAgICB9XG4gIH1cbiAgLy8gbWFrZSBzdXJlIHRoZXJlJ3MgdGhlIHN0YXJ0aW5nIHNsYXNoXG4gIGlmIChiYXNlLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgYmFzZSA9ICcvJyArIGJhc2U7XG4gIH1cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNsYXNoXG4gIHJldHVybiBiYXNlLnJlcGxhY2UoL1xcLyQvLCAnJylcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVF1ZXVlIChcbiAgY3VycmVudCxcbiAgbmV4dFxuKSB7XG4gIHZhciBpO1xuICB2YXIgbWF4ID0gTWF0aC5tYXgoY3VycmVudC5sZW5ndGgsIG5leHQubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgaWYgKGN1cnJlbnRbaV0gIT09IG5leHRbaV0pIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdXBkYXRlZDogbmV4dC5zbGljZSgwLCBpKSxcbiAgICBhY3RpdmF0ZWQ6IG5leHQuc2xpY2UoaSksXG4gICAgZGVhY3RpdmF0ZWQ6IGN1cnJlbnQuc2xpY2UoaSlcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmRzIChcbiAgcmVjb3JkcyxcbiAgbmFtZSxcbiAgYmluZCxcbiAgcmV2ZXJzZVxuKSB7XG4gIHZhciBndWFyZHMgPSBmbGF0TWFwQ29tcG9uZW50cyhyZWNvcmRzLCBmdW5jdGlvbiAoZGVmLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSkge1xuICAgIHZhciBndWFyZCA9IGV4dHJhY3RHdWFyZChkZWYsIG5hbWUpO1xuICAgIGlmIChndWFyZCkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZ3VhcmQpXG4gICAgICAgID8gZ3VhcmQubWFwKGZ1bmN0aW9uIChndWFyZCkgeyByZXR1cm4gYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpOyB9KVxuICAgICAgICA6IGJpbmQoZ3VhcmQsIGluc3RhbmNlLCBtYXRjaCwga2V5KVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmbGF0dGVuKHJldmVyc2UgPyBndWFyZHMucmV2ZXJzZSgpIDogZ3VhcmRzKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmQgKFxuICBkZWYsXG4gIGtleVxuKSB7XG4gIGlmICh0eXBlb2YgZGVmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXh0ZW5kIG5vdyBzbyB0aGF0IGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQuXG4gICAgZGVmID0gX1Z1ZS5leHRlbmQoZGVmKTtcbiAgfVxuICByZXR1cm4gZGVmLm9wdGlvbnNba2V5XVxufVxuXG5mdW5jdGlvbiBleHRyYWN0TGVhdmVHdWFyZHMgKGRlYWN0aXZhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKGRlYWN0aXZhdGVkLCAnYmVmb3JlUm91dGVMZWF2ZScsIGJpbmRHdWFyZCwgdHJ1ZSlcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFVwZGF0ZUhvb2tzICh1cGRhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKHVwZGF0ZWQsICdiZWZvcmVSb3V0ZVVwZGF0ZScsIGJpbmRHdWFyZClcbn1cblxuZnVuY3Rpb24gYmluZEd1YXJkIChndWFyZCwgaW5zdGFuY2UpIHtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kUm91dGVHdWFyZCAoKSB7XG4gICAgICByZXR1cm4gZ3VhcmQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdEVudGVyR3VhcmRzIChcbiAgYWN0aXZhdGVkLFxuICBjYnMsXG4gIGlzVmFsaWRcbikge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhcbiAgICBhY3RpdmF0ZWQsXG4gICAgJ2JlZm9yZVJvdXRlRW50ZXInLFxuICAgIGZ1bmN0aW9uIChndWFyZCwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgcmV0dXJuIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5LCBjYnMsIGlzVmFsaWQpXG4gICAgfVxuICApXG59XG5cbmZ1bmN0aW9uIGJpbmRFbnRlckd1YXJkIChcbiAgZ3VhcmQsXG4gIG1hdGNoLFxuICBrZXksXG4gIGNicyxcbiAgaXNWYWxpZFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiByb3V0ZUVudGVyR3VhcmQgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgcmV0dXJuIGd1YXJkKHRvLCBmcm9tLCBmdW5jdGlvbiAoY2IpIHtcbiAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2JzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vICM3NTBcbiAgICAgICAgICAvLyBpZiBhIHJvdXRlci12aWV3IGlzIHdyYXBwZWQgd2l0aCBhbiBvdXQtaW4gdHJhbnNpdGlvbixcbiAgICAgICAgICAvLyB0aGUgaW5zdGFuY2UgbWF5IG5vdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCBhdCB0aGlzIHRpbWUuXG4gICAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIHBvbGwgZm9yIHJlZ2lzdHJhdGlvbiB1bnRpbCBjdXJyZW50IHJvdXRlXG4gICAgICAgICAgLy8gaXMgbm8gbG9uZ2VyIHZhbGlkLlxuICAgICAgICAgIHBvbGwoY2IsIG1hdGNoLmluc3RhbmNlcywga2V5LCBpc1ZhbGlkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBuZXh0KGNiKTtcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIHBvbGwgKFxuICBjYiwgLy8gc29tZWhvdyBmbG93IGNhbm5vdCBpbmZlciB0aGlzIGlzIGEgZnVuY3Rpb25cbiAgaW5zdGFuY2VzLFxuICBrZXksXG4gIGlzVmFsaWRcbikge1xuICBpZiAoXG4gICAgaW5zdGFuY2VzW2tleV0gJiZcbiAgICAhaW5zdGFuY2VzW2tleV0uX2lzQmVpbmdEZXN0cm95ZWQgLy8gZG8gbm90IHJldXNlIGJlaW5nIGRlc3Ryb3llZCBpbnN0YW5jZVxuICApIHtcbiAgICBjYihpbnN0YW5jZXNba2V5XSk7XG4gIH0gZWxzZSBpZiAoaXNWYWxpZCgpKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBwb2xsKGNiLCBpbnN0YW5jZXMsIGtleSwgaXNWYWxpZCk7XG4gICAgfSwgMTYpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgSFRNTDVIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSkge1xuICBmdW5jdGlvbiBIVE1MNUhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG5cbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHZhciBpbml0TG9jYXRpb24gPSBnZXRMb2NhdGlvbih0aGlzLmJhc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMkMS5jdXJyZW50O1xuXG4gICAgICAvLyBBdm9pZGluZyBmaXJzdCBgcG9wc3RhdGVgIGV2ZW50IGRpc3BhdGNoZWQgaW4gc29tZSBicm93c2VycyBidXQgZmlyc3RcbiAgICAgIC8vIGhpc3Rvcnkgcm91dGUgbm90IHVwZGF0ZWQgc2luY2UgYXN5bmMgZ3VhcmQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMkMS5iYXNlKTtcbiAgICAgIGlmICh0aGlzJDEuY3VycmVudCA9PT0gU1RBUlQgJiYgbG9jYXRpb24gPT09IGluaXRMb2NhdGlvbikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcyQxLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgICAgIGhhbmRsZVNjcm9sbChyb3V0ZXIsIHJvdXRlLCBjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkgKSBIVE1MNUhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeTtcbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUgKTtcbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhUTUw1SGlzdG9yeTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHB1c2hTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICByZXBsYWNlU3RhdGUoY2xlYW5QYXRoKHRoaXMkMS5iYXNlICsgcm91dGUuZnVsbFBhdGgpKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMIChwdXNoKSB7XG4gICAgaWYgKGdldExvY2F0aW9uKHRoaXMuYmFzZSkgIT09IHRoaXMuY3VycmVudC5mdWxsUGF0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBjbGVhblBhdGgodGhpcy5iYXNlICsgdGhpcy5jdXJyZW50LmZ1bGxQYXRoKTtcbiAgICAgIHB1c2ggPyBwdXNoU3RhdGUoY3VycmVudCkgOiByZXBsYWNlU3RhdGUoY3VycmVudCk7XG4gICAgfVxuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0TG9jYXRpb24odGhpcy5iYXNlKVxuICB9O1xuXG4gIHJldHVybiBIVE1MNUhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuZnVuY3Rpb24gZ2V0TG9jYXRpb24gKGJhc2UpIHtcbiAgdmFyIHBhdGggPSBkZWNvZGVVUkkod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgaWYgKGJhc2UgJiYgcGF0aC5pbmRleE9mKGJhc2UpID09PSAwKSB7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoYmFzZS5sZW5ndGgpO1xuICB9XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIHdpbmRvdy5sb2NhdGlvbi5oYXNoXG59XG5cbi8qICAqL1xuXG52YXIgSGFzaEhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5KSB7XG4gIGZ1bmN0aW9uIEhhc2hIaXN0b3J5IChyb3V0ZXIsIGJhc2UsIGZhbGxiYWNrKSB7XG4gICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG4gICAgLy8gY2hlY2sgaGlzdG9yeSBmYWxsYmFjayBkZWVwbGlua2luZ1xuICAgIGlmIChmYWxsYmFjayAmJiBjaGVja0ZhbGxiYWNrKHRoaXMuYmFzZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbnN1cmVTbGFzaCgpO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5ICkgSGFzaEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSAmJiBIaXN0b3J5LnByb3RvdHlwZSApO1xuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIYXNoSGlzdG9yeTtcblxuICAvLyB0aGlzIGlzIGRlbGF5ZWQgdW50aWwgdGhlIGFwcCBtb3VudHNcbiAgLy8gdG8gYXZvaWQgdGhlIGhhc2hjaGFuZ2UgbGlzdGVuZXIgYmVpbmcgZmlyZWQgdG9vIGVhcmx5XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByb3V0ZXIgPSB0aGlzLnJvdXRlcjtcbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgc3VwcG9ydHNQdXNoU3RhdGUgPyAncG9wc3RhdGUnIDogJ2hhc2hjaGFuZ2UnLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMkMS5jdXJyZW50O1xuICAgICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGdldEhhc2goKSwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHB1c2hIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMIChwdXNoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQuZnVsbFBhdGg7XG4gICAgaWYgKGdldEhhc2goKSAhPT0gY3VycmVudCkge1xuICAgICAgcHVzaCA/IHB1c2hIYXNoKGN1cnJlbnQpIDogcmVwbGFjZUhhc2goY3VycmVudCk7XG4gICAgfVxuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRIYXNoKClcbiAgfTtcblxuICByZXR1cm4gSGFzaEhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuZnVuY3Rpb24gY2hlY2tGYWxsYmFjayAoYmFzZSkge1xuICB2YXIgbG9jYXRpb24gPSBnZXRMb2NhdGlvbihiYXNlKTtcbiAgaWYgKCEvXlxcLyMvLnRlc3QobG9jYXRpb24pKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoY2xlYW5QYXRoKGJhc2UgKyAnLyMnICsgbG9jYXRpb24pKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNsYXNoICgpIHtcbiAgdmFyIHBhdGggPSBnZXRIYXNoKCk7XG4gIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXBsYWNlSGFzaCgnLycgKyBwYXRoKTtcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdldEhhc2ggKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICAvLyBlbXB0eSBwYXRoXG4gIGlmIChpbmRleCA8IDApIHsgcmV0dXJuICcnIH1cblxuICBocmVmID0gaHJlZi5zbGljZShpbmRleCArIDEpO1xuICAvLyBkZWNvZGUgdGhlIGhhc2ggYnV0IG5vdCB0aGUgc2VhcmNoIG9yIGhhc2hcbiAgLy8gYXMgc2VhcmNoKHF1ZXJ5KSBpcyBhbHJlYWR5IGRlY29kZWRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzI3MDhcbiAgdmFyIHNlYXJjaEluZGV4ID0gaHJlZi5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCA8IDApIHtcbiAgICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2hJbmRleCA+IC0xKSB7XG4gICAgICBocmVmID0gZGVjb2RlVVJJKGhyZWYuc2xpY2UoMCwgaGFzaEluZGV4KSkgKyBocmVmLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgfSBlbHNlIHsgaHJlZiA9IGRlY29kZVVSSShocmVmKTsgfVxuICB9IGVsc2Uge1xuICAgIGhyZWYgPSBkZWNvZGVVUkkoaHJlZi5zbGljZSgwLCBzZWFyY2hJbmRleCkpICsgaHJlZi5zbGljZShzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4gaHJlZlxufVxuXG5mdW5jdGlvbiBnZXRVcmwgKHBhdGgpIHtcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGkgPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgdmFyIGJhc2UgPSBpID49IDAgPyBocmVmLnNsaWNlKDAsIGkpIDogaHJlZjtcbiAgcmV0dXJuIChiYXNlICsgXCIjXCIgKyBwYXRoKVxufVxuXG5mdW5jdGlvbiBwdXNoSGFzaCAocGF0aCkge1xuICBpZiAoc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICBwdXNoU3RhdGUoZ2V0VXJsKHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2ggKHBhdGgpIHtcbiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgcmVwbGFjZVN0YXRlKGdldFVybChwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoZ2V0VXJsKHBhdGgpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIEFic3RyYWN0SGlzdG9yeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEhpc3RvcnkpIHtcbiAgZnVuY3Rpb24gQWJzdHJhY3RIaXN0b3J5IChyb3V0ZXIsIGJhc2UpIHtcbiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5pbmRleCA9IC0xO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5ICkgQWJzdHJhY3RIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3Rvcnk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5ICYmIEhpc3RvcnkucHJvdG90eXBlICk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBYnN0cmFjdEhpc3Rvcnk7XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCArIDEpLmNvbmNhdChyb3V0ZSk7XG4gICAgICAgIHRoaXMkMS5pbmRleCsrO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXgpLmNvbmNhdChyb3V0ZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLmluZGV4ICsgbjtcbiAgICBpZiAodGFyZ2V0SW5kZXggPCAwIHx8IHRhcmdldEluZGV4ID49IHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHJvdXRlID0gdGhpcy5zdGFja1t0YXJnZXRJbmRleF07XG4gICAgdGhpcy5jb25maXJtVHJhbnNpdGlvbihcbiAgICAgIHJvdXRlLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzJDEuaW5kZXggPSB0YXJnZXRJbmRleDtcbiAgICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChpc0V4dGVuZGVkRXJyb3IoTmF2aWdhdGlvbkR1cGxpY2F0ZWQsIGVycikpIHtcbiAgICAgICAgICB0aGlzJDEuaW5kZXggPSB0YXJnZXRJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBjdXJyZW50ID8gY3VycmVudC5mdWxsUGF0aCA6ICcvJ1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMICgpIHtcbiAgICAvLyBub29wXG4gIH07XG5cbiAgcmV0dXJuIEFic3RyYWN0SGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG4vKiAgKi9cblxuXG5cbnZhciBWdWVSb3V0ZXIgPSBmdW5jdGlvbiBWdWVSb3V0ZXIgKG9wdGlvbnMpIHtcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgdGhpcy5hcHAgPSBudWxsO1xuICB0aGlzLmFwcHMgPSBbXTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5iZWZvcmVIb29rcyA9IFtdO1xuICB0aGlzLnJlc29sdmVIb29rcyA9IFtdO1xuICB0aGlzLmFmdGVySG9va3MgPSBbXTtcbiAgdGhpcy5tYXRjaGVyID0gY3JlYXRlTWF0Y2hlcihvcHRpb25zLnJvdXRlcyB8fCBbXSwgdGhpcyk7XG5cbiAgdmFyIG1vZGUgPSBvcHRpb25zLm1vZGUgfHwgJ2hhc2gnO1xuICB0aGlzLmZhbGxiYWNrID0gbW9kZSA9PT0gJ2hpc3RvcnknICYmICFzdXBwb3J0c1B1c2hTdGF0ZSAmJiBvcHRpb25zLmZhbGxiYWNrICE9PSBmYWxzZTtcbiAgaWYgKHRoaXMuZmFsbGJhY2spIHtcbiAgICBtb2RlID0gJ2hhc2gnO1xuICB9XG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgbW9kZSA9ICdhYnN0cmFjdCc7XG4gIH1cbiAgdGhpcy5tb2RlID0gbW9kZTtcblxuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlICdoaXN0b3J5JzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIVE1MNUhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlKTtcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnaGFzaCc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSGFzaEhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlLCB0aGlzLmZhbGxiYWNrKTtcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYWJzdHJhY3QnOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEFic3RyYWN0SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpO1xuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCAoXCJpbnZhbGlkIG1vZGU6IFwiICsgbW9kZSkpO1xuICAgICAgfVxuICB9XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjdXJyZW50Um91dGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5tYXRjaCA9IGZ1bmN0aW9uIG1hdGNoIChcbiAgcmF3LFxuICBjdXJyZW50LFxuICByZWRpcmVjdGVkRnJvbVxuKSB7XG4gIHJldHVybiB0aGlzLm1hdGNoZXIubWF0Y2gocmF3LCBjdXJyZW50LCByZWRpcmVjdGVkRnJvbSlcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5jdXJyZW50Um91dGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5jdXJyZW50XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBpbml0IChhcHAgLyogVnVlIGNvbXBvbmVudCBpbnN0YW5jZSAqLykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0KFxuICAgIGluc3RhbGwuaW5zdGFsbGVkLFxuICAgIFwibm90IGluc3RhbGxlZC4gTWFrZSBzdXJlIHRvIGNhbGwgYFZ1ZS51c2UoVnVlUm91dGVyKWAgXCIgK1xuICAgIFwiYmVmb3JlIGNyZWF0aW5nIHJvb3QgaW5zdGFuY2UuXCJcbiAgKTtcblxuICB0aGlzLmFwcHMucHVzaChhcHApO1xuXG4gIC8vIHNldCB1cCBhcHAgZGVzdHJveWVkIGhhbmRsZXJcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzI2MzlcbiAgYXBwLiRvbmNlKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBjbGVhbiBvdXQgYXBwIGZyb20gdGhpcy5hcHBzIGFycmF5IG9uY2UgZGVzdHJveWVkXG4gICAgdmFyIGluZGV4ID0gdGhpcyQxLmFwcHMuaW5kZXhPZihhcHApO1xuICAgIGlmIChpbmRleCA+IC0xKSB7IHRoaXMkMS5hcHBzLnNwbGljZShpbmRleCwgMSk7IH1cbiAgICAvLyBlbnN1cmUgd2Ugc3RpbGwgaGF2ZSBhIG1haW4gYXBwIG9yIG51bGwgaWYgbm8gYXBwc1xuICAgIC8vIHdlIGRvIG5vdCByZWxlYXNlIHRoZSByb3V0ZXIgc28gaXQgY2FuIGJlIHJldXNlZFxuICAgIGlmICh0aGlzJDEuYXBwID09PSBhcHApIHsgdGhpcyQxLmFwcCA9IHRoaXMkMS5hcHBzWzBdIHx8IG51bGw7IH1cbiAgfSk7XG5cbiAgLy8gbWFpbiBhcHAgcHJldmlvdXNseSBpbml0aWFsaXplZFxuICAvLyByZXR1cm4gYXMgd2UgZG9uJ3QgbmVlZCB0byBzZXQgdXAgbmV3IGhpc3RvcnkgbGlzdGVuZXJcbiAgaWYgKHRoaXMuYXBwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB0aGlzLmFwcCA9IGFwcDtcblxuICB2YXIgaGlzdG9yeSA9IHRoaXMuaGlzdG9yeTtcblxuICBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhUTUw1SGlzdG9yeSkge1xuICAgIGhpc3RvcnkudHJhbnNpdGlvblRvKGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9IGVsc2UgaWYgKGhpc3RvcnkgaW5zdGFuY2VvZiBIYXNoSGlzdG9yeSkge1xuICAgIHZhciBzZXR1cEhhc2hMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGhpc3Rvcnkuc2V0dXBMaXN0ZW5lcnMoKTtcbiAgICB9O1xuICAgIGhpc3RvcnkudHJhbnNpdGlvblRvKFxuICAgICAgaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSxcbiAgICAgIHNldHVwSGFzaExpc3RlbmVyLFxuICAgICAgc2V0dXBIYXNoTGlzdGVuZXJcbiAgICApO1xuICB9XG5cbiAgaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgdGhpcyQxLmFwcHMuZm9yRWFjaChmdW5jdGlvbiAoYXBwKSB7XG4gICAgICBhcHAuX3JvdXRlID0gcm91dGU7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iZWZvcmVFYWNoID0gZnVuY3Rpb24gYmVmb3JlRWFjaCAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLmJlZm9yZUhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlUmVzb2x2ZSA9IGZ1bmN0aW9uIGJlZm9yZVJlc29sdmUgKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5yZXNvbHZlSG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5hZnRlckVhY2ggPSBmdW5jdGlvbiBhZnRlckVhY2ggKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5hZnRlckhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUub25SZWFkeSA9IGZ1bmN0aW9uIG9uUmVhZHkgKGNiLCBlcnJvckNiKSB7XG4gIHRoaXMuaGlzdG9yeS5vblJlYWR5KGNiLCBlcnJvckNiKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IgKGVycm9yQ2IpIHtcbiAgdGhpcy5oaXN0b3J5Lm9uRXJyb3IoZXJyb3JDYik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIW9uQ29tcGxldGUgJiYgIW9uQWJvcnQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRoaXMkMS5oaXN0b3J5LnB1c2gobG9jYXRpb24sIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhpc3RvcnkucHVzaChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCk7XG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghb25Db21wbGV0ZSAmJiAhb25BYm9ydCAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdGhpcyQxLmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHRoaXMuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KTtcbiAgfVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gIHRoaXMuaGlzdG9yeS5nbyhuKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uIGJhY2sgKCkge1xuICB0aGlzLmdvKC0xKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uIGZvcndhcmQgKCkge1xuICB0aGlzLmdvKDEpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5nZXRNYXRjaGVkQ29tcG9uZW50cyA9IGZ1bmN0aW9uIGdldE1hdGNoZWRDb21wb25lbnRzICh0bykge1xuICB2YXIgcm91dGUgPSB0b1xuICAgID8gdG8ubWF0Y2hlZFxuICAgICAgPyB0b1xuICAgICAgOiB0aGlzLnJlc29sdmUodG8pLnJvdXRlXG4gICAgOiB0aGlzLmN1cnJlbnRSb3V0ZTtcbiAgaWYgKCFyb3V0ZSkge1xuICAgIHJldHVybiBbXVxuICB9XG4gIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIHJvdXRlLm1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBtLmNvbXBvbmVudHNba2V5XVxuICAgIH0pXG4gIH0pKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSAoXG4gIHRvLFxuICBjdXJyZW50LFxuICBhcHBlbmRcbikge1xuICBjdXJyZW50ID0gY3VycmVudCB8fCB0aGlzLmhpc3RvcnkuY3VycmVudDtcbiAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24oXG4gICAgdG8sXG4gICAgY3VycmVudCxcbiAgICBhcHBlbmQsXG4gICAgdGhpc1xuICApO1xuICB2YXIgcm91dGUgPSB0aGlzLm1hdGNoKGxvY2F0aW9uLCBjdXJyZW50KTtcbiAgdmFyIGZ1bGxQYXRoID0gcm91dGUucmVkaXJlY3RlZEZyb20gfHwgcm91dGUuZnVsbFBhdGg7XG4gIHZhciBiYXNlID0gdGhpcy5oaXN0b3J5LmJhc2U7XG4gIHZhciBocmVmID0gY3JlYXRlSHJlZihiYXNlLCBmdWxsUGF0aCwgdGhpcy5tb2RlKTtcbiAgcmV0dXJuIHtcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgcm91dGU6IHJvdXRlLFxuICAgIGhyZWY6IGhyZWYsXG4gICAgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICBub3JtYWxpemVkVG86IGxvY2F0aW9uLFxuICAgIHJlc29sdmVkOiByb3V0ZVxuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFkZFJvdXRlcyA9IGZ1bmN0aW9uIGFkZFJvdXRlcyAocm91dGVzKSB7XG4gIHRoaXMubWF0Y2hlci5hZGRSb3V0ZXMocm91dGVzKTtcbiAgaWYgKHRoaXMuaGlzdG9yeS5jdXJyZW50ICE9PSBTVEFSVCkge1xuICAgIHRoaXMuaGlzdG9yeS50cmFuc2l0aW9uVG8odGhpcy5oaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZ1ZVJvdXRlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG5mdW5jdGlvbiByZWdpc3Rlckhvb2sgKGxpc3QsIGZuKSB7XG4gIGxpc3QucHVzaChmbik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBsaXN0LmluZGV4T2YoZm4pO1xuICAgIGlmIChpID4gLTEpIHsgbGlzdC5zcGxpY2UoaSwgMSk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVIcmVmIChiYXNlLCBmdWxsUGF0aCwgbW9kZSkge1xuICB2YXIgcGF0aCA9IG1vZGUgPT09ICdoYXNoJyA/ICcjJyArIGZ1bGxQYXRoIDogZnVsbFBhdGg7XG4gIHJldHVybiBiYXNlID8gY2xlYW5QYXRoKGJhc2UgKyAnLycgKyBwYXRoKSA6IHBhdGhcbn1cblxuVnVlUm91dGVyLmluc3RhbGwgPSBpbnN0YWxsO1xuVnVlUm91dGVyLnZlcnNpb24gPSAnMy4xLjYnO1xuXG5pZiAoaW5Ccm93c2VyICYmIHdpbmRvdy5WdWUpIHtcbiAgd2luZG93LlZ1ZS51c2UoVnVlUm91dGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVnVlUm91dGVyO1xuIiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJWdWVMb2FkaW5nXCIsW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5WdWVMb2FkaW5nPWUoKTp0LlZ1ZUxvYWRpbmc9ZSgpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Z1bmN0aW9uIGkobil7aWYoZVtuXSlyZXR1cm4gZVtuXS5leHBvcnRzO3ZhciByPWVbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiB0W25dLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLGkpLHIubD0hMCxyLmV4cG9ydHN9cmV0dXJuIGkubT10LGkuYz1lLGkuZD1mdW5jdGlvbih0LGUsbil7aS5vKHQsZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2VudW1lcmFibGU6ITAsZ2V0Om59KX0saS5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LGkudD1mdW5jdGlvbih0LGUpe2lmKDEmZSYmKHQ9aSh0KSksOCZlKXJldHVybiB0O2lmKDQmZSYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKGkucihuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSksMiZlJiZcInN0cmluZ1wiIT10eXBlb2YgdClmb3IodmFyIHIgaW4gdClpLmQobixyLGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfS5iaW5kKG51bGwscikpO3JldHVybiBufSxpLm49ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIGkuZChlLFwiYVwiLGUpLGV9LGkubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0saS5wPVwiXCIsaShpLnM9MSl9KFtmdW5jdGlvbih0LGUsaSl7fSxmdW5jdGlvbih0LGUsaSl7XCJ1c2Ugc3RyaWN0XCI7aS5yKGUpO3ZhciBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LkhUTUxFbGVtZW50Ok9iamVjdCxyPXttb3VudGVkOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIix0aGlzLmZvY3VzSW4pfSxtZXRob2RzOntmb2N1c0luOmZ1bmN0aW9uKHQpe2lmKHRoaXMuaXNBY3RpdmUmJnQudGFyZ2V0IT09dGhpcy4kZWwmJiF0aGlzLiRlbC5jb250YWlucyh0LnRhcmdldCkpe3ZhciBlPXRoaXMuY29udGFpbmVyP3RoaXMuY29udGFpbmVyOnRoaXMuaXNGdWxsUGFnZT9udWxsOnRoaXMuJGVsLnBhcmVudEVsZW1lbnQ7KHRoaXMuaXNGdWxsUGFnZXx8ZSYmZS5jb250YWlucyh0LnRhcmdldCkpJiYodC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuJGVsLmZvY3VzKCkpfX19LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLHRoaXMuZm9jdXNJbil9fTtmdW5jdGlvbiBhKHQsZSxpLG4scixhLG8scyl7dmFyIHUsbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Qub3B0aW9uczp0O2lmKGUmJihsLnJlbmRlcj1lLGwuc3RhdGljUmVuZGVyRm5zPWksbC5fY29tcGlsZWQ9ITApLG4mJihsLmZ1bmN0aW9uYWw9ITApLGEmJihsLl9zY29wZUlkPVwiZGF0YS12LVwiK2EpLG8/KHU9ZnVuY3Rpb24odCl7KHQ9dHx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fCh0PV9fVlVFX1NTUl9DT05URVhUX18pLHImJnIuY2FsbCh0aGlzLHQpLHQmJnQuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZ0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobyl9LGwuX3NzclJlZ2lzdGVyPXUpOnImJih1PXM/ZnVuY3Rpb24oKXtyLmNhbGwodGhpcyx0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpfTpyKSx1KWlmKGwuZnVuY3Rpb25hbCl7bC5faW5qZWN0U3R5bGVzPXU7dmFyIGM9bC5yZW5kZXI7bC5yZW5kZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdS5jYWxsKGUpLGModCxlKX19ZWxzZXt2YXIgZD1sLmJlZm9yZUNyZWF0ZTtsLmJlZm9yZUNyZWF0ZT1kP1tdLmNvbmNhdChkLHUpOlt1XX1yZXR1cm57ZXhwb3J0czp0LG9wdGlvbnM6bH19dmFyIG89YSh7bmFtZTpcInNwaW5uZXJcIixwcm9wczp7Y29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIjMDAwXCJ9LGhlaWdodDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo2NH0sd2lkdGg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6NjR9fX0sKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kY3JlYXRlRWxlbWVudCxlPXRoaXMuX3NlbGYuX2N8fHQ7cmV0dXJuIGUoXCJzdmdcIix7YXR0cnM6e3ZpZXdCb3g6XCIwIDAgMzggMzhcIix4bWxuczpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsd2lkdGg6dGhpcy53aWR0aCxoZWlnaHQ6dGhpcy5oZWlnaHQsc3Ryb2tlOnRoaXMuY29sb3J9fSxbZShcImdcIix7YXR0cnM6e2ZpbGw6XCJub25lXCIsXCJmaWxsLXJ1bGVcIjpcImV2ZW5vZGRcIn19LFtlKFwiZ1wiLHthdHRyczp7dHJhbnNmb3JtOlwidHJhbnNsYXRlKDEgMSlcIixcInN0cm9rZS13aWR0aFwiOlwiMlwifX0sW2UoXCJjaXJjbGVcIix7YXR0cnM6e1wic3Ryb2tlLW9wYWNpdHlcIjpcIi4yNVwiLGN4OlwiMThcIixjeTpcIjE4XCIscjpcIjE4XCJ9fSksZShcInBhdGhcIix7YXR0cnM6e2Q6XCJNMzYgMThjMC05Ljk0LTguMDYtMTgtMTgtMThcIn19LFtlKFwiYW5pbWF0ZVRyYW5zZm9ybVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcInRyYW5zZm9ybVwiLHR5cGU6XCJyb3RhdGVcIixmcm9tOlwiMCAxOCAxOFwiLHRvOlwiMzYwIDE4IDE4XCIsZHVyOlwiMC44c1wiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pXSwxKV0pXSldKX0pLFtdLCExLG51bGwsbnVsbCxudWxsKS5leHBvcnRzLHM9YSh7bmFtZTpcImRvdHNcIixwcm9wczp7Y29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIjMDAwXCJ9LGhlaWdodDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoyNDB9LHdpZHRoOnt0eXBlOk51bWJlcixkZWZhdWx0OjYwfX19LChmdW5jdGlvbigpe3ZhciB0PXRoaXMuJGNyZWF0ZUVsZW1lbnQsZT10aGlzLl9zZWxmLl9jfHx0O3JldHVybiBlKFwic3ZnXCIse2F0dHJzOnt2aWV3Qm94OlwiMCAwIDEyMCAzMFwiLHhtbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixmaWxsOnRoaXMuY29sb3Isd2lkdGg6dGhpcy53aWR0aCxoZWlnaHQ6dGhpcy5oZWlnaHR9fSxbZShcImNpcmNsZVwiLHthdHRyczp7Y3g6XCIxNVwiLGN5OlwiMTVcIixyOlwiMTVcIn19LFtlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcInJcIixmcm9tOlwiMTVcIix0bzpcIjE1XCIsYmVnaW46XCIwc1wiLGR1cjpcIjAuOHNcIix2YWx1ZXM6XCIxNTs5OzE1XCIsY2FsY01vZGU6XCJsaW5lYXJcIixyZXBlYXRDb3VudDpcImluZGVmaW5pdGVcIn19KSxlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcImZpbGwtb3BhY2l0eVwiLGZyb206XCIxXCIsdG86XCIxXCIsYmVnaW46XCIwc1wiLGR1cjpcIjAuOHNcIix2YWx1ZXM6XCIxOy41OzFcIixjYWxjTW9kZTpcImxpbmVhclwiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pXSksZShcImNpcmNsZVwiLHthdHRyczp7Y3g6XCI2MFwiLGN5OlwiMTVcIixyOlwiOVwiLFwiZmlsbC1vcGFjaXR5XCI6XCIwLjNcIn19LFtlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcInJcIixmcm9tOlwiOVwiLHRvOlwiOVwiLGJlZ2luOlwiMHNcIixkdXI6XCIwLjhzXCIsdmFsdWVzOlwiOTsxNTs5XCIsY2FsY01vZGU6XCJsaW5lYXJcIixyZXBlYXRDb3VudDpcImluZGVmaW5pdGVcIn19KSxlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcImZpbGwtb3BhY2l0eVwiLGZyb206XCIwLjVcIix0bzpcIjAuNVwiLGJlZ2luOlwiMHNcIixkdXI6XCIwLjhzXCIsdmFsdWVzOlwiLjU7MTsuNVwiLGNhbGNNb2RlOlwibGluZWFyXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSldKSxlKFwiY2lyY2xlXCIse2F0dHJzOntjeDpcIjEwNVwiLGN5OlwiMTVcIixyOlwiMTVcIn19LFtlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcInJcIixmcm9tOlwiMTVcIix0bzpcIjE1XCIsYmVnaW46XCIwc1wiLGR1cjpcIjAuOHNcIix2YWx1ZXM6XCIxNTs5OzE1XCIsY2FsY01vZGU6XCJsaW5lYXJcIixyZXBlYXRDb3VudDpcImluZGVmaW5pdGVcIn19KSxlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcImZpbGwtb3BhY2l0eVwiLGZyb206XCIxXCIsdG86XCIxXCIsYmVnaW46XCIwc1wiLGR1cjpcIjAuOHNcIix2YWx1ZXM6XCIxOy41OzFcIixjYWxjTW9kZTpcImxpbmVhclwiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pXSldKX0pLFtdLCExLG51bGwsbnVsbCxudWxsKS5leHBvcnRzLHU9YSh7bmFtZTpcImJhcnNcIixwcm9wczp7Y29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIjMDAwXCJ9LGhlaWdodDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo0MH0sd2lkdGg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6NDB9fX0sKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kY3JlYXRlRWxlbWVudCxlPXRoaXMuX3NlbGYuX2N8fHQ7cmV0dXJuIGUoXCJzdmdcIix7YXR0cnM6e3htbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIix2aWV3Qm94OlwiMCAwIDMwIDMwXCIsaGVpZ2h0OnRoaXMuaGVpZ2h0LHdpZHRoOnRoaXMud2lkdGgsZmlsbDp0aGlzLmNvbG9yfX0sW2UoXCJyZWN0XCIse2F0dHJzOnt4OlwiMFwiLHk6XCIxM1wiLHdpZHRoOlwiNFwiLGhlaWdodDpcIjVcIn19LFtlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcImhlaWdodFwiLGF0dHJpYnV0ZVR5cGU6XCJYTUxcIix2YWx1ZXM6XCI1OzIxOzVcIixiZWdpbjpcIjBzXCIsZHVyOlwiMC42c1wiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pLGUoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwieVwiLGF0dHJpYnV0ZVR5cGU6XCJYTUxcIix2YWx1ZXM6XCIxMzsgNTsgMTNcIixiZWdpbjpcIjBzXCIsZHVyOlwiMC42c1wiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pXSksZShcInJlY3RcIix7YXR0cnM6e3g6XCIxMFwiLHk6XCIxM1wiLHdpZHRoOlwiNFwiLGhlaWdodDpcIjVcIn19LFtlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcImhlaWdodFwiLGF0dHJpYnV0ZVR5cGU6XCJYTUxcIix2YWx1ZXM6XCI1OzIxOzVcIixiZWdpbjpcIjAuMTVzXCIsZHVyOlwiMC42c1wiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pLGUoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwieVwiLGF0dHJpYnV0ZVR5cGU6XCJYTUxcIix2YWx1ZXM6XCIxMzsgNTsgMTNcIixiZWdpbjpcIjAuMTVzXCIsZHVyOlwiMC42c1wiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pXSksZShcInJlY3RcIix7YXR0cnM6e3g6XCIyMFwiLHk6XCIxM1wiLHdpZHRoOlwiNFwiLGhlaWdodDpcIjVcIn19LFtlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcImhlaWdodFwiLGF0dHJpYnV0ZVR5cGU6XCJYTUxcIix2YWx1ZXM6XCI1OzIxOzVcIixiZWdpbjpcIjAuM3NcIixkdXI6XCIwLjZzXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSksZShcImFuaW1hdGVcIix7YXR0cnM6e2F0dHJpYnV0ZU5hbWU6XCJ5XCIsYXR0cmlidXRlVHlwZTpcIlhNTFwiLHZhbHVlczpcIjEzOyA1OyAxM1wiLGJlZ2luOlwiMC4zc1wiLGR1cjpcIjAuNnNcIixyZXBlYXRDb3VudDpcImluZGVmaW5pdGVcIn19KV0pXSl9KSxbXSwhMSxudWxsLG51bGwsbnVsbCkuZXhwb3J0cyxsPWEoe25hbWU6XCJ2dWUtbG9hZGluZ1wiLG1peGluczpbcl0scHJvcHM6e2FjdGl2ZTpCb29sZWFuLHByb2dyYW1tYXRpYzpCb29sZWFuLGNvbnRhaW5lcjpbT2JqZWN0LEZ1bmN0aW9uLG5dLGlzRnVsbFBhZ2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSx0cmFuc2l0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZmFkZVwifSxjYW5DYW5jZWw6Qm9vbGVhbixvbkNhbmNlbDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmZ1bmN0aW9uKCl7fX0sY29sb3I6U3RyaW5nLGJhY2tncm91bmRDb2xvcjpTdHJpbmcsb3BhY2l0eTpOdW1iZXIsd2lkdGg6TnVtYmVyLGhlaWdodDpOdW1iZXIsekluZGV4Ok51bWJlcixsb2FkZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJzcGlubmVyXCJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2lzQWN0aXZlOnRoaXMuYWN0aXZlfX0sY29tcG9uZW50czp7U3Bpbm5lcjpvLERvdHM6cyxCYXJzOnV9LGJlZm9yZU1vdW50OmZ1bmN0aW9uKCl7dGhpcy5wcm9ncmFtbWF0aWMmJih0aGlzLmNvbnRhaW5lcj8odGhpcy5pc0Z1bGxQYWdlPSExLHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuJGVsKSk6ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLiRlbCkpfSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5wcm9ncmFtbWF0aWMmJih0aGlzLmlzQWN0aXZlPSEwKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIix0aGlzLmtleVByZXNzKX0sbWV0aG9kczp7Y2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy5jYW5DYW5jZWwmJnRoaXMuaXNBY3RpdmUmJih0aGlzLmhpZGUoKSx0aGlzLm9uQ2FuY2VsLmFwcGx5KG51bGwsYXJndW1lbnRzKSl9LGhpZGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJGVtaXQoXCJoaWRlXCIpLHRoaXMuJGVtaXQoXCJ1cGRhdGU6YWN0aXZlXCIsITEpLHRoaXMucHJvZ3JhbW1hdGljJiYodGhpcy5pc0FjdGl2ZT0hMSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3ZhciBlO3QuJGRlc3Ryb3koKSx2b2lkIDAhPT0oZT10LiRlbCkucmVtb3ZlP2UucmVtb3ZlKCk6ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSksMTUwKSl9LGtleVByZXNzOmZ1bmN0aW9uKHQpezI3PT09dC5rZXlDb2RlJiZ0aGlzLmNhbmNlbCgpfX0sd2F0Y2g6e2FjdGl2ZTpmdW5jdGlvbih0KXt0aGlzLmlzQWN0aXZlPXR9fSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsdGhpcy5rZXlQcmVzcyl9fSwoZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxpPXQuX3NlbGYuX2N8fGU7cmV0dXJuIGkoXCJ0cmFuc2l0aW9uXCIse2F0dHJzOntuYW1lOnQudHJhbnNpdGlvbn19LFtpKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTp0LmlzQWN0aXZlLGV4cHJlc3Npb246XCJpc0FjdGl2ZVwifV0sc3RhdGljQ2xhc3M6XCJ2bGQtb3ZlcmxheSBpcy1hY3RpdmVcIixjbGFzczp7XCJpcy1mdWxsLXBhZ2VcIjp0LmlzRnVsbFBhZ2V9LHN0eWxlOnt6SW5kZXg6dC56SW5kZXh9LGF0dHJzOnt0YWJpbmRleDpcIjBcIixcImFyaWEtYnVzeVwiOnQuaXNBY3RpdmUsXCJhcmlhLWxhYmVsXCI6XCJMb2FkaW5nXCJ9fSxbaShcImRpdlwiLHtzdGF0aWNDbGFzczpcInZsZC1iYWNrZ3JvdW5kXCIsc3R5bGU6e2JhY2tncm91bmQ6dC5iYWNrZ3JvdW5kQ29sb3Isb3BhY2l0eTp0Lm9wYWNpdHl9LG9uOntjbGljazpmdW5jdGlvbihlKXtyZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpLHQuY2FuY2VsKGUpfX19KSxpKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmxkLWljb25cIn0sW3QuX3QoXCJiZWZvcmVcIiksdC5fdChcImRlZmF1bHRcIixbaSh0LmxvYWRlcix7dGFnOlwiY29tcG9uZW50XCIsYXR0cnM6e2NvbG9yOnQuY29sb3Isd2lkdGg6dC53aWR0aCxoZWlnaHQ6dC5oZWlnaHR9fSldKSx0Ll90KFwiYWZ0ZXJcIildLDIpXSldKX0pLFtdLCExLG51bGwsbnVsbCxudWxsKS5leHBvcnRzLGM9ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O3JldHVybntzaG93OmZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmUscj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aSxhPXtwcm9ncmFtbWF0aWM6ITB9LG89T2JqZWN0LmFzc2lnbih7fSxlLG4sYSkscz1uZXcodC5leHRlbmQobCkpKHtlbDpkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHByb3BzRGF0YTpvfSksdT1PYmplY3QuYXNzaWduKHt9LGkscik7cmV0dXJuIE9iamVjdC5rZXlzKHUpLm1hcCgoZnVuY3Rpb24odCl7cy4kc2xvdHNbdF09dVt0XX0pKSxzfX19O2koMCk7bC5pbnN0YWxsPWZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxuPWModCxlLGkpO3QuJGxvYWRpbmc9bix0LnByb3RvdHlwZS4kbG9hZGluZz1ufTtlLmRlZmF1bHQ9bH1dKS5kZWZhdWx0fSkpOyIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSm9pbiA9IFtdLmpvaW47XG5cbnZhciBFUzNfU1RSSU5HUyA9IEluZGV4ZWRPYmplY3QgIT0gT2JqZWN0O1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdqb2luJywgJywnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBFUzNfU1RSSU5HUyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUpvaW4uY2FsbCh0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGl0KSBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9QcmltaXRpdmUoViwgdHJ1ZSk7XG4gIHZhciBlbnVtZXJhYmxlID0gbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywgUCkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzKHRoaXMsIFApIHx8ICFoYXMoQWxsU3ltYm9scywgUCkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdID8gZW51bWVyYWJsZSA6IHRydWU7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhoaWRkZW5LZXlzLCBrZXkpKSByZXN1bHQucHVzaChrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXMoT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgc2V0dGVyLmNhbGwoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICByZWRlZmluZSgkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChoYXMoU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhcyhTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eXN5bWJvbHNcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSkgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2QgYmVoYXZpb3Igd2l0aCBzeW1ib2xzXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gICAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG4gIH0pO1xuXG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRlkgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICAgIHZhciBpbmRleCA9IDE7XG4gICAgICB2YXIgJHJlcGxhY2VyO1xuICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpbmRleCkgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgICAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gJHN0cmluZ2lmeS5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0pIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG59XG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWxcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxuLy8gU2FmYXJpIGJ1ZyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjAwODI5XG52YXIgTk9OX0dFTkVSSUMgPSAhIU5hdGl2ZVByb21pc2UgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICBOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddLmNhbGwoeyB0aGVuOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IE5PTl9HRU5FUklDIH0sIHtcbiAgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHksXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5XG4gICAgKTtcbiAgfVxufSk7XG5cbi8vIHBhdGNoIG5hdGl2ZSBQcm9taXNlLnByb3RvdHlwZSBmb3IgbmF0aXZlIGFzeW5jIGZ1bmN0aW9uc1xuaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicgJiYgIU5hdGl2ZVByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10pIHtcbiAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICdmaW5hbGx5JywgZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnZmluYWxseSddKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG5cbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciBOYXRpdmVOdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBOdW1iZXJQcm90b3R5cGUgPSBOYXRpdmVOdW1iZXIucHJvdG90eXBlO1xuXG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ0xBU1NPRiA9IGNsYXNzb2YoY3JlYXRlKE51bWJlclByb3RvdHlwZSkpID09IE5VTUJFUjtcblxuLy8gYFRvTnVtYmVyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbnVtYmVyXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgdmFyIGZpcnN0LCB0aGlyZCwgcmFkaXgsIG1heENvZGUsIGRpZ2l0cywgbGVuZ3RoLCBpbmRleCwgY29kZTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IGl0LnNsaWNlKDIpO1xuICAgICAgbGVuZ3RoID0gZGlnaXRzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuLy8gYE51bWJlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKE5VTUJFUiwgIU5hdGl2ZU51bWJlcignIDBvMScpIHx8ICFOYXRpdmVOdW1iZXIoJzBiMScpIHx8IE5hdGl2ZU51bWJlcignKzB4MScpKSkge1xuICB2YXIgTnVtYmVyV3JhcHBlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciBkdW1teSA9IHRoaXM7XG4gICAgcmV0dXJuIGR1bW15IGluc3RhbmNlb2YgTnVtYmVyV3JhcHBlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NMQVNTT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IE51bWJlclByb3RvdHlwZS52YWx1ZU9mLmNhbGwoZHVtbXkpOyB9KSA6IGNsYXNzb2YoZHVtbXkpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlTnVtYmVyKHRvTnVtYmVyKGl0KSksIGR1bW15LCBOdW1iZXJXcmFwcGVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IERFU0NSSVBUT1JTID8gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVOdW1iZXIpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVMyMDE1IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVMyMDE1IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoTmF0aXZlTnVtYmVyLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKE51bWJlcldyYXBwZXIsIGtleSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KE51bWJlcldyYXBwZXIsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE5hdGl2ZU51bWJlciwga2V5KSk7XG4gICAgfVxuICB9XG4gIE51bWJlcldyYXBwZXIucHJvdG90eXBlID0gTnVtYmVyUHJvdG90eXBlO1xuICBOdW1iZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSBOdW1iZXJXcmFwcGVyO1xuICByZWRlZmluZShnbG9iYWwsIE5VTUJFUiwgTnVtYmVyV3JhcHBlcik7XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNhY2hlID0ge307XG5cbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKGl0KSB7IHRocm93IGl0OyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgb3B0aW9ucykge1xuICBpZiAoaGFzKGNhY2hlLCBNRVRIT0RfTkFNRSkpIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV07XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICB2YXIgQUNDRVNTT1JTID0gaGFzKG9wdGlvbnMsICdBQ0NFU1NPUlMnKSA/IG9wdGlvbnMuQUNDRVNTT1JTIDogZmFsc2U7XG4gIHZhciBhcmd1bWVudDAgPSBoYXMob3B0aW9ucywgMCkgPyBvcHRpb25zWzBdIDogdGhyb3dlcjtcbiAgdmFyIGFyZ3VtZW50MSA9IGhhcyhvcHRpb25zLCAxKSA/IG9wdGlvbnNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXSA9ICEhbWV0aG9kICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKEFDQ0VTU09SUyAmJiAhREVTQ1JJUFRPUlMpIHJldHVybiB0cnVlO1xuICAgIHZhciBPID0geyBsZW5ndGg6IC0xIH07XG5cbiAgICBpZiAoQUNDRVNTT1JTKSBkZWZpbmVQcm9wZXJ0eShPLCAxLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogdGhyb3dlciB9KTtcbiAgICBlbHNlIE9bMV0gPSAxO1xuXG4gICAgbWV0aG9kLmNhbGwoTywgYXJndW1lbnQwLCBhcmd1bWVudDEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhKE5BTUUgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcuY2FsbCh0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbi8vIE5vZGUuanMgMTEgc2hvd3MgRXhwZXJpbWVudGFsV2FybmluZyBvbiBnZXR0aW5nIGBxdWV1ZU1pY3JvdGFza2BcbnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTtcbnZhciBxdWV1ZU1pY3JvdGFzayA9IHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciAmJiBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IudmFsdWU7XG5cbnZhciBmbHVzaCwgaGVhZCwgbGFzdCwgbm90aWZ5LCB0b2dnbGUsIG5vZGUsIHByb21pc2UsIHRoZW47XG5cbi8vIG1vZGVybiBlbmdpbmVzIGhhdmUgcXVldWVNaWNyb3Rhc2sgbWV0aG9kXG5pZiAoIXF1ZXVlTWljcm90YXNrKSB7XG4gIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE11dGF0aW9uT2JzZXJ2ZXIgJiYgIUlTX0lPUykge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICBlbHNlIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlS2V5cygxKTsgfSk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdChpdCkpO1xuICB9XG59KTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsImltcG9ydCBsb2Rhc2hNZXJnZSBmcm9tICdsb2Rhc2gubWVyZ2UnO1xuXG4vKipcclxuICogQ3JlYXRlZCBieSBjaGFtcGlvbnN3aW1tZXIgb24gMjIvMDcvMTcuXHJcbiAqL1xyXG5sZXQgTW9ja1N0b3JhZ2U7XHJcbi8vIEB0cy1pZ25vcmVcclxue1xyXG4gICAgTW9ja1N0b3JhZ2UgPSBjbGFzcyB7XHJcbiAgICAgICAgZ2V0IGxlbmd0aCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMpLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAga2V5KGluZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKVtpbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldEl0ZW0oa2V5LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXNba2V5XSA9IGRhdGEudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2V0SXRlbShrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVtb3ZlSXRlbShrZXkpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2xlYXIoKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZTogdmFyaWFibGUtbmFtZVxyXG5jbGFzcyBTaW1wbGVQcm9taXNlUXVldWUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fcXVldWUgPSBbXTtcclxuICAgICAgICB0aGlzLl9mbHVzaGluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZW5xdWV1ZShwcm9taXNlKSB7XHJcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChwcm9taXNlKTtcclxuICAgICAgICBpZiAoIXRoaXMuX2ZsdXNoaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZsdXNoUXVldWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgZmx1c2hRdWV1ZSgpIHtcclxuICAgICAgICB0aGlzLl9mbHVzaGluZyA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgY2hhaW4gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRUYXNrID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgaWYgKG5leHRUYXNrKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFRhc2sudGhlbihjaGFpbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mbHVzaGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYWluKCkpO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIG1lcmdlKGludG8sIGZyb20pIHtcclxuICAgIHJldHVybiBsb2Rhc2hNZXJnZSh7fSwgaW50bywgZnJvbSk7XHJcbn1cblxubGV0IEZsYXR0ZWRKU09OID0gSlNPTjtcclxuLyoqXHJcbiAqIEEgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIHRoZSB2dWV4IHBlcnNpc3RlbmNlLlxyXG4gKiBAdHlwZSBTIHR5cGUgb2YgdGhlICdzdGF0ZScgaW5zaWRlIHRoZSBzdG9yZSAoZGVmYXVsdDogYW55KVxyXG4gKi9cclxuY2xhc3MgVnVleFBlcnNpc3RlbmNlIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEge0BsaW5rIFZ1ZXhQZXJzaXN0ZW5jZX0gb2JqZWN0LlxyXG4gICAgICogVXNlIHRoZSA8Y29kZT5wbHVnaW48L2NvZGU+IGZ1bmN0aW9uIG9mIHRoaXMgY2xhc3MgYXMgYVxyXG4gICAgICogVnVleCBwbHVnaW4uXHJcbiAgICAgKiBAcGFyYW0ge1BlcnNpc3RPcHRpb25zfSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gICAgICAgIHRoaXMuX211dGV4ID0gbmV3IFNpbXBsZVByb21pc2VRdWV1ZSgpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBzdWJzY3JpYmVyIG9uIHRoZSBzdG9yZS4gYXV0b21hdGljYWxseSBpcyB1c2VkXHJcbiAgICAgICAgICogd2hlbiB0aGlzIGlzIHVzZWQgYSB2dWV4IHBsdWdpbi4gTm90IGZvciBtYW51YWwgdXNhZ2UuXHJcbiAgICAgICAgICogQHBhcmFtIHN0b3JlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVyID0gKHN0b3JlKSA9PiAoaGFuZGxlcikgPT4gc3RvcmUuc3Vic2NyaWJlKGhhbmRsZXIpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICB0aGlzLmtleSA9ICgob3B0aW9ucy5rZXkgIT0gbnVsbCkgPyBvcHRpb25zLmtleSA6ICd2dWV4Jyk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdXBwb3J0Q2lyY3VsYXIgPSBvcHRpb25zLnN1cHBvcnRDaXJjdWxhciB8fCBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5zdXBwb3J0Q2lyY3VsYXIpIHtcclxuICAgICAgICAgICAgRmxhdHRlZEpTT04gPSByZXF1aXJlKCdmbGF0dGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2UgPSBvcHRpb25zLnN0b3JhZ2UgfHwgd2luZG93LmxvY2FsU3RvcmFnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlID0gb3B0aW9ucy5zdG9yYWdlIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5sb2NhbFN0b3JhZ2UgOiBuZXcgTW9ja1N0b3JhZ2UoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSG93IHRoaXMgd29ya3MgaXMgLVxyXG4gICAgICAgICAqICAxLiBJZiB0aGVyZSBpcyBvcHRpb25zLnJlZHVjZXIgZnVuY3Rpb24sIHdlIHVzZSB0aGF0LCBpZiBub3Q7XHJcbiAgICAgICAgICogIDIuIFdlIGNoZWNrIG9wdGlvbnMubW9kdWxlcztcclxuICAgICAgICAgKiAgICAxLiBJZiB0aGVyZSBpcyBubyBvcHRpb25zLm1vZHVsZXMgYXJyYXksIHdlIHVzZSBlbnRpcmUgc3RhdGUgaW4gcmVkdWNlclxyXG4gICAgICAgICAqICAgIDIuIE90aGVyd2lzZSwgd2UgY3JlYXRlIGEgcmVkdWNlciB0aGF0IG1lcmdlcyBhbGwgdGhvc2Ugc3RhdGUgbW9kdWxlcyB0aGF0IGFyZVxyXG4gICAgICAgICAqICAgICAgICBkZWZpbmVkIGluIHRoZSBvcHRpb25zLm1vZHVsZXNbXSBhcnJheVxyXG4gICAgICAgICAqIEB0eXBlIHsoKHN0YXRlOiBTKSA9PiB7fSkgfCAoKHN0YXRlOiBTKSA9PiBTKSB8ICgoc3RhdGU6IGFueSkgPT4ge30pfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucmVkdWNlciA9ICgob3B0aW9ucy5yZWR1Y2VyICE9IG51bGwpXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5yZWR1Y2VyXHJcbiAgICAgICAgICAgIDogKChvcHRpb25zLm1vZHVsZXMgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgID8gKChzdGF0ZSkgPT4gc3RhdGUpXHJcbiAgICAgICAgICAgICAgICA6ICgoc3RhdGUpID0+IG9wdGlvbnMubW9kdWxlcy5yZWR1Y2UoKGEsIGkpID0+IG1lcmdlKGEsIHsgW2ldOiBzdGF0ZVtpXSB9KSwgeyAvKiBzdGFydCBlbXB0eSBhY2N1bXVsYXRvciovfSkpKSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBvcHRpb25zLmZpbHRlciB8fCAoKG11dGF0aW9uKSA9PiB0cnVlKTtcclxuICAgICAgICB0aGlzLnN0cmljdE1vZGUgPSBvcHRpb25zLnN0cmljdE1vZGUgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5SRVNUT1JFX01VVEFUSU9OID0gZnVuY3Rpb24gUkVTVE9SRV9NVVRBVElPTihzdGF0ZSwgc2F2ZWRTdGF0ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBtZXJnZWRTdGF0ZSA9IG1lcmdlKHN0YXRlLCBzYXZlZFN0YXRlIHx8IHt9KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgb2YgT2JqZWN0LmtleXMobWVyZ2VkU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92bS4kc2V0KHN0YXRlLCBwcm9wZXJ0eU5hbWUsIG1lcmdlZFN0YXRlW3Byb3BlcnR5TmFtZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmFzeW5jU3RvcmFnZSA9IG9wdGlvbnMuYXN5bmNTdG9yYWdlIHx8IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmFzeW5jU3RvcmFnZSkge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQXN5bmMge0BsaW5rICNWdWV4UGVyc2lzdGVuY2UucmVzdG9yZVN0YXRlfSBpbXBsZW1lbnRhdGlvblxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7KChrZXk6IHN0cmluZywgc3RvcmFnZT86IFN0b3JhZ2UpID0+XHJcbiAgICAgICAgICAgICAqICAgICAgKFByb21pc2U8Uz4gfCBTKSkgfCAoKGtleTogc3RyaW5nLCBzdG9yYWdlOiBBc3luY1N0b3JhZ2UpID0+IFByb21pc2U8YW55Pil9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLnJlc3RvcmVTdGF0ZSA9ICgob3B0aW9ucy5yZXN0b3JlU3RhdGUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5yZXN0b3JlU3RhdGVcclxuICAgICAgICAgICAgICAgIDogKChrZXksIHN0b3JhZ2UpID0+IChzdG9yYWdlKS5nZXRJdGVtKGtleSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbigodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgLy8gSWYgc3RyaW5nLCBwYXJzZSwgb3IgZWxzZSwganVzdCByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICA/ICh0aGlzLnN1cHBvcnRDaXJjdWxhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IEZsYXR0ZWRKU09OLnBhcnNlKHZhbHVlIHx8ICd7fScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogSlNPTi5wYXJzZSh2YWx1ZSB8fCAne30nKSlcclxuICAgICAgICAgICAgICAgICAgICA6ICh2YWx1ZSB8fCB7fSkpKSk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBc3luYyB7QGxpbmsgI1Z1ZXhQZXJzaXN0ZW5jZS5zYXZlU3RhdGV9IGltcGxlbWVudGF0aW9uXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHsoKGtleTogc3RyaW5nLCBzdGF0ZToge30sIHN0b3JhZ2U/OiBTdG9yYWdlKSA9PlxyXG4gICAgICAgICAgICAgKiAgICAoUHJvbWlzZTx2b2lkPiB8IHZvaWQpKSB8ICgoa2V5OiBzdHJpbmcsIHN0YXRlOiB7fSwgc3RvcmFnZT86IFN0b3JhZ2UpID0+IFByb21pc2U8dm9pZD4pfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5zYXZlU3RhdGUgPSAoKG9wdGlvbnMuc2F2ZVN0YXRlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMuc2F2ZVN0YXRlXHJcbiAgICAgICAgICAgICAgICA6ICgoa2V5LCBzdGF0ZSwgc3RvcmFnZSkgPT4gKHN0b3JhZ2UpLnNldEl0ZW0oa2V5LCAvLyBTZWNvbmQgYXJndW1lbnQgaXMgc3RhdGUgX29iamVjdF8gaWYgYXN5YyBzdG9yYWdlLCBzdHJpbmdpZmllZCBvdGhlcndpc2VcclxuICAgICAgICAgICAgICAgIC8vIGRvIG5vdCBzdHJpbmdpZnkgdGhlIHN0YXRlIGlmIHRoZSBzdG9yYWdlIHR5cGUgaXMgYXN5bmNcclxuICAgICAgICAgICAgICAgICh0aGlzLmFzeW5jU3RvcmFnZVxyXG4gICAgICAgICAgICAgICAgICAgID8gbWVyZ2Uoe30sIHN0YXRlIHx8IHt9KVxyXG4gICAgICAgICAgICAgICAgICAgIDogKHRoaXMuc3VwcG9ydENpcmN1bGFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gRmxhdHRlZEpTT04uc3RyaW5naWZ5KHN0YXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IEpTT04uc3RyaW5naWZ5KHN0YXRlKSkpKSkpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQXN5bmMgdmVyc2lvbiBvZiBwbHVnaW5cclxuICAgICAgICAgICAgICogQHBhcmFtIHtTdG9yZTxTPn0gc3RvcmVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luID0gKHN0b3JlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEZvciBhc3luYyBzdG9yZXMsIHdlJ3JlIGNhcHR1cmluZyB0aGUgUHJvbWlzZSByZXR1cm5lZFxyXG4gICAgICAgICAgICAgICAgICogYnkgdGhlIGByZXN0b3JlU3RhdGUoKWAgZnVuY3Rpb24gaW4gYSBgcmVzdG9yZWRgIHByb3BlcnR5XHJcbiAgICAgICAgICAgICAgICAgKiBvbiB0aGUgc3RvcmUgaXRzZWxmLiBUaGlzIHdvdWxkIGFsbG93IGFwcCBkZXZlbG9wZXJzIHRvXHJcbiAgICAgICAgICAgICAgICAgKiBkZXRlcm1pbmUgd2hlbiBhbmQgaWYgdGhlIHN0b3JlJ3Mgc3RhdGUgaGFzIGluZGVlZCBiZWVuXHJcbiAgICAgICAgICAgICAgICAgKiByZWZyZXNoZWQuIFRoaXMgYXBwcm9hY2ggd2FzIHN1Z2dlc3RlZCBieSBHaXRIdWIgdXNlciBAaG90ZG9nZWUuXHJcbiAgICAgICAgICAgICAgICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYW1waW9uc3dpbW1lci92dWV4LXBlcnNpc3QvcHVsbC8xMTgjaXNzdWVjb21tZW50LTUwMDkxNDk2M1xyXG4gICAgICAgICAgICAgICAgICogQHNpbmNlIDIuMS4wXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHN0b3JlLnJlc3RvcmVkID0gKHRoaXMucmVzdG9yZVN0YXRlKHRoaXMua2V5LCB0aGlzLnN0b3JhZ2UpKS50aGVuKChzYXZlZFN0YXRlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgICAgICogSWYgaW4gc3RyaWN0IG1vZGUsIGRvIG9ubHkgdmlhIG11dGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RyaWN0TW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yZS5jb21taXQoJ1JFU1RPUkVfTVVUQVRJT04nLCBzYXZlZFN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlLnJlcGxhY2VTdGF0ZShtZXJnZShzdG9yZS5zdGF0ZSwgc2F2ZWRTdGF0ZSB8fCB7fSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIoc3RvcmUpKChtdXRhdGlvbiwgc3RhdGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyKG11dGF0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbXV0ZXguZW5xdWV1ZSh0aGlzLnNhdmVTdGF0ZSh0aGlzLmtleSwgdGhpcy5yZWR1Y2VyKHN0YXRlKSwgdGhpcy5zdG9yYWdlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogU3luYyB7QGxpbmsgI1Z1ZXhQZXJzaXN0ZW5jZS5yZXN0b3JlU3RhdGV9IGltcGxlbWVudGF0aW9uXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHsoKGtleTogc3RyaW5nLCBzdG9yYWdlPzogU3RvcmFnZSkgPT5cclxuICAgICAgICAgICAgICogICAgKFByb21pc2U8Uz4gfCBTKSkgfCAoKGtleTogc3RyaW5nLCBzdG9yYWdlOiBTdG9yYWdlKSA9PiAoYW55IHwgc3RyaW5nIHwge30pKX1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMucmVzdG9yZVN0YXRlID0gKChvcHRpb25zLnJlc3RvcmVTdGF0ZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnJlc3RvcmVTdGF0ZVxyXG4gICAgICAgICAgICAgICAgOiAoKGtleSwgc3RvcmFnZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKHN0b3JhZ2UpLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgeyAvLyBJZiBzdHJpbmcsIHBhcnNlLCBvciBlbHNlLCBqdXN0IHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuc3VwcG9ydENpcmN1bGFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IEZsYXR0ZWRKU09OLnBhcnNlKHZhbHVlIHx8ICd7fScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IEpTT04ucGFyc2UodmFsdWUgfHwgJ3t9JykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSB8fCB7fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogU3luYyB7QGxpbmsgI1Z1ZXhQZXJzaXN0ZW5jZS5zYXZlU3RhdGV9IGltcGxlbWVudGF0aW9uXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHsoKGtleTogc3RyaW5nLCBzdGF0ZToge30sIHN0b3JhZ2U/OiBTdG9yYWdlKSA9PlxyXG4gICAgICAgICAgICAgKiAgICAgKFByb21pc2U8dm9pZD4gfCB2b2lkKSkgfCAoKGtleTogc3RyaW5nLCBzdGF0ZToge30sIHN0b3JhZ2U/OiBTdG9yYWdlKSA9PiBQcm9taXNlPHZvaWQ+KX1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVN0YXRlID0gKChvcHRpb25zLnNhdmVTdGF0ZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnNhdmVTdGF0ZVxyXG4gICAgICAgICAgICAgICAgOiAoKGtleSwgc3RhdGUsIHN0b3JhZ2UpID0+IChzdG9yYWdlKS5zZXRJdGVtKGtleSwgLy8gU2Vjb25kIGFyZ3VtZW50IGlzIHN0YXRlIF9vYmplY3RfIGlmIGxvY2FsZm9yYWdlLCBzdHJpbmdpZmllZCBvdGhlcndpc2VcclxuICAgICAgICAgICAgICAgICh0aGlzLnN1cHBvcnRDaXJjdWxhclxyXG4gICAgICAgICAgICAgICAgICAgID8gRmxhdHRlZEpTT04uc3RyaW5naWZ5KHN0YXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkoc3RhdGUpKSkpKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFN5bmMgdmVyc2lvbiBvZiBwbHVnaW5cclxuICAgICAgICAgICAgICogQHBhcmFtIHtTdG9yZTxTPn0gc3RvcmVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luID0gKHN0b3JlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzYXZlZFN0YXRlID0gdGhpcy5yZXN0b3JlU3RhdGUodGhpcy5rZXksIHRoaXMuc3RvcmFnZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdHJpY3RNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcmUuY29tbWl0KCdSRVNUT1JFX01VVEFUSU9OJywgc2F2ZWRTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9yZS5yZXBsYWNlU3RhdGUobWVyZ2Uoc3RvcmUuc3RhdGUsIHNhdmVkU3RhdGUgfHwge30pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcihzdG9yZSkoKG11dGF0aW9uLCBzdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcihtdXRhdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlU3RhdGUodGhpcy5rZXksIHRoaXMucmVkdWNlcihzdGF0ZSksIHRoaXMuc3RvcmFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5leHBvcnQgZGVmYXVsdCBWdWV4UGVyc2lzdGVuY2U7XG5leHBvcnQgeyBNb2NrU3RvcmFnZSwgVnVleFBlcnNpc3RlbmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIG5hdGl2ZUluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnaW5kZXhPZicpO1xudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2luZGV4T2YnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMTogMCB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyBuYXRpdmVJbmRleE9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbiB9LCB7XG4gIGFzc2lnbjogYXNzaWduXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gSVNfUklHSFQgPyBsZW5ndGggLSAxIDogMDtcbiAgICB2YXIgaSA9IElTX1JJR0hUID8gLTEgOiAxO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPCAyKSB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBpZiAoSVNfUklHSFQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoO0lTX1JJR0hUID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4gIGxlZnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcbi8vIEZGNDktIGlzc3VlXG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIvKipcbiAqIExvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBTeW1ib2wgPSByb290LlN5bWJvbCxcbiAgICBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5LFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksXG4gICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICovXG5mdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIGtleXNJbik7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICBsZW5ndGggPSAxO1xuICAgIH1cbiAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gKi9cbmZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7XG4gKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gKiB9O1xuICpcbiAqIHZhciBvdGhlciA9IHtcbiAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAqIH07XG4gKlxuICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAqL1xudmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xufSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2U7XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoMSk7IH0pO1xudmFyIEZPUkNFRCA9ICFERVNDUklQVE9SUyB8fCBGQUlMU19PTl9QUklNSVRJVkVTO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UpIHtcbiAgICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICBpZiAoVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAgIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICBpZiAoIUlTX05PREUgJiYgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCAhPSAnZnVuY3Rpb24nKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG5cbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJ2YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgIVN5bWJvbC5zaGFtXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=