(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-vendors"],{"00ee":function(t,e,n){var r=n("b622"),o=r("toStringTag"),i={};i[o]="z",t.exports="[object z]"===String(i)},"0366":function(t,e,n){var r=n("1c0b");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},"057f":function(t,e,n){var r=n("fc6a"),o=n("241c").f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(e){return a.slice()}};t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?c(t):o(r(t))}},"06cf":function(t,e,n){var r=n("83ab"),o=n("d1e7"),i=n("5c6c"),a=n("fc6a"),c=n("c04e"),s=n("5135"),u=n("0cfb"),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=a(t),e=c(e,!0),u)try{return f(t,e)}catch(n){}if(s(t,e))return i(!o.f.call(t,e),t[e])}},"0cfb":function(t,e,n){var r=n("83ab"),o=n("d039"),i=n("cc12");t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},"14c3":function(t,e,n){var r=n("c6b6"),o=n("9263");t.exports=function(t,e){var n=t.exec;if("function"===typeof n){var i=n.call(t,e);if("object"!==typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},"159b":function(t,e,n){var r=n("da84"),o=n("fdbc"),i=n("17c2"),a=n("9112");for(var c in o){var s=r[c],u=s&&s.prototype;if(u&&u.forEach!==i)try{a(u,"forEach",i)}catch(f){u.forEach=i}}},"17c2":function(t,e,n){"use strict";var r=n("b727").forEach,o=n("a640"),i=n("ae40"),a=o("forEach"),c=i("forEach");t.exports=a&&c?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},"19aa":function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},"1be4":function(t,e,n){var r=n("d066");t.exports=r("document","documentElement")},"1c0b":function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},"1c7e":function(t,e,n){var r=n("b622"),o=r("iterator"),i=!1;try{var a=0,c={next:function(){return{done:!!a++}},return:function(){i=!0}};c[o]=function(){return this},Array.from(c,(function(){throw 2}))}catch(s){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var r={};r[o]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(s){}return n}},"1cdc":function(t,e,n){var r=n("342f");t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},"1d80":function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on "+t);return t}},"1dde":function(t,e,n){var r=n("d039"),o=n("b622"),i=n("2d00"),a=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[],n=e.constructor={};return n[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2266:function(t,e,n){var r=n("825a"),o=n("e95a"),i=n("50c4"),a=n("0366"),c=n("35a1"),s=n("9bdd"),u=function(t,e){this.stopped=t,this.result=e},f=t.exports=function(t,e,n,f,l){var p,d,h,v,y,m,g,b=a(e,n,f?2:1);if(l)p=t;else{if(d=c(t),"function"!=typeof d)throw TypeError("Target is not iterable");if(o(d)){for(h=0,v=i(t.length);v>h;h++)if(y=f?b(r(g=t[h])[0],g[1]):b(t[h]),y&&y instanceof u)return y;return new u(!1)}p=d.call(t)}m=p.next;while(!(g=m.call(p)).done)if(y=s(p,b,g.value,f),"object"==typeof y&&y&&y instanceof u)return y;return new u(!1)};f.stop=function(t){return new u(!0,t)}},"23cb":function(t,e,n){var r=n("a691"),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},"23e7":function(t,e,n){var r=n("da84"),o=n("06cf").f,i=n("9112"),a=n("6eeb"),c=n("ce4e"),s=n("e893"),u=n("94ca");t.exports=function(t,e){var n,f,l,p,d,h,v=t.target,y=t.global,m=t.stat;if(f=y?r:m?r[v]||c(v,{}):(r[v]||{}).prototype,f)for(l in e){if(d=e[l],t.noTargetGet?(h=o(f,l),p=h&&h.value):p=f[l],n=u(y?l:v+(m?".":"#")+l,t.forced),!n&&void 0!==p){if(typeof d===typeof p)continue;s(d,p)}(t.sham||p&&p.sham)&&i(d,"sham",!0),a(f,l,d,t)}}},"241c":function(t,e,n){var r=n("ca84"),o=n("7839"),i=o.concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},2626:function(t,e,n){"use strict";var r=n("d066"),o=n("9bf2"),i=n("b622"),a=n("83ab"),c=i("species");t.exports=function(t){var e=r(t),n=o.f;a&&e&&!e[c]&&n(e,c,{configurable:!0,get:function(){return this}})}},2877:function(t,e,n){"use strict";function r(t,e,n,r,o,i,a,c){var s,u="function"===typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(s=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||"undefined"===typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=s):o&&(s=c?function(){o.call(this,this.$root.$options.shadowRoot)}:o),s)if(u.functional){u._injectStyles=s;var f=u.render;u.render=function(t,e){return s.call(e),f(t,e)}}else{var l=u.beforeCreate;u.beforeCreate=l?[].concat(l,s):[s]}return{exports:t,options:u}}n.d(e,"a",(function(){return r}))},"2b0e":function(t,e,n){"use strict";(function(t){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var n=Object.freeze({});function r(t){return void 0===t||null===t}function o(t){return void 0!==t&&null!==t}function i(t){return!0===t}function a(t){return!1===t}function c(t){return"string"===typeof t||"number"===typeof t||"symbol"===typeof t||"boolean"===typeof t}function s(t){return null!==t&&"object"===typeof t}var u=Object.prototype.toString;function f(t){return"[object Object]"===u.call(t)}function l(t){return"[object RegExp]"===u.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return o(t)&&"function"===typeof t.then&&"function"===typeof t.catch}function h(t){return null==t?"":Array.isArray(t)||f(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function v(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}y("slot,component",!0);var m=y("key,ref,slot,slot-scope,is");function g(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(t,e){return b.call(t,e)}function w(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var x=/-(\w)/g,O=w((function(t){return t.replace(x,(function(t,e){return e?e.toUpperCase():""}))})),C=w((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),S=/\B([A-Z])/g,A=w((function(t){return t.replace(S,"-$1").toLowerCase()}));function $(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function E(t,e){return t.bind(e)}var k=Function.prototype.bind?E:$;function j(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function T(t,e){for(var n in e)t[n]=e[n];return t}function P(t){for(var e={},n=0;n<t.length;n++)t[n]&&T(e,t[n]);return e}function I(t,e,n){}var N=function(t,e,n){return!1},M=function(t){return t};function L(t,e){if(t===e)return!0;var n=s(t),r=s(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return L(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),c=Object.keys(e);return a.length===c.length&&a.every((function(n){return L(t[n],e[n])}))}catch(u){return!1}}function R(t,e){for(var n=0;n<t.length;n++)if(L(t[n],e))return n;return-1}function D(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var F="data-server-rendered",V=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:N,isReservedAttr:N,isUnknownElement:N,getTagNamespace:I,parsePlatformTagName:M,mustUseProp:N,async:!0,_lifecycleHooks:U},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function G(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function z(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=new RegExp("[^"+H.source+".$_\\d]");function X(t){if(!q.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}var K,W="__proto__"in{},Y="undefined"!==typeof window,J="undefined"!==typeof WXEnvironment&&!!WXEnvironment.platform,Q=J&&WXEnvironment.platform.toLowerCase(),Z=Y&&window.navigator.userAgent.toLowerCase(),tt=Z&&/msie|trident/.test(Z),et=Z&&Z.indexOf("msie 9.0")>0,nt=Z&&Z.indexOf("edge/")>0,rt=(Z&&Z.indexOf("android"),Z&&/iphone|ipad|ipod|ios/.test(Z)||"ios"===Q),ot=(Z&&/chrome\/\d+/.test(Z),Z&&/phantomjs/.test(Z),Z&&Z.match(/firefox\/(\d+)/)),it={}.watch,at=!1;if(Y)try{var ct={};Object.defineProperty(ct,"passive",{get:function(){at=!0}}),window.addEventListener("test-passive",null,ct)}catch(Oa){}var st=function(){return void 0===K&&(K=!Y&&!J&&"undefined"!==typeof t&&(t["process"]&&"server"===t["process"].env.VUE_ENV)),K},ut=Y&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ft(t){return"function"===typeof t&&/native code/.test(t.toString())}var lt,pt="undefined"!==typeof Symbol&&ft(Symbol)&&"undefined"!==typeof Reflect&&ft(Reflect.ownKeys);lt="undefined"!==typeof Set&&ft(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var dt=I,ht=0,vt=function(){this.id=ht++,this.subs=[]};vt.prototype.addSub=function(t){this.subs.push(t)},vt.prototype.removeSub=function(t){g(this.subs,t)},vt.prototype.depend=function(){vt.target&&vt.target.addDep(this)},vt.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},vt.target=null;var yt=[];function mt(t){yt.push(t),vt.target=t}function gt(){yt.pop(),vt.target=yt[yt.length-1]}var bt=function(t,e,n,r,o,i,a,c){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=c,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},_t={child:{configurable:!0}};_t.child.get=function(){return this.componentInstance},Object.defineProperties(bt.prototype,_t);var wt=function(t){void 0===t&&(t="");var e=new bt;return e.text=t,e.isComment=!0,e};function xt(t){return new bt(void 0,void 0,void 0,String(t))}function Ot(t){var e=new bt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var Ct=Array.prototype,St=Object.create(Ct),At=["push","pop","shift","unshift","splice","sort","reverse"];At.forEach((function(t){var e=Ct[t];z(St,t,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2);break}return o&&a.observeArray(o),a.dep.notify(),i}))}));var $t=Object.getOwnPropertyNames(St),Et=!0;function kt(t){Et=t}var jt=function(t){this.value=t,this.dep=new vt,this.vmCount=0,z(t,"__ob__",this),Array.isArray(t)?(W?Tt(t,St):Pt(t,St,$t),this.observeArray(t)):this.walk(t)};function Tt(t,e){t.__proto__=e}function Pt(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];z(t,i,e[i])}}function It(t,e){var n;if(s(t)&&!(t instanceof bt))return _(t,"__ob__")&&t.__ob__ instanceof jt?n=t.__ob__:Et&&!st()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new jt(t)),e&&n&&n.vmCount++,n}function Nt(t,e,n,r,o){var i=new vt,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var c=a&&a.get,s=a&&a.set;c&&!s||2!==arguments.length||(n=t[e]);var u=!o&&It(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(t):n;return vt.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&Rt(e))),e},set:function(e){var r=c?c.call(t):n;e===r||e!==e&&r!==r||c&&!s||(s?s.call(t,e):n=e,u=!o&&It(e),i.notify())}})}}function Mt(t,e,n){if(Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(Nt(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function Lt(t,e){if(Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||_(t,e)&&(delete t[e],n&&n.dep.notify())}}function Rt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Rt(e)}jt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Nt(t,e[n])},jt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)It(t[e])};var Dt=B.optionMergeStrategies;function Ft(t,e){if(!e)return t;for(var n,r,o,i=pt?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)n=i[a],"__ob__"!==n&&(r=t[n],o=e[n],_(t,n)?r!==o&&f(r)&&f(o)&&Ft(r,o):Mt(t,n,o));return t}function Vt(t,e,n){return n?function(){var r="function"===typeof e?e.call(n,n):e,o="function"===typeof t?t.call(n,n):t;return r?Ft(r,o):o}:e?t?function(){return Ft("function"===typeof e?e.call(this,this):e,"function"===typeof t?t.call(this,this):t)}:e:t}function Ut(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?Bt(n):n}function Bt(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function Ht(t,e,n,r){var o=Object.create(t||null);return e?T(o,e):o}Dt.data=function(t,e,n){return n?Vt(t,e,n):e&&"function"!==typeof e?t:Vt(t,e)},U.forEach((function(t){Dt[t]=Ut})),V.forEach((function(t){Dt[t+"s"]=Ht})),Dt.watch=function(t,e,n,r){if(t===it&&(t=void 0),e===it&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in T(o,t),e){var a=o[i],c=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(c):Array.isArray(c)?c:[c]}return o},Dt.props=Dt.methods=Dt.inject=Dt.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return T(o,t),e&&T(o,e),o},Dt.provide=Vt;var Gt=function(t,e){return void 0===e?t:e};function zt(t,e){var n=t.props;if(n){var r,o,i,a={};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],"string"===typeof o&&(i=O(o),a[i]={type:null})}else if(f(n))for(var c in n)o=n[c],i=O(c),a[i]=f(o)?o:{type:o};else 0;t.props=a}}function qt(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var a=n[i];r[i]=f(a)?T({from:i},a):{from:a}}else 0}}function Xt(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"===typeof r&&(e[n]={bind:r,update:r})}}function Kt(t,e,n){if("function"===typeof e&&(e=e.options),zt(e,n),qt(e,n),Xt(e),!e._base&&(e.extends&&(t=Kt(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=Kt(t,e.mixins[r],n);var i,a={};for(i in t)c(i);for(i in e)_(t,i)||c(i);function c(r){var o=Dt[r]||Gt;a[r]=o(t[r],e[r],n,r)}return a}function Wt(t,e,n,r){if("string"===typeof n){var o=t[e];if(_(o,n))return o[n];var i=O(n);if(_(o,i))return o[i];var a=C(i);if(_(o,a))return o[a];var c=o[n]||o[i]||o[a];return c}}function Yt(t,e,n,r){var o=e[t],i=!_(n,t),a=n[t],c=te(Boolean,o.type);if(c>-1)if(i&&!_(o,"default"))a=!1;else if(""===a||a===A(t)){var s=te(String,o.type);(s<0||c<s)&&(a=!0)}if(void 0===a){a=Jt(r,o,t);var u=Et;kt(!0),It(a),kt(u)}return a}function Jt(t,e,n){if(_(e,"default")){var r=e.default;return t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"===typeof r&&"Function"!==Qt(e.type)?r.call(t):r}}function Qt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Zt(t,e){return Qt(t)===Qt(e)}function te(t,e){if(!Array.isArray(e))return Zt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Zt(e[n],t))return n;return-1}function ee(t,e,n){mt();try{if(e){var r=e;while(r=r.$parent){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var a=!1===o[i].call(r,t,e,n);if(a)return}catch(Oa){re(Oa,r,"errorCaptured hook")}}}re(t,e,n)}finally{gt()}}function ne(t,e,n,r,o){var i;try{i=n?t.apply(e,n):t.call(e),i&&!i._isVue&&d(i)&&!i._handled&&(i.catch((function(t){return ee(t,r,o+" (Promise/async)")})),i._handled=!0)}catch(Oa){ee(Oa,r,o)}return i}function re(t,e,n){if(B.errorHandler)try{return B.errorHandler.call(null,t,e,n)}catch(Oa){Oa!==t&&oe(Oa,null,"config.errorHandler")}oe(t,e,n)}function oe(t,e,n){if(!Y&&!J||"undefined"===typeof console)throw t;console.error(t)}var ie,ae=!1,ce=[],se=!1;function ue(){se=!1;var t=ce.slice(0);ce.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!==typeof Promise&&ft(Promise)){var fe=Promise.resolve();ie=function(){fe.then(ue),rt&&setTimeout(I)},ae=!0}else if(tt||"undefined"===typeof MutationObserver||!ft(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ie="undefined"!==typeof setImmediate&&ft(setImmediate)?function(){setImmediate(ue)}:function(){setTimeout(ue,0)};else{var le=1,pe=new MutationObserver(ue),de=document.createTextNode(String(le));pe.observe(de,{characterData:!0}),ie=function(){le=(le+1)%2,de.data=String(le)},ae=!0}function he(t,e){var n;if(ce.push((function(){if(t)try{t.call(e)}catch(Oa){ee(Oa,e,"nextTick")}else n&&n(e)})),se||(se=!0,ie()),!t&&"undefined"!==typeof Promise)return new Promise((function(t){n=t}))}var ve=new lt;function ye(t){me(t,ve),ve.clear()}function me(t,e){var n,r,o=Array.isArray(t);if(!(!o&&!s(t)||Object.isFrozen(t)||t instanceof bt)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(o){n=t.length;while(n--)me(t[n],e)}else{r=Object.keys(t),n=r.length;while(n--)me(t[r[n]],e)}}}var ge=w((function(t){var e="&"===t.charAt(0);t=e?t.slice(1):t;var n="~"===t.charAt(0);t=n?t.slice(1):t;var r="!"===t.charAt(0);return t=r?t.slice(1):t,{name:t,once:n,capture:r,passive:e}}));function be(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return ne(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)ne(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function _e(t,e,n,o,a,c){var s,u,f,l;for(s in t)u=t[s],f=e[s],l=ge(s),r(u)||(r(f)?(r(u.fns)&&(u=t[s]=be(u,c)),i(l.once)&&(u=t[s]=a(l.name,u,l.capture)),n(l.name,u,l.capture,l.passive,l.params)):u!==f&&(f.fns=u,t[s]=f));for(s in e)r(t[s])&&(l=ge(s),o(l.name,e[s],l.capture))}function we(t,e,n){var a;t instanceof bt&&(t=t.data.hook||(t.data.hook={}));var c=t[e];function s(){n.apply(this,arguments),g(a.fns,s)}r(c)?a=be([s]):o(c.fns)&&i(c.merged)?(a=c,a.fns.push(s)):a=be([c,s]),a.merged=!0,t[e]=a}function xe(t,e,n){var i=e.options.props;if(!r(i)){var a={},c=t.attrs,s=t.props;if(o(c)||o(s))for(var u in i){var f=A(u);Oe(a,s,u,f,!0)||Oe(a,c,u,f,!1)}return a}}function Oe(t,e,n,r,i){if(o(e)){if(_(e,n))return t[n]=e[n],i||delete e[n],!0;if(_(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Ce(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function Se(t){return c(t)?[xt(t)]:Array.isArray(t)?$e(t):void 0}function Ae(t){return o(t)&&o(t.text)&&a(t.isComment)}function $e(t,e){var n,a,s,u,f=[];for(n=0;n<t.length;n++)a=t[n],r(a)||"boolean"===typeof a||(s=f.length-1,u=f[s],Array.isArray(a)?a.length>0&&(a=$e(a,(e||"")+"_"+n),Ae(a[0])&&Ae(u)&&(f[s]=xt(u.text+a[0].text),a.shift()),f.push.apply(f,a)):c(a)?Ae(u)?f[s]=xt(u.text+a):""!==a&&f.push(xt(a)):Ae(a)&&Ae(u)?f[s]=xt(u.text+a.text):(i(t._isVList)&&o(a.tag)&&r(a.key)&&o(e)&&(a.key="__vlist"+e+"_"+n+"__"),f.push(a)));return f}function Ee(t){var e=t.$options.provide;e&&(t._provided="function"===typeof e?e.call(t):e)}function ke(t){var e=je(t.$options.inject,t);e&&(kt(!1),Object.keys(e).forEach((function(n){Nt(t,n,e[n])})),kt(!0))}function je(t,e){if(t){for(var n=Object.create(null),r=pt?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){var a=t[i].from,c=e;while(c){if(c._provided&&_(c._provided,a)){n[i]=c._provided[a];break}c=c.$parent}if(!c)if("default"in t[i]){var s=t[i].default;n[i]="function"===typeof s?s.call(e):s}else 0}}return n}}function Te(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var c=a.slot,s=n[c]||(n[c]=[]);"template"===i.tag?s.push.apply(s,i.children||[]):s.push(i)}}for(var u in n)n[u].every(Pe)&&delete n[u];return n}function Pe(t){return t.isComment&&!t.asyncFactory||" "===t.text}function Ie(t,e,r){var o,i=Object.keys(e).length>0,a=t?!!t.$stable:!i,c=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&c===r.$key&&!i&&!r.$hasNormal)return r;for(var s in o={},t)t[s]&&"$"!==s[0]&&(o[s]=Ne(e,s,t[s]))}else o={};for(var u in e)u in o||(o[u]=Me(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),z(o,"$stable",a),z(o,"$key",c),z(o,"$hasNormal",i),o}function Ne(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&"object"===typeof t&&!Array.isArray(t)?[t]:Se(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function Me(t,e){return function(){return t[e]}}function Le(t,e){var n,r,i,a,c;if(Array.isArray(t)||"string"===typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"===typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(s(t))if(pt&&t[Symbol.iterator]){n=[];var u=t[Symbol.iterator](),f=u.next();while(!f.done)n.push(e(f.value,n.length)),f=u.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)c=a[r],n[r]=e(t[c],c,r);return o(n)||(n=[]),n._isVList=!0,n}function Re(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=T(T({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function De(t){return Wt(this.$options,"filters",t,!0)||M}function Fe(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function Ve(t,e,n,r,o){var i=B.keyCodes[e]||n;return o&&r&&!B.keyCodes[e]?Fe(o,r):i?Fe(i,t):r?A(r)!==e:void 0}function Ue(t,e,n,r,o){if(n)if(s(n)){var i;Array.isArray(n)&&(n=P(n));var a=function(a){if("class"===a||"style"===a||m(a))i=t;else{var c=t.attrs&&t.attrs.type;i=r||B.mustUseProp(e,c,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var s=O(a),u=A(a);if(!(s in i)&&!(u in i)&&(i[a]=n[a],o)){var f=t.on||(t.on={});f["update:"+a]=function(t){n[a]=t}}};for(var c in n)a(c)}else;return t}function Be(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),Ge(r,"__static__"+t,!1)),r}function He(t,e,n){return Ge(t,"__once__"+e+(n?"_"+n:""),!0),t}function Ge(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!==typeof t[r]&&ze(t[r],e+"_"+r,n);else ze(t,e,n)}function ze(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function qe(t,e){if(e)if(f(e)){var n=t.on=t.on?T({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function Xe(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?Xe(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Ke(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"===typeof r&&r&&(t[e[n]]=e[n+1])}return t}function We(t,e){return"string"===typeof t?e+t:t}function Ye(t){t._o=He,t._n=v,t._s=h,t._l=Le,t._t=Re,t._q=L,t._i=R,t._m=Be,t._f=De,t._k=Ve,t._b=Ue,t._v=xt,t._e=wt,t._u=Xe,t._g=qe,t._d=Ke,t._p=We}function Je(t,e,r,o,a){var c,s=this,u=a.options;_(o,"_uid")?(c=Object.create(o),c._original=o):(c=o,o=o._original);var f=i(u._compiled),l=!f;this.data=t,this.props=e,this.children=r,this.parent=o,this.listeners=t.on||n,this.injections=je(u.inject,o),this.slots=function(){return s.$slots||Ie(t.scopedSlots,s.$slots=Te(r,o)),s.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Ie(t.scopedSlots,this.slots())}}),f&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=Ie(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var i=ln(c,t,e,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return ln(c,t,e,n,r,l)}}function Qe(t,e,r,i,a){var c=t.options,s={},u=c.props;if(o(u))for(var f in u)s[f]=Yt(f,u,e||n);else o(r.attrs)&&tn(s,r.attrs),o(r.props)&&tn(s,r.props);var l=new Je(r,s,a,i,t),p=c.render.call(null,l._c,l);if(p instanceof bt)return Ze(p,r,l.parent,c,l);if(Array.isArray(p)){for(var d=Se(p)||[],h=new Array(d.length),v=0;v<d.length;v++)h[v]=Ze(d[v],r,l.parent,c,l);return h}}function Ze(t,e,n,r,o){var i=Ot(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function tn(t,e){for(var n in e)t[O(n)]=e[n]}Ye(Je.prototype);var en={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;en.prepatch(n,n)}else{var r=t.componentInstance=on(t,jn);r.$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions,r=e.componentInstance=t.componentInstance;Mn(r,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,Fn(n,"mounted")),t.data.keepAlive&&(e._isMounted?Qn(n):Rn(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?Dn(e,!0):e.$destroy())}},nn=Object.keys(en);function rn(t,e,n,a,c){if(!r(t)){var u=n.$options._base;if(s(t)&&(t=u.extend(t)),"function"===typeof t){var f;if(r(t.cid)&&(f=t,t=wn(f,u),void 0===t))return _n(f,e,n,a,c);e=e||{},wr(t),o(e.model)&&sn(t.options,e);var l=xe(e,t,c);if(i(t.options.functional))return Qe(t,l,e,n,a);var p=e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var d=e.slot;e={},d&&(e.slot=d)}an(e);var h=t.options.name||c,v=new bt("vue-component-"+t.cid+(h?"-"+h:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:l,listeners:p,tag:c,children:a},f);return v}}}function on(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}function an(t){for(var e=t.hook||(t.hook={}),n=0;n<nn.length;n++){var r=nn[n],o=e[r],i=en[r];o===i||o&&o._merged||(e[r]=o?cn(i,o):i)}}function cn(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function sn(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[r],c=e.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(c):a!==c)&&(i[r]=[c].concat(a)):i[r]=c}var un=1,fn=2;function ln(t,e,n,r,o,a){return(Array.isArray(n)||c(n))&&(o=r,r=n,n=void 0),i(a)&&(o=fn),pn(t,e,n,r,o)}function pn(t,e,n,r,i){if(o(n)&&o(n.__ob__))return wt();if(o(n)&&o(n.is)&&(e=n.is),!e)return wt();var a,c,s;(Array.isArray(r)&&"function"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===fn?r=Se(r):i===un&&(r=Ce(r)),"string"===typeof e)?(c=t.$vnode&&t.$vnode.ns||B.getTagNamespace(e),a=B.isReservedTag(e)?new bt(B.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!o(s=Wt(t.$options,"components",e))?new bt(e,n,r,void 0,void 0,t):rn(s,n,t,r,e)):a=rn(e,n,t,r);return Array.isArray(a)?a:o(a)?(o(c)&&dn(a,c),o(n)&&hn(n),a):wt()}function dn(t,e,n){if(t.ns=e,"foreignObject"===t.tag&&(e=void 0,n=!0),o(t.children))for(var a=0,c=t.children.length;a<c;a++){var s=t.children[a];o(s.tag)&&(r(s.ns)||i(n)&&"svg"!==s.tag)&&dn(s,e,n)}}function hn(t){s(t.style)&&ye(t.style),s(t.class)&&ye(t.class)}function vn(t){t._vnode=null,t._staticTrees=null;var e=t.$options,r=t.$vnode=e._parentVnode,o=r&&r.context;t.$slots=Te(e._renderChildren,o),t.$scopedSlots=n,t._c=function(e,n,r,o){return ln(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return ln(t,e,n,r,o,!0)};var i=r&&r.data;Nt(t,"$attrs",i&&i.attrs||n,null,!0),Nt(t,"$listeners",e._parentListeners||n,null,!0)}var yn,mn=null;function gn(t){Ye(t.prototype),t.prototype.$nextTick=function(t){return he(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=Ie(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{mn=e,t=r.call(e._renderProxy,e.$createElement)}catch(Oa){ee(Oa,e,"render"),t=e._vnode}finally{mn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof bt||(t=wt()),t.parent=o,t}}function bn(t,e){return(t.__esModule||pt&&"Module"===t[Symbol.toStringTag])&&(t=t.default),s(t)?e.extend(t):t}function _n(t,e,n,r,o){var i=wt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}function wn(t,e){if(i(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;var n=mn;if(n&&o(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),i(t.loading)&&o(t.loadingComp))return t.loadingComp;if(n&&!o(t.owners)){var a=t.owners=[n],c=!0,u=null,f=null;n.$on("hook:destroyed",(function(){return g(a,n)}));var l=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==u&&(clearTimeout(u),u=null),null!==f&&(clearTimeout(f),f=null))},p=D((function(n){t.resolved=bn(n,e),c?a.length=0:l(!0)})),h=D((function(e){o(t.errorComp)&&(t.error=!0,l(!0))})),v=t(p,h);return s(v)&&(d(v)?r(t.resolved)&&v.then(p,h):d(v.component)&&(v.component.then(p,h),o(v.error)&&(t.errorComp=bn(v.error,e)),o(v.loading)&&(t.loadingComp=bn(v.loading,e),0===v.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,l(!1))}),v.delay||200)),o(v.timeout)&&(f=setTimeout((function(){f=null,r(t.resolved)&&h(null)}),v.timeout)))),c=!1,t.loading?t.loadingComp:t.resolved}}function xn(t){return t.isComment&&t.asyncFactory}function On(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||xn(n)))return n}}function Cn(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&En(t,e)}function Sn(t,e){yn.$on(t,e)}function An(t,e){yn.$off(t,e)}function $n(t,e){var n=yn;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function En(t,e,n){yn=t,_e(e,n||{},Sn,An,$n,t),yn=void 0}function kn(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;var c=a.length;while(c--)if(i=a[c],i===e||i.fn===e){a.splice(c,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?j(n):n;for(var r=j(arguments,1),o='event handler for "'+t+'"',i=0,a=n.length;i<a;i++)ne(n[i],e,r,e,o)}return e}}var jn=null;function Tn(t){var e=jn;return jn=t,function(){jn=e}}function Pn(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function In(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Tn(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Fn(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||g(e.$children,t),t._watcher&&t._watcher.teardown();var n=t._watchers.length;while(n--)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Fn(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}function Nn(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=wt),Fn(t,"beforeMount"),r=function(){t._update(t._render(),n)},new nr(t,r,I,{before:function(){t._isMounted&&!t._isDestroyed&&Fn(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Fn(t,"mounted")),t}function Mn(t,e,r,o,i){var a=o.data.scopedSlots,c=t.$scopedSlots,s=!!(a&&!a.$stable||c!==n&&!c.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||s);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){kt(!1);for(var f=t._props,l=t.$options._propKeys||[],p=0;p<l.length;p++){var d=l[p],h=t.$options.props;f[d]=Yt(d,h,e,t)}kt(!0),t.$options.propsData=e}r=r||n;var v=t.$options._parentListeners;t.$options._parentListeners=r,En(t,r,v),u&&(t.$slots=Te(i,o.context),t.$forceUpdate())}function Ln(t){while(t&&(t=t.$parent))if(t._inactive)return!0;return!1}function Rn(t,e){if(e){if(t._directInactive=!1,Ln(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Rn(t.$children[n]);Fn(t,"activated")}}function Dn(t,e){if((!e||(t._directInactive=!0,!Ln(t)))&&!t._inactive){t._inactive=!0;for(var n=0;n<t.$children.length;n++)Dn(t.$children[n]);Fn(t,"deactivated")}}function Fn(t,e){mt();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)ne(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),gt()}var Vn=[],Un=[],Bn={},Hn=!1,Gn=!1,zn=0;function qn(){zn=Vn.length=Un.length=0,Bn={},Hn=Gn=!1}var Xn=0,Kn=Date.now;if(Y&&!tt){var Wn=window.performance;Wn&&"function"===typeof Wn.now&&Kn()>document.createEvent("Event").timeStamp&&(Kn=function(){return Wn.now()})}function Yn(){var t,e;for(Xn=Kn(),Gn=!0,Vn.sort((function(t,e){return t.id-e.id})),zn=0;zn<Vn.length;zn++)t=Vn[zn],t.before&&t.before(),e=t.id,Bn[e]=null,t.run();var n=Un.slice(),r=Vn.slice();qn(),Zn(n),Jn(r),ut&&B.devtools&&ut.emit("flush")}function Jn(t){var e=t.length;while(e--){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Fn(r,"updated")}}function Qn(t){t._inactive=!1,Un.push(t)}function Zn(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Rn(t[e],!0)}function tr(t){var e=t.id;if(null==Bn[e]){if(Bn[e]=!0,Gn){var n=Vn.length-1;while(n>zn&&Vn[n].id>t.id)n--;Vn.splice(n+1,0,t)}else Vn.push(t);Hn||(Hn=!0,he(Yn))}}var er=0,nr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++er,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new lt,this.newDepIds=new lt,this.expression="","function"===typeof e?this.getter=e:(this.getter=X(e),this.getter||(this.getter=I)),this.value=this.lazy?void 0:this.get()};nr.prototype.get=function(){var t;mt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(Oa){if(!this.user)throw Oa;ee(Oa,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ye(t),gt(),this.cleanupDeps()}return t},nr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},nr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},nr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():tr(this)},nr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||s(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(Oa){ee(Oa,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},nr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},nr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},nr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var rr={enumerable:!0,configurable:!0,get:I,set:I};function or(t,e,n){rr.get=function(){return this[e][n]},rr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,rr)}function ir(t){t._watchers=[];var e=t.$options;e.props&&ar(t,e.props),e.methods&&hr(t,e.methods),e.data?cr(t):It(t._data={},!0),e.computed&&fr(t,e.computed),e.watch&&e.watch!==it&&vr(t,e.watch)}function ar(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[],i=!t.$parent;i||kt(!1);var a=function(i){o.push(i);var a=Yt(i,e,n,t);Nt(r,i,a),i in t||or(t,"_props",i)};for(var c in e)a(c);kt(!0)}function cr(t){var e=t.$options.data;e=t._data="function"===typeof e?sr(e,t):e||{},f(e)||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);while(o--){var i=n[o];0,r&&_(r,i)||G(i)||or(t,"_data",i)}It(e,!0)}function sr(t,e){mt();try{return t.call(e,e)}catch(Oa){return ee(Oa,e,"data()"),{}}finally{gt()}}var ur={lazy:!0};function fr(t,e){var n=t._computedWatchers=Object.create(null),r=st();for(var o in e){var i=e[o],a="function"===typeof i?i:i.get;0,r||(n[o]=new nr(t,a||I,I,ur)),o in t||lr(t,o,i)}}function lr(t,e,n){var r=!st();"function"===typeof n?(rr.get=r?pr(e):dr(n),rr.set=I):(rr.get=n.get?r&&!1!==n.cache?pr(e):dr(n.get):I,rr.set=n.set||I),Object.defineProperty(t,e,rr)}function pr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),vt.target&&e.depend(),e.value}}function dr(t){return function(){return t.call(this,this)}}function hr(t,e){t.$options.props;for(var n in e)t[n]="function"!==typeof e[n]?I:k(e[n],t)}function vr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)yr(t,n,r[o]);else yr(t,n,r)}}function yr(t,e,n,r){return f(n)&&(r=n,n=n.handler),"string"===typeof n&&(n=t[n]),t.$watch(e,n,r)}function mr(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=Mt,t.prototype.$delete=Lt,t.prototype.$watch=function(t,e,n){var r=this;if(f(e))return yr(r,t,e,n);n=n||{},n.user=!0;var o=new nr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(i){ee(i,r,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}var gr=0;function br(t){t.prototype._init=function(t){var e=this;e._uid=gr++,e._isVue=!0,t&&t._isComponent?_r(e,t):e.$options=Kt(wr(e.constructor),t||{},e),e._renderProxy=e,e._self=e,Pn(e),Cn(e),vn(e),Fn(e,"beforeCreate"),ke(e),ir(e),Ee(e),Fn(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}function _r(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function wr(t){var e=t.options;if(t.super){var n=wr(t.super),r=t.superOptions;if(n!==r){t.superOptions=n;var o=xr(t);o&&T(t.extendOptions,o),e=t.options=Kt(n,t.extendOptions),e.name&&(e.components[e.name]=t)}}return e}function xr(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}function Or(t){this._init(t)}function Cr(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=j(arguments,1);return n.unshift(this),"function"===typeof t.install?t.install.apply(t,n):"function"===typeof t&&t.apply(null,n),e.push(t),this}}function Sr(t){t.mixin=function(t){return this.options=Kt(this.options,t),this}}function Ar(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=Kt(n.options,t),a["super"]=n,a.options.props&&$r(a),a.options.computed&&Er(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,V.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=T({},a.options),o[r]=a,a}}function $r(t){var e=t.options.props;for(var n in e)or(t.prototype,"_props",n)}function Er(t){var e=t.options.computed;for(var n in e)lr(t.prototype,n,e[n])}function kr(t){V.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&f(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"===typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}function jr(t){return t&&(t.Ctor.options.name||t.tag)}function Tr(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"===typeof t?t.split(",").indexOf(e)>-1:!!l(t)&&t.test(e)}function Pr(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var c=jr(a.componentOptions);c&&!e(c)&&Ir(n,i,r,o)}}}function Ir(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}br(Or),mr(Or),kn(Or),In(Or),gn(Or);var Nr=[String,RegExp,Array],Mr={name:"keep-alive",abstract:!0,props:{include:Nr,exclude:Nr,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Ir(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){Pr(t,(function(t){return Tr(e,t)}))})),this.$watch("exclude",(function(e){Pr(t,(function(t){return!Tr(e,t)}))}))},render:function(){var t=this.$slots.default,e=On(t),n=e&&e.componentOptions;if(n){var r=jr(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!Tr(i,r))||a&&r&&Tr(a,r))return e;var c=this,s=c.cache,u=c.keys,f=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;s[f]?(e.componentInstance=s[f].componentInstance,g(u,f),u.push(f)):(s[f]=e,u.push(f),this.max&&u.length>parseInt(this.max)&&Ir(s,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},Lr={KeepAlive:Mr};function Rr(t){var e={get:function(){return B}};Object.defineProperty(t,"config",e),t.util={warn:dt,extend:T,mergeOptions:Kt,defineReactive:Nt},t.set=Mt,t.delete=Lt,t.nextTick=he,t.observable=function(t){return It(t),t},t.options=Object.create(null),V.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,T(t.options.components,Lr),Cr(t),Sr(t),Ar(t),kr(t)}Rr(Or),Object.defineProperty(Or.prototype,"$isServer",{get:st}),Object.defineProperty(Or.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Or,"FunctionalRenderContext",{value:Je}),Or.version="2.6.11";var Dr=y("style,class"),Fr=y("input,textarea,option,select,progress"),Vr=function(t,e,n){return"value"===n&&Fr(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Ur=y("contenteditable,draggable,spellcheck"),Br=y("events,caret,typing,plaintext-only"),Hr=function(t,e){return Kr(e)||"false"===e?"false":"contenteditable"===t&&Br(e)?e:"true"},Gr=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),zr="http://www.w3.org/1999/xlink",qr=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Xr=function(t){return qr(t)?t.slice(6,t.length):""},Kr=function(t){return null==t||!1===t};function Wr(t){var e=t.data,n=t,r=t;while(o(r.componentInstance))r=r.componentInstance._vnode,r&&r.data&&(e=Yr(r.data,e));while(o(n=n.parent))n&&n.data&&(e=Yr(e,n.data));return Jr(e.staticClass,e.class)}function Yr(t,e){return{staticClass:Qr(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function Jr(t,e){return o(t)||o(e)?Qr(t,Zr(e)):""}function Qr(t,e){return t?e?t+" "+e:t:e||""}function Zr(t){return Array.isArray(t)?to(t):s(t)?eo(t):"string"===typeof t?t:""}function to(t){for(var e,n="",r=0,i=t.length;r<i;r++)o(e=Zr(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}function eo(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}var no={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ro=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),oo=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),io=function(t){return ro(t)||oo(t)};function ao(t){return oo(t)?"svg":"math"===t?"math":void 0}var co=Object.create(null);function so(t){if(!Y)return!0;if(io(t))return!1;if(t=t.toLowerCase(),null!=co[t])return co[t];var e=document.createElement(t);return t.indexOf("-")>-1?co[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:co[t]=/HTMLUnknownElement/.test(e.toString())}var uo=y("text,number,password,search,email,tel,url");function fo(t){if("string"===typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}function lo(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n}function po(t,e){return document.createElementNS(no[t],e)}function ho(t){return document.createTextNode(t)}function vo(t){return document.createComment(t)}function yo(t,e,n){t.insertBefore(e,n)}function mo(t,e){t.removeChild(e)}function go(t,e){t.appendChild(e)}function bo(t){return t.parentNode}function _o(t){return t.nextSibling}function wo(t){return t.tagName}function xo(t,e){t.textContent=e}function Oo(t,e){t.setAttribute(e,"")}var Co=Object.freeze({createElement:lo,createElementNS:po,createTextNode:ho,createComment:vo,insertBefore:yo,removeChild:mo,appendChild:go,parentNode:bo,nextSibling:_o,tagName:wo,setTextContent:xo,setStyleScope:Oo}),So={create:function(t,e){Ao(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Ao(t,!0),Ao(e))},destroy:function(t){Ao(t,!0)}};function Ao(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var $o=new bt("",{},[]),Eo=["create","activate","update","remove","destroy"];function ko(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&jo(t,e)||i(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function jo(t,e){if("input"!==t.tag)return!0;var n,r=o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return r===i||uo(r)&&uo(i)}function To(t,e,n){var r,i,a={};for(r=e;r<=n;++r)i=t[r].key,o(i)&&(a[i]=r);return a}function Po(t){var e,n,a={},s=t.modules,u=t.nodeOps;for(e=0;e<Eo.length;++e)for(a[Eo[e]]=[],n=0;n<s.length;++n)o(s[n][Eo[e]])&&a[Eo[e]].push(s[n][Eo[e]]);function f(t){return new bt(u.tagName(t).toLowerCase(),{},[],void 0,t)}function l(t,e){function n(){0===--n.listeners&&p(t)}return n.listeners=e,n}function p(t){var e=u.parentNode(t);o(e)&&u.removeChild(e,t)}function d(t,e,n,r,a,c,s){if(o(t.elm)&&o(c)&&(t=c[s]=Ot(t)),t.isRootInsert=!a,!h(t,e,n,r)){var f=t.data,l=t.children,p=t.tag;o(p)?(t.elm=t.ns?u.createElementNS(t.ns,p):u.createElement(p,t),x(t),b(t,l,e),o(f)&&w(t,e),g(n,t.elm,r)):i(t.isComment)?(t.elm=u.createComment(t.text),g(n,t.elm,r)):(t.elm=u.createTextNode(t.text),g(n,t.elm,r))}}function h(t,e,n,r){var a=t.data;if(o(a)){var c=o(t.componentInstance)&&a.keepAlive;if(o(a=a.hook)&&o(a=a.init)&&a(t,!1),o(t.componentInstance))return v(t,e),g(n,t.elm,r),i(c)&&m(t,e,n,r),!0}}function v(t,e){o(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,_(t)?(w(t,e),x(t)):(Ao(t),e.push(t))}function m(t,e,n,r){var i,c=t;while(c.componentInstance)if(c=c.componentInstance._vnode,o(i=c.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i]($o,c);e.push(c);break}g(n,t.elm,r)}function g(t,e,n){o(t)&&(o(n)?u.parentNode(n)===t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function b(t,e,n){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)d(e[r],n,t.elm,null,!0,e,r)}else c(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function _(t){while(t.componentInstance)t=t.componentInstance._vnode;return o(t.tag)}function w(t,n){for(var r=0;r<a.create.length;++r)a.create[r]($o,t);e=t.data.hook,o(e)&&(o(e.create)&&e.create($o,t),o(e.insert)&&n.push(t))}function x(t){var e;if(o(e=t.fnScopeId))u.setStyleScope(t.elm,e);else{var n=t;while(n)o(e=n.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent}o(e=jn)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function O(t,e,n,r,o,i){for(;r<=o;++r)d(n[r],i,t,e,!1,n,r)}function C(t){var e,n,r=t.data;if(o(r))for(o(e=r.hook)&&o(e=e.destroy)&&e(t),e=0;e<a.destroy.length;++e)a.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)C(t.children[n])}function S(t,e,n){for(;e<=n;++e){var r=t[e];o(r)&&(o(r.tag)?(A(r),C(r)):p(r.elm))}}function A(t,e){if(o(e)||o(t.data)){var n,r=a.remove.length+1;for(o(e)?e.listeners+=r:e=l(t.elm,r),o(n=t.componentInstance)&&o(n=n._vnode)&&o(n.data)&&A(n,e),n=0;n<a.remove.length;++n)a.remove[n](t,e);o(n=t.data.hook)&&o(n=n.remove)?n(t,e):e()}else p(t.elm)}function $(t,e,n,i,a){var c,s,f,l,p=0,h=0,v=e.length-1,y=e[0],m=e[v],g=n.length-1,b=n[0],_=n[g],w=!a;while(p<=v&&h<=g)r(y)?y=e[++p]:r(m)?m=e[--v]:ko(y,b)?(k(y,b,i,n,h),y=e[++p],b=n[++h]):ko(m,_)?(k(m,_,i,n,g),m=e[--v],_=n[--g]):ko(y,_)?(k(y,_,i,n,g),w&&u.insertBefore(t,y.elm,u.nextSibling(m.elm)),y=e[++p],_=n[--g]):ko(m,b)?(k(m,b,i,n,h),w&&u.insertBefore(t,m.elm,y.elm),m=e[--v],b=n[++h]):(r(c)&&(c=To(e,p,v)),s=o(b.key)?c[b.key]:E(b,e,p,v),r(s)?d(b,i,t,y.elm,!1,n,h):(f=e[s],ko(f,b)?(k(f,b,i,n,h),e[s]=void 0,w&&u.insertBefore(t,f.elm,y.elm)):d(b,i,t,y.elm,!1,n,h)),b=n[++h]);p>v?(l=r(n[g+1])?null:n[g+1].elm,O(t,l,n,h,g,i)):h>g&&S(e,p,v)}function E(t,e,n,r){for(var i=n;i<r;i++){var a=e[i];if(o(a)&&ko(t,a))return i}}function k(t,e,n,c,s,f){if(t!==e){o(e.elm)&&o(c)&&(e=c[s]=Ot(e));var l=e.elm=t.elm;if(i(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?P(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(t.isStatic)&&e.key===t.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=t.componentInstance;else{var p,d=e.data;o(d)&&o(p=d.hook)&&o(p=p.prepatch)&&p(t,e);var h=t.children,v=e.children;if(o(d)&&_(e)){for(p=0;p<a.update.length;++p)a.update[p](t,e);o(p=d.hook)&&o(p=p.update)&&p(t,e)}r(e.text)?o(h)&&o(v)?h!==v&&$(l,h,v,n,f):o(v)?(o(t.text)&&u.setTextContent(l,""),O(l,null,v,0,v.length-1,n)):o(h)?S(h,0,h.length-1):o(t.text)&&u.setTextContent(l,""):t.text!==e.text&&u.setTextContent(l,e.text),o(d)&&o(p=d.hook)&&o(p=p.postpatch)&&p(t,e)}}}function j(t,e,n){if(i(n)&&o(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=y("attrs,class,staticClass,staticStyle,key");function P(t,e,n,r){var a,c=e.tag,s=e.data,u=e.children;if(r=r||s&&s.pre,e.elm=t,i(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(s)&&(o(a=s.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return v(e,n),!0;if(o(c)){if(o(u))if(t.hasChildNodes())if(o(a=s)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var f=!0,l=t.firstChild,p=0;p<u.length;p++){if(!l||!P(l,u[p],n,r)){f=!1;break}l=l.nextSibling}if(!f||l)return!1}else b(e,u,n);if(o(s)){var d=!1;for(var h in s)if(!T(h)){d=!0,w(e,n);break}!d&&s["class"]&&ye(s["class"])}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,c){if(!r(e)){var s=!1,l=[];if(r(t))s=!0,d(e,l);else{var p=o(t.nodeType);if(!p&&ko(t,e))k(t,e,l,null,null,c);else{if(p){if(1===t.nodeType&&t.hasAttribute(F)&&(t.removeAttribute(F),n=!0),i(n)&&P(t,e,l))return j(e,l,!0),t;t=f(t)}var h=t.elm,v=u.parentNode(h);if(d(e,l,h._leaveCb?null:v,u.nextSibling(h)),o(e.parent)){var y=e.parent,m=_(e);while(y){for(var g=0;g<a.destroy.length;++g)a.destroy[g](y);if(y.elm=e.elm,m){for(var b=0;b<a.create.length;++b)a.create[b]($o,y);var w=y.data.hook.insert;if(w.merged)for(var x=1;x<w.fns.length;x++)w.fns[x]()}else Ao(y);y=y.parent}}o(v)?S([t],0,0):o(t.tag)&&C(t)}}return j(e,l,s),e.elm}o(t)&&C(t)}}var Io={create:No,update:No,destroy:function(t){No(t,$o)}};function No(t,e){(t.data.directives||e.data.directives)&&Mo(t,e)}function Mo(t,e){var n,r,o,i=t===$o,a=e===$o,c=Ro(t.data.directives,t.context),s=Ro(e.data.directives,e.context),u=[],f=[];for(n in s)r=c[n],o=s[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Fo(o,"update",e,t),o.def&&o.def.componentUpdated&&f.push(o)):(Fo(o,"bind",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var l=function(){for(var n=0;n<u.length;n++)Fo(u[n],"inserted",e,t)};i?we(e,"insert",l):l()}if(f.length&&we(e,"postpatch",(function(){for(var n=0;n<f.length;n++)Fo(f[n],"componentUpdated",e,t)})),!i)for(n in c)s[n]||Fo(c[n],"unbind",t,t,a)}var Lo=Object.create(null);function Ro(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)r=t[n],r.modifiers||(r.modifiers=Lo),o[Do(r)]=r,r.def=Wt(e.$options,"directives",r.name,!0);return o}function Do(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Fo(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(Oa){ee(Oa,n.context,"directive "+t.name+" "+e+" hook")}}var Vo=[So,Io];function Uo(t,e){var n=e.componentOptions;if((!o(n)||!1!==n.Ctor.options.inheritAttrs)&&(!r(t.data.attrs)||!r(e.data.attrs))){var i,a,c,s=e.elm,u=t.data.attrs||{},f=e.data.attrs||{};for(i in o(f.__ob__)&&(f=e.data.attrs=T({},f)),f)a=f[i],c=u[i],c!==a&&Bo(s,i,a);for(i in(tt||nt)&&f.value!==u.value&&Bo(s,"value",f.value),u)r(f[i])&&(qr(i)?s.removeAttributeNS(zr,Xr(i)):Ur(i)||s.removeAttribute(i))}}function Bo(t,e,n){t.tagName.indexOf("-")>-1?Ho(t,e,n):Gr(e)?Kr(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Ur(e)?t.setAttribute(e,Hr(e,n)):qr(e)?Kr(n)?t.removeAttributeNS(zr,Xr(e)):t.setAttributeNS(zr,e,n):Ho(t,e,n)}function Ho(t,e,n){if(Kr(n))t.removeAttribute(e);else{if(tt&&!et&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var Go={create:Uo,update:Uo};function zo(t,e){var n=e.elm,i=e.data,a=t.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var c=Wr(e),s=n._transitionClasses;o(s)&&(c=Qr(c,Zr(s))),c!==n._prevClass&&(n.setAttribute("class",c),n._prevClass=c)}}var qo,Xo={create:zo,update:zo},Ko="__r",Wo="__c";function Yo(t){if(o(t[Ko])){var e=tt?"change":"input";t[e]=[].concat(t[Ko],t[e]||[]),delete t[Ko]}o(t[Wo])&&(t.change=[].concat(t[Wo],t.change||[]),delete t[Wo])}function Jo(t,e,n){var r=qo;return function o(){var i=e.apply(null,arguments);null!==i&&ti(t,o,n,r)}}var Qo=ae&&!(ot&&Number(ot[1])<=53);function Zo(t,e,n,r){if(Qo){var o=Xn,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}qo.addEventListener(t,e,at?{capture:n,passive:r}:n)}function ti(t,e,n,r){(r||qo).removeEventListener(t,e._wrapper||e,n)}function ei(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=e.data.on||{},o=t.data.on||{};qo=e.elm,Yo(n),_e(n,o,Zo,ti,Jo,e.context),qo=void 0}}var ni,ri={create:ei,update:ei};function oi(t,e){if(!r(t.data.domProps)||!r(e.data.domProps)){var n,i,a=e.elm,c=t.data.domProps||{},s=e.data.domProps||{};for(n in o(s.__ob__)&&(s=e.data.domProps=T({},s)),c)n in s||(a[n]="");for(n in s){if(i=s[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),i===c[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=i;var u=r(i)?"":String(i);ii(a,u)&&(a.value=u)}else if("innerHTML"===n&&oo(a.tagName)&&r(a.innerHTML)){ni=ni||document.createElement("div"),ni.innerHTML="<svg>"+i+"</svg>";var f=ni.firstChild;while(a.firstChild)a.removeChild(a.firstChild);while(f.firstChild)a.appendChild(f.firstChild)}else if(i!==c[n])try{a[n]=i}catch(Oa){}}}}function ii(t,e){return!t.composing&&("OPTION"===t.tagName||ai(t,e)||ci(t,e))}function ai(t,e){var n=!0;try{n=document.activeElement!==t}catch(Oa){}return n&&t.value!==e}function ci(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.number)return v(n)!==v(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}var si={create:oi,update:oi},ui=w((function(t){var e={},n=/;(?![^(]*\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function fi(t){var e=li(t.style);return t.staticStyle?T(t.staticStyle,e):e}function li(t){return Array.isArray(t)?P(t):"string"===typeof t?ui(t):t}function pi(t,e){var n,r={};if(e){var o=t;while(o.componentInstance)o=o.componentInstance._vnode,o&&o.data&&(n=fi(o.data))&&T(r,n)}(n=fi(t.data))&&T(r,n);var i=t;while(i=i.parent)i.data&&(n=fi(i.data))&&T(r,n);return r}var di,hi=/^--/,vi=/\s*!important$/,yi=function(t,e,n){if(hi.test(e))t.style.setProperty(e,n);else if(vi.test(n))t.style.setProperty(A(e),n.replace(vi,""),"important");else{var r=gi(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},mi=["Webkit","Moz","ms"],gi=w((function(t){if(di=di||document.createElement("div").style,t=O(t),"filter"!==t&&t in di)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<mi.length;n++){var r=mi[n]+e;if(r in di)return r}}));function bi(t,e){var n=e.data,i=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var a,c,s=e.elm,u=i.staticStyle,f=i.normalizedStyle||i.style||{},l=u||f,p=li(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?T({},p):p;var d=pi(e,!0);for(c in l)r(d[c])&&yi(s,c,"");for(c in d)a=d[c],a!==l[c]&&yi(s,c,null==a?"":a)}}var _i={create:bi,update:bi},wi=/\s+/;function xi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(wi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Oi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(wi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";while(n.indexOf(r)>=0)n=n.replace(r," ");n=n.trim(),n?t.setAttribute("class",n):t.removeAttribute("class")}}function Ci(t){if(t){if("object"===typeof t){var e={};return!1!==t.css&&T(e,Si(t.name||"v")),T(e,t),e}return"string"===typeof t?Si(t):void 0}}var Si=w((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),Ai=Y&&!et,$i="transition",Ei="animation",ki="transition",ji="transitionend",Ti="animation",Pi="animationend";Ai&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ki="WebkitTransition",ji="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ti="WebkitAnimation",Pi="webkitAnimationEnd"));var Ii=Y?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Ni(t){Ii((function(){Ii(t)}))}function Mi(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),xi(t,e))}function Li(t,e){t._transitionClasses&&g(t._transitionClasses,e),Oi(t,e)}function Ri(t,e,n){var r=Fi(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var c=o===$i?ji:Pi,s=0,u=function(){t.removeEventListener(c,f),n()},f=function(e){e.target===t&&++s>=a&&u()};setTimeout((function(){s<a&&u()}),i+1),t.addEventListener(c,f)}var Di=/\b(transform|all)(,|$)/;function Fi(t,e){var n,r=window.getComputedStyle(t),o=(r[ki+"Delay"]||"").split(", "),i=(r[ki+"Duration"]||"").split(", "),a=Vi(o,i),c=(r[Ti+"Delay"]||"").split(", "),s=(r[Ti+"Duration"]||"").split(", "),u=Vi(c,s),f=0,l=0;e===$i?a>0&&(n=$i,f=a,l=i.length):e===Ei?u>0&&(n=Ei,f=u,l=s.length):(f=Math.max(a,u),n=f>0?a>u?$i:Ei:null,l=n?n===$i?i.length:s.length:0);var p=n===$i&&Di.test(r[ki+"Property"]);return{type:n,timeout:f,propCount:l,hasTransform:p}}function Vi(t,e){while(t.length<e.length)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return Ui(e)+Ui(t[n])})))}function Ui(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Bi(t,e){var n=t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Ci(t.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){var a=i.css,c=i.type,u=i.enterClass,f=i.enterToClass,l=i.enterActiveClass,p=i.appearClass,d=i.appearToClass,h=i.appearActiveClass,y=i.beforeEnter,m=i.enter,g=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,w=i.appear,x=i.afterAppear,O=i.appearCancelled,C=i.duration,S=jn,A=jn.$vnode;while(A&&A.parent)S=A.context,A=A.parent;var $=!S._isMounted||!t.isRootInsert;if(!$||w||""===w){var E=$&&p?p:u,k=$&&h?h:l,j=$&&d?d:f,T=$&&_||y,P=$&&"function"===typeof w?w:m,I=$&&x||g,N=$&&O||b,M=v(s(C)?C.enter:C);0;var L=!1!==a&&!et,R=zi(P),F=n._enterCb=D((function(){L&&(Li(n,j),Li(n,k)),F.cancelled?(L&&Li(n,E),N&&N(n)):I&&I(n),n._enterCb=null}));t.data.show||we(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),P&&P(n,F)})),T&&T(n),L&&(Mi(n,E),Mi(n,k),Ni((function(){Li(n,E),F.cancelled||(Mi(n,j),R||(Gi(M)?setTimeout(F,M):Ri(n,c,F)))}))),t.data.show&&(e&&e(),P&&P(n,F)),L||R||F()}}}function Hi(t,e){var n=t.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Ci(t.data.transition);if(r(i)||1!==n.nodeType)return e();if(!o(n._leaveCb)){var a=i.css,c=i.type,u=i.leaveClass,f=i.leaveToClass,l=i.leaveActiveClass,p=i.beforeLeave,d=i.leave,h=i.afterLeave,y=i.leaveCancelled,m=i.delayLeave,g=i.duration,b=!1!==a&&!et,_=zi(d),w=v(s(g)?g.leave:g);0;var x=n._leaveCb=D((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(Li(n,f),Li(n,l)),x.cancelled?(b&&Li(n,u),y&&y(n)):(e(),h&&h(n)),n._leaveCb=null}));m?m(O):O()}function O(){x.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),b&&(Mi(n,u),Mi(n,l),Ni((function(){Li(n,u),x.cancelled||(Mi(n,f),_||(Gi(w)?setTimeout(x,w):Ri(n,c,x)))}))),d&&d(n,x),b||_||x())}}function Gi(t){return"number"===typeof t&&!isNaN(t)}function zi(t){if(r(t))return!1;var e=t.fns;return o(e)?zi(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function qi(t,e){!0!==e.data.show&&Bi(e)}var Xi=Y?{create:qi,activate:qi,remove:function(t,e){!0!==t.data.show?Hi(t,e):e()}}:{},Ki=[Go,Xo,ri,si,_i,Xi],Wi=Ki.concat(Vo),Yi=Po({nodeOps:Co,modules:Wi});et&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&oa(t,"input")}));var Ji={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?we(n,"postpatch",(function(){Ji.componentUpdated(t,e,n)})):Qi(t,e,n.context),t._vOptions=[].map.call(t.options,ea)):("textarea"===n.tag||uo(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",na),t.addEventListener("compositionend",ra),t.addEventListener("change",ra),et&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Qi(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,ea);if(o.some((function(t,e){return!L(t,r[e])}))){var i=t.multiple?e.value.some((function(t){return ta(t,o)})):e.value!==e.oldValue&&ta(e.value,o);i&&oa(t,"change")}}}};function Qi(t,e,n){Zi(t,e,n),(tt||nt)&&setTimeout((function(){Zi(t,e,n)}),0)}function Zi(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,c=0,s=t.options.length;c<s;c++)if(a=t.options[c],o)i=R(r,ea(a))>-1,a.selected!==i&&(a.selected=i);else if(L(ea(a),r))return void(t.selectedIndex!==c&&(t.selectedIndex=c));o||(t.selectedIndex=-1)}}function ta(t,e){return e.every((function(e){return!L(e,t)}))}function ea(t){return"_value"in t?t._value:t.value}function na(t){t.target.composing=!0}function ra(t){t.target.composing&&(t.target.composing=!1,oa(t.target,"input"))}function oa(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function ia(t){return!t.componentInstance||t.data&&t.data.transition?t:ia(t.componentInstance._vnode)}var aa={bind:function(t,e,n){var r=e.value;n=ia(n);var o=n.data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,Bi(n,(function(){t.style.display=i}))):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value,o=e.oldValue;if(!r!==!o){n=ia(n);var i=n.data&&n.data.transition;i?(n.data.show=!0,r?Bi(n,(function(){t.style.display=t.__vOriginalDisplay})):Hi(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none"}},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}},ca={model:Ji,show:aa},sa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ua(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ua(On(e.children)):t}function fa(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[O(i)]=o[i];return e}function la(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}function pa(t){while(t=t.parent)if(t.data.transition)return!0}function da(t,e){return e.key===t.key&&e.tag===t.tag}var ha=function(t){return t.tag||xn(t)},va=function(t){return"show"===t.name},ya={name:"transition",props:sa,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(ha),n.length)){0;var r=this.mode;0;var o=n[0];if(pa(this.$vnode))return o;var i=ua(o);if(!i)return o;if(this._leaving)return la(t,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:c(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var s=(i.data||(i.data={})).transition=fa(this),u=this._vnode,f=ua(u);if(i.data.directives&&i.data.directives.some(va)&&(i.data.show=!0),f&&f.data&&!da(i,f)&&!xn(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var l=f.data.transition=T({},s);if("out-in"===r)return this._leaving=!0,we(l,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),la(t,o);if("in-out"===r){if(xn(i))return u;var p,d=function(){p()};we(s,"afterEnter",d),we(s,"enterCancelled",d),we(l,"delayLeave",(function(t){p=t}))}}return o}}},ma=T({tag:String,moveClass:String},sa);delete ma.mode;var ga={props:ma,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Tn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=fa(this),c=0;c<o.length;c++){var s=o[c];if(s.tag)if(null!=s.key&&0!==String(s.key).indexOf("__vlist"))i.push(s),n[s.key]=s,(s.data||(s.data={})).transition=a;else;}if(r){for(var u=[],f=[],l=0;l<r.length;l++){var p=r[l];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):f.push(p)}this.kept=t(e,null,u),this.removed=f}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(ba),t.forEach(_a),t.forEach(wa),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;Mi(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ji,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ji,t),n._moveCb=null,Li(n,e))})}})))},methods:{hasMove:function(t,e){if(!Ai)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){Oi(n,t)})),xi(n,e),n.style.display="none",this.$el.appendChild(n);var r=Fi(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function ba(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function _a(t){t.data.newPos=t.elm.getBoundingClientRect()}function wa(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}var xa={Transition:ya,TransitionGroup:ga};Or.config.mustUseProp=Vr,Or.config.isReservedTag=io,Or.config.isReservedAttr=Dr,Or.config.getTagNamespace=ao,Or.config.isUnknownElement=so,T(Or.options.directives,ca),T(Or.options.components,xa),Or.prototype.__patch__=Y?Yi:I,Or.prototype.$mount=function(t,e){return t=t&&Y?fo(t):void 0,Nn(this,t,e)},Y&&setTimeout((function(){B.devtools&&ut&&ut.emit("init",Or)}),0),e["a"]=Or}).call(this,n("c8ba"))},"2cf4":function(t,e,n){var r,o,i,a=n("da84"),c=n("d039"),s=n("c6b6"),u=n("0366"),f=n("1be4"),l=n("cc12"),p=n("1cdc"),d=a.location,h=a.setImmediate,v=a.clearImmediate,y=a.process,m=a.MessageChannel,g=a.Dispatch,b=0,_={},w="onreadystatechange",x=function(t){if(_.hasOwnProperty(t)){var e=_[t];delete _[t],e()}},O=function(t){return function(){x(t)}},C=function(t){x(t.data)},S=function(t){a.postMessage(t+"",d.protocol+"//"+d.host)};h&&v||(h=function(t){var e=[],n=1;while(arguments.length>n)e.push(arguments[n++]);return _[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},v=function(t){delete _[t]},"process"==s(y)?r=function(t){y.nextTick(O(t))}:g&&g.now?r=function(t){g.now(O(t))}:m&&!p?(o=new m,i=o.port2,o.port1.onmessage=C,r=u(i.postMessage,i,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||c(S)?r=w in l("script")?function(t){f.appendChild(l("script"))[w]=function(){f.removeChild(this),x(t)}}:function(t){setTimeout(O(t),0)}:(r=S,a.addEventListener("message",C,!1))),t.exports={set:h,clear:v}},"2d00":function(t,e,n){var r,o,i=n("da84"),a=n("342f"),c=i.process,s=c&&c.versions,u=s&&s.v8;u?(r=u.split("."),o=r[0]+r[1]):a&&(r=a.match(/Edge\/(\d+)/),(!r||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/),r&&(o=r[1]))),t.exports=o&&+o},"2f62":function(t,e,n){"use strict";(function(t){
/**
 * vuex v3.1.3
 * (c) 2020 Evan You
 * @license MIT
 */
function r(t){var e=Number(t.version.split(".")[0]);if(e>=2)t.mixin({beforeCreate:r});else{var n=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[r].concat(t.init):r,n.call(this,t)}}function r(){var t=this.$options;t.store?this.$store="function"===typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}}n.d(e,"b",(function(){return T}));var o="undefined"!==typeof window?window:"undefined"!==typeof t?t:{},i=o.__VUE_DEVTOOLS_GLOBAL_HOOK__;function a(t){i&&(t._devtoolHook=i,i.emit("vuex:init",t),i.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){i.emit("vuex:mutation",t,e)})))}function c(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}function s(t){return null!==t&&"object"===typeof t}function u(t){return t&&"function"===typeof t.then}function f(t,e){return function(){return t(e)}}var l=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"===typeof n?n():n)||{}},p={namespaced:{configurable:!0}};p.namespaced.get=function(){return!!this._rawModule.namespaced},l.prototype.addChild=function(t,e){this._children[t]=e},l.prototype.removeChild=function(t){delete this._children[t]},l.prototype.getChild=function(t){return this._children[t]},l.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},l.prototype.forEachChild=function(t){c(this._children,t)},l.prototype.forEachGetter=function(t){this._rawModule.getters&&c(this._rawModule.getters,t)},l.prototype.forEachAction=function(t){this._rawModule.actions&&c(this._rawModule.actions,t)},l.prototype.forEachMutation=function(t){this._rawModule.mutations&&c(this._rawModule.mutations,t)},Object.defineProperties(l.prototype,p);var d=function(t){this.register([],t,!1)};function h(t,e,n){if(e.update(n),n.modules)for(var r in n.modules){if(!e.getChild(r))return void 0;h(t.concat(r),e.getChild(r),n.modules[r])}}d.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},d.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return e=e.getChild(n),t+(e.namespaced?n+"/":"")}),"")},d.prototype.update=function(t){h([],this.root,t)},d.prototype.register=function(t,e,n){var r=this;void 0===n&&(n=!0);var o=new l(e,n);if(0===t.length)this.root=o;else{var i=this.get(t.slice(0,-1));i.addChild(t[t.length-1],o)}e.modules&&c(e.modules,(function(e,o){r.register(t.concat(o),e,n)}))},d.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];e.getChild(n).runtime&&e.removeChild(n)};var v;var y=function(t){var e=this;void 0===t&&(t={}),!v&&"undefined"!==typeof window&&window.Vue&&j(window.Vue);var n=t.plugins;void 0===n&&(n=[]);var r=t.strict;void 0===r&&(r=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new d(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new v,this._makeLocalGettersCache=Object.create(null);var o=this,i=this,c=i.dispatch,s=i.commit;this.dispatch=function(t,e){return c.call(o,t,e)},this.commit=function(t,e,n){return s.call(o,t,e,n)},this.strict=r;var u=this._modules.root.state;w(this,u,[],this._modules.root),_(this,u),n.forEach((function(t){return t(e)}));var f=void 0!==t.devtools?t.devtools:v.config.devtools;f&&a(this)},m={state:{configurable:!0}};function g(t,e){return e.indexOf(t)<0&&e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function b(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;w(t,n,[],t._modules.root,!0),_(t,n,e)}function _(t,e,n){var r=t._vm;t.getters={},t._makeLocalGettersCache=Object.create(null);var o=t._wrappedGetters,i={};c(o,(function(e,n){i[n]=f(e,t),Object.defineProperty(t.getters,n,{get:function(){return t._vm[n]},enumerable:!0})}));var a=v.config.silent;v.config.silent=!0,t._vm=new v({data:{$$state:e},computed:i}),v.config.silent=a,t.strict&&$(t),r&&(n&&t._withCommit((function(){r._data.$$state=null})),v.nextTick((function(){return r.$destroy()})))}function w(t,e,n,r,o){var i=!n.length,a=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[a],t._modulesNamespaceMap[a]=r),!i&&!o){var c=E(e,n.slice(0,-1)),s=n[n.length-1];t._withCommit((function(){v.set(c,s,r.state)}))}var u=r.context=x(t,a,n);r.forEachMutation((function(e,n){var r=a+n;C(t,r,e,u)})),r.forEachAction((function(e,n){var r=e.root?n:a+n,o=e.handler||e;S(t,r,o,u)})),r.forEachGetter((function(e,n){var r=a+n;A(t,r,e,u)})),r.forEachChild((function(r,i){w(t,e,n.concat(i),r,o)}))}function x(t,e,n){var r=""===e,o={dispatch:r?t.dispatch:function(n,r,o){var i=k(n,r,o),a=i.payload,c=i.options,s=i.type;return c&&c.root||(s=e+s),t.dispatch(s,a)},commit:r?t.commit:function(n,r,o){var i=k(n,r,o),a=i.payload,c=i.options,s=i.type;c&&c.root||(s=e+s),t.commit(s,a,c)}};return Object.defineProperties(o,{getters:{get:r?function(){return t.getters}:function(){return O(t,e)}},state:{get:function(){return E(t.state,n)}}}),o}function O(t,e){if(!t._makeLocalGettersCache[e]){var n={},r=e.length;Object.keys(t.getters).forEach((function(o){if(o.slice(0,r)===e){var i=o.slice(r);Object.defineProperty(n,i,{get:function(){return t.getters[o]},enumerable:!0})}})),t._makeLocalGettersCache[e]=n}return t._makeLocalGettersCache[e]}function C(t,e,n,r){var o=t._mutations[e]||(t._mutations[e]=[]);o.push((function(e){n.call(t,r.state,e)}))}function S(t,e,n,r){var o=t._actions[e]||(t._actions[e]=[]);o.push((function(e){var o=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e);return u(o)||(o=Promise.resolve(o)),t._devtoolHook?o.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):o}))}function A(t,e,n,r){t._wrappedGetters[e]||(t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)})}function $(t){t._vm.$watch((function(){return this._data.$$state}),(function(){0}),{deep:!0,sync:!0})}function E(t,e){return e.reduce((function(t,e){return t[e]}),t)}function k(t,e,n){return s(t)&&t.type&&(n=e,e=t,t=t.type),{type:t,payload:e,options:n}}function j(t){v&&t===v||(v=t,r(v))}m.state.get=function(){return this._vm._data.$$state},m.state.set=function(t){0},y.prototype.commit=function(t,e,n){var r=this,o=k(t,e,n),i=o.type,a=o.payload,c=(o.options,{type:i,payload:a}),s=this._mutations[i];s&&(this._withCommit((function(){s.forEach((function(t){t(a)}))})),this._subscribers.slice().forEach((function(t){return t(c,r.state)})))},y.prototype.dispatch=function(t,e){var n=this,r=k(t,e),o=r.type,i=r.payload,a={type:o,payload:i},c=this._actions[o];if(c){try{this._actionSubscribers.slice().filter((function(t){return t.before})).forEach((function(t){return t.before(a,n.state)}))}catch(u){0}var s=c.length>1?Promise.all(c.map((function(t){return t(i)}))):c[0](i);return s.then((function(t){try{n._actionSubscribers.filter((function(t){return t.after})).forEach((function(t){return t.after(a,n.state)}))}catch(u){0}return t}))}},y.prototype.subscribe=function(t){return g(t,this._subscribers)},y.prototype.subscribeAction=function(t){var e="function"===typeof t?{before:t}:t;return g(e,this._actionSubscribers)},y.prototype.watch=function(t,e,n){var r=this;return this._watcherVM.$watch((function(){return t(r.state,r.getters)}),e,n)},y.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._vm._data.$$state=t}))},y.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"===typeof t&&(t=[t]),this._modules.register(t,e),w(this,this.state,t,this._modules.get(t),n.preserveState),_(this,this.state)},y.prototype.unregisterModule=function(t){var e=this;"string"===typeof t&&(t=[t]),this._modules.unregister(t),this._withCommit((function(){var n=E(e.state,t.slice(0,-1));v.delete(n,t[t.length-1])})),b(this)},y.prototype.hotUpdate=function(t){this._modules.update(t),b(this,!0)},y.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(y.prototype,m);var T=D((function(t,e){var n={};return L(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=F(this.$store,"mapState",t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"===typeof o?o.call(this,e,n):e[o]},n[r].vuex=!0})),n})),P=D((function(t,e){var n={};return L(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.commit;if(t){var i=F(this.$store,"mapMutations",t);if(!i)return;r=i.context.commit}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),I=D((function(t,e){var n={};return L(e).forEach((function(e){var r=e.key,o=e.val;o=t+o,n[r]=function(){if(!t||F(this.$store,"mapGetters",t))return this.$store.getters[o]},n[r].vuex=!0})),n})),N=D((function(t,e){var n={};return L(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var i=F(this.$store,"mapActions",t);if(!i)return;r=i.context.dispatch}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),M=function(t){return{mapState:T.bind(null,t),mapGetters:I.bind(null,t),mapMutations:P.bind(null,t),mapActions:N.bind(null,t)}};function L(t){return R(t)?Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}})):[]}function R(t){return Array.isArray(t)||s(t)}function D(t){return function(e,n){return"string"!==typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function F(t,e,n){var r=t._modulesNamespaceMap[n];return r}var V={Store:y,install:j,version:"3.1.3",mapState:T,mapMutations:P,mapGetters:I,mapActions:N,createNamespacedHelpers:M};e["a"]=V}).call(this,n("c8ba"))},"342f":function(t,e,n){var r=n("d066");t.exports=r("navigator","userAgent")||""},"35a1":function(t,e,n){var r=n("f5df"),o=n("3f8c"),i=n("b622"),a=i("iterator");t.exports=function(t){if(void 0!=t)return t[a]||t["@@iterator"]||o[r(t)]}},"37e8":function(t,e,n){var r=n("83ab"),o=n("9bf2"),i=n("825a"),a=n("df75");t.exports=r?Object.defineProperties:function(t,e){i(t);var n,r=a(e),c=r.length,s=0;while(c>s)o.f(t,n=r[s++],e[n]);return t}},"3bbe":function(t,e,n){var r=n("861d");t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},"3f8c":function(t,e){t.exports={}},4160:function(t,e,n){"use strict";var r=n("23e7"),o=n("17c2");r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},"428f":function(t,e,n){var r=n("da84");t.exports=r},"44ad":function(t,e,n){var r=n("d039"),o=n("c6b6"),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},"44d2":function(t,e,n){var r=n("b622"),o=n("7c73"),i=n("9bf2"),a=r("unscopables"),c=Array.prototype;void 0==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),t.exports=function(t){c[a][t]=!0}},"44de":function(t,e,n){var r=n("da84");t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},4840:function(t,e,n){var r=n("825a"),o=n("1c0b"),i=n("b622"),a=i("species");t.exports=function(t,e){var n,i=r(t).constructor;return void 0===i||void 0==(n=r(i)[a])?e:o(n)}},4930:function(t,e,n){var r=n("d039");t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},"4d64":function(t,e,n){var r=n("fc6a"),o=n("50c4"),i=n("23cb"),a=function(t){return function(e,n,a){var c,s=r(e),u=o(s.length),f=i(a,u);if(t&&n!=n){while(u>f)if(c=s[f++],c!=c)return!0}else for(;u>f;f++)if((t||f in s)&&s[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},"4de4":function(t,e,n){"use strict";var r=n("23e7"),o=n("b727").filter,i=n("1dde"),a=n("ae40"),c=i("filter"),s=a("filter");r({target:"Array",proto:!0,forced:!c||!s},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},"50c4":function(t,e,n){var r=n("a691"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},5135:function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},5319:function(t,e,n){"use strict";var r=n("d784"),o=n("825a"),i=n("7b0b"),a=n("50c4"),c=n("a691"),s=n("1d80"),u=n("8aa5"),f=n("14c3"),l=Math.max,p=Math.min,d=Math.floor,h=/\$([$&'`]|\d\d?|<[^>]*>)/g,v=/\$([$&'`]|\d\d?)/g,y=function(t){return void 0===t?t:String(t)};r("replace",2,(function(t,e,n,r){var m=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,g=r.REPLACE_KEEPS_$0,b=m?"$":"$0";return[function(n,r){var o=s(this),i=void 0==n?void 0:n[t];return void 0!==i?i.call(n,o,r):e.call(String(o),n,r)},function(t,r){if(!m&&g||"string"===typeof r&&-1===r.indexOf(b)){var i=n(e,t,this,r);if(i.done)return i.value}var s=o(t),d=String(this),h="function"===typeof r;h||(r=String(r));var v=s.global;if(v){var w=s.unicode;s.lastIndex=0}var x=[];while(1){var O=f(s,d);if(null===O)break;if(x.push(O),!v)break;var C=String(O[0]);""===C&&(s.lastIndex=u(d,a(s.lastIndex),w))}for(var S="",A=0,$=0;$<x.length;$++){O=x[$];for(var E=String(O[0]),k=l(p(c(O.index),d.length),0),j=[],T=1;T<O.length;T++)j.push(y(O[T]));var P=O.groups;if(h){var I=[E].concat(j,k,d);void 0!==P&&I.push(P);var N=String(r.apply(void 0,I))}else N=_(E,d,k,j,P,r);k>=A&&(S+=d.slice(A,k)+N,A=k+E.length)}return S+d.slice(A)}];function _(t,n,r,o,a,c){var s=r+t.length,u=o.length,f=v;return void 0!==a&&(a=i(a),f=h),e.call(c,f,(function(e,i){var c;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(s);case"<":c=a[i.slice(1,-1)];break;default:var f=+i;if(0===f)return e;if(f>u){var l=d(f/10);return 0===l?e:l<=u?void 0===o[l-1]?i.charAt(1):o[l-1]+i.charAt(1):e}c=o[f-1]}return void 0===c?"":c}))}}))},5530:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));n("a4d3"),n("4de4"),n("4160"),n("e439"),n("dbb4"),n("b64b"),n("159b");function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}},5692:function(t,e,n){var r=n("c430"),o=n("c6cd");(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},"56ef":function(t,e,n){var r=n("d066"),o=n("241c"),i=n("7418"),a=n("825a");t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},5899:function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"58a8":function(t,e,n){var r=n("1d80"),o=n("5899"),i="["+o+"]",a=RegExp("^"+i+i+"*"),c=RegExp(i+i+"*$"),s=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(a,"")),2&t&&(n=n.replace(c,"")),n}};t.exports={start:s(1),end:s(2),trim:s(3)}},"5c6c":function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},"604d":function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"int-pm",class:{"int-pm-vertical":t.vertical}},[n("button",{staticClass:"int-pm-btn",class:t.getBtnClass(!0),attrs:{"aria-label":t.decrementAriaLabel,disabled:t.disabled},on:{click:function(e){t.vertical?t.increment():t.decrement()}}},[t._t(t.vertical?"increment":"decrement",[t._v(t._s(t.vertical?"+":"-"))])],2),n("div",{ref:"spinbutton",staticClass:"int-pm-value",attrs:{role:"spinbutton",tabindex:"0","aria-valuenow":t.value,"aria-valuemin":t.min,"aria-valuemax":t.max,"aria-label":t.spinButtonAriaLabel}},[t._t("default",[t._v(t._s(t.intValue))])],2),n("button",{staticClass:"int-pm-btn",class:t.getBtnClass(!1),attrs:{"aria-label":t.incrementAriaLabel,disabled:t.disabled},on:{click:function(e){t.vertical?t.decrement():t.increment()}}},[t._t(t.vertical?"decrement":"increment",[t._v(t._s(t.vertical?"-":"+"))])],2)])},o=[],i=(n("a9e3"),{name:"IntegerPlusminus",props:{value:{default:0,type:Number},min:{default:0,type:Number},max:{default:void 0,type:Number},step:{default:1,type:Number},vertical:{default:!1,type:Boolean},incrementAriaLabel:{default:null,type:String},decrementAriaLabel:{default:null,type:String},spinButtonAriaLabel:{default:null,type:String},disabled:{default:!1,type:Boolean}},data:function(){return{intValue:0}},computed:{canIncrement:function(){return!this.disabled&&(void 0===this.max||this.intValue+this.step<=this.max)},canDecrement:function(){return!this.disabled&&this.intValue-this.step>=this.min}},mounted:function(){window.addEventListener("keydown",this.keyUp)},methods:{keyUp:function(t){this.isSpinButtonFocused()&&(33!==t.keyCode&&38!==t.keyCode||(this.increment(),t.preventDefault()),34!==t.keyCode&&40!==t.keyCode||(this.decrement(),t.preventDefault()),36===t.keyCode&&(this.setToMin(),t.preventDefault()),void 0!==this.max&&35===t.keyCode&&(this.setToMax(),t.preventDefault()))},isSpinButtonFocused:function(){return document.activeElement===this.$refs.spinbutton},getBtnClass:function(t){var e="int-pm-";return t&&!this.vertical||!t&&this.vertical?(e+="decrement",this.canDecrement||(e+=" disabled")):(e+="increment",this.canIncrement||(e+=" disabled")),e},setToMin:function(){this.disabled||(this.intValue=this.min,this.$emit("input",this.intValue))},setToMax:function(){this.disabled||(this.intValue=this.max,this.$emit("input",this.intValue))},increment:function(){this.canIncrement&&(this.intValue=this.intValue+this.step,this.$emit("ipm-increment",this.intValue),this.$emit("input",this.intValue))},decrement:function(){this.canDecrement&&(this.intValue=this.intValue-this.step,this.$emit("ipm-decrement",this.intValue),this.$emit("input",this.intValue))}},watch:{value:{handler:function(t,e){this.intValue=t}}},created:function(){this.intValue=this.value,this.step<1&&(this.step=1),this.max<this.min&&(this.max=void 0)}}),a=i,c=(n("910d"),n("2877")),s=Object(c["a"])(a,r,o,!1,null,"8b1fbb96",null),u=s.exports},"60da":function(t,e,n){"use strict";var r=n("83ab"),o=n("d039"),i=n("df75"),a=n("7418"),c=n("d1e7"),s=n("7b0b"),u=n("44ad"),f=Object.assign,l=Object.defineProperty;t.exports=!f||o((function(){if(r&&1!==f({b:1},f(l({},"a",{enumerable:!0,get:function(){l(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o="abcdefghijklmnopqrst";return t[n]=7,o.split("").forEach((function(t){e[t]=t})),7!=f({},t)[n]||i(f({},e)).join("")!=o}))?function(t,e){var n=s(t),o=arguments.length,f=1,l=a.f,p=c.f;while(o>f){var d,h=u(arguments[f++]),v=l?i(h).concat(l(h)):i(h),y=v.length,m=0;while(y>m)d=v[m++],r&&!p.call(h,d)||(n[d]=h[d])}return n}:f},6547:function(t,e,n){var r=n("a691"),o=n("1d80"),i=function(t){return function(e,n){var i,a,c=String(o(e)),s=r(n),u=c.length;return s<0||s>=u?t?"":void 0:(i=c.charCodeAt(s),i<55296||i>56319||s+1===u||(a=c.charCodeAt(s+1))<56320||a>57343?t?c.charAt(s):i:t?c.slice(s,s+2):a-56320+(i-55296<<10)+65536)}};t.exports={codeAt:i(!1),charAt:i(!0)}},"65f0":function(t,e,n){var r=n("861d"),o=n("e8b5"),i=n("b622"),a=i("species");t.exports=function(t,e){var n;return o(t)&&(n=t.constructor,"function"!=typeof n||n!==Array&&!o(n.prototype)?r(n)&&(n=n[a],null===n&&(n=void 0)):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},"69f3":function(t,e,n){var r,o,i,a=n("7f9a"),c=n("da84"),s=n("861d"),u=n("9112"),f=n("5135"),l=n("f772"),p=n("d012"),d=c.WeakMap,h=function(t){return i(t)?o(t):r(t,{})},v=function(t){return function(e){var n;if(!s(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}};if(a){var y=new d,m=y.get,g=y.has,b=y.set;r=function(t,e){return b.call(y,t,e),e},o=function(t){return m.call(y,t)||{}},i=function(t){return g.call(y,t)}}else{var _=l("state");p[_]=!0,r=function(t,e){return u(t,_,e),e},o=function(t){return f(t,_)?t[_]:{}},i=function(t){return f(t,_)}}t.exports={set:r,get:o,has:i,enforce:h,getterFor:v}},"6eeb":function(t,e,n){var r=n("da84"),o=n("9112"),i=n("5135"),a=n("ce4e"),c=n("8925"),s=n("69f3"),u=s.get,f=s.enforce,l=String(String).split("String");(t.exports=function(t,e,n,c){var s=!!c&&!!c.unsafe,u=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),f(n).source=l.join("string"==typeof e?e:"")),t!==r?(s?!p&&t[e]&&(u=!0):delete t[e],u?t[e]=n:o(t,e,n)):u?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||c(this)}))},7156:function(t,e,n){var r=n("861d"),o=n("d2bb");t.exports=function(t,e,n){var i,a;return o&&"function"==typeof(i=e.constructor)&&i!==n&&r(a=i.prototype)&&a!==n.prototype&&o(t,a),t}},7418:function(t,e){e.f=Object.getOwnPropertySymbols},"746f":function(t,e,n){var r=n("428f"),o=n("5135"),i=n("e538"),a=n("9bf2").f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},7839:function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},"7b0b":function(t,e,n){var r=n("1d80");t.exports=function(t){return Object(r(t))}},"7c73":function(t,e,n){var r,o=n("825a"),i=n("37e8"),a=n("7839"),c=n("d012"),s=n("1be4"),u=n("cc12"),f=n("f772"),l=">",p="<",d="prototype",h="script",v=f("IE_PROTO"),y=function(){},m=function(t){return p+h+l+t+p+"/"+h+l},g=function(t){t.write(m("")),t.close();var e=t.parentWindow.Object;return t=null,e},b=function(){var t,e=u("iframe"),n="java"+h+":";return e.style.display="none",s.appendChild(e),e.src=String(n),t=e.contentWindow.document,t.open(),t.write(m("document.F=Object")),t.close(),t.F},_=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}_=r?g(r):b();var t=a.length;while(t--)delete _[d][a[t]];return _()};c[v]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(y[d]=o(t),n=new y,y[d]=null,n[v]=t):n=_(),void 0===e?n:i(n,e)}},"7dd0":function(t,e,n){"use strict";var r=n("23e7"),o=n("9ed3"),i=n("e163"),a=n("d2bb"),c=n("d44e"),s=n("9112"),u=n("6eeb"),f=n("b622"),l=n("c430"),p=n("3f8c"),d=n("ae93"),h=d.IteratorPrototype,v=d.BUGGY_SAFARI_ITERATORS,y=f("iterator"),m="keys",g="values",b="entries",_=function(){return this};t.exports=function(t,e,n,f,d,w,x){o(n,e,f);var O,C,S,A=function(t){if(t===d&&T)return T;if(!v&&t in k)return k[t];switch(t){case m:return function(){return new n(this,t)};case g:return function(){return new n(this,t)};case b:return function(){return new n(this,t)}}return function(){return new n(this)}},$=e+" Iterator",E=!1,k=t.prototype,j=k[y]||k["@@iterator"]||d&&k[d],T=!v&&j||A(d),P="Array"==e&&k.entries||j;if(P&&(O=i(P.call(new t)),h!==Object.prototype&&O.next&&(l||i(O)===h||(a?a(O,h):"function"!=typeof O[y]&&s(O,y,_)),c(O,$,!0,!0),l&&(p[$]=_))),d==g&&j&&j.name!==g&&(E=!0,T=function(){return j.call(this)}),l&&!x||k[y]===T||s(k,y,T),p[e]=T,d)if(C={values:A(g),keys:w?T:A(m),entries:A(b)},x)for(S in C)(v||E||!(S in k))&&u(k,S,C[S]);else r({target:e,proto:!0,forced:v||E},C);return C}},"7f9a":function(t,e,n){var r=n("da84"),o=n("8925"),i=r.WeakMap;t.exports="function"===typeof i&&/native code/.test(o(i))},"825a":function(t,e,n){var r=n("861d");t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},"83ab":function(t,e,n){var r=n("d039");t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},8418:function(t,e,n){"use strict";var r=n("c04e"),o=n("9bf2"),i=n("5c6c");t.exports=function(t,e,n){var a=r(e);a in t?o.f(t,a,i(0,n)):t[a]=n}},"861d":function(t,e){t.exports=function(t){return"object"===typeof t?null!==t:"function"===typeof t}},8925:function(t,e,n){var r=n("c6cd"),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},"8aa5":function(t,e,n){"use strict";var r=n("6547").charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},"8c4f":function(t,e,n){"use strict";
/*!
  * vue-router v3.1.6
  * (c) 2020 Evan You
  * @license MIT
  */function r(t,e){0}function o(t){return Object.prototype.toString.call(t).indexOf("Error")>-1}function i(t,e){return e instanceof t||e&&(e.name===t.name||e._name===t._name)}function a(t,e){for(var n in e)t[n]=e[n];return t}var c={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(t,e){var n=e.props,r=e.children,o=e.parent,i=e.data;i.routerView=!0;var c=o.$createElement,u=n.name,f=o.$route,l=o._routerViewCache||(o._routerViewCache={}),p=0,d=!1;while(o&&o._routerRoot!==o){var h=o.$vnode?o.$vnode.data:{};h.routerView&&p++,h.keepAlive&&o._directInactive&&o._inactive&&(d=!0),o=o.$parent}if(i.routerViewDepth=p,d){var v=l[u],y=v&&v.component;return y?(v.configProps&&s(y,i,v.route,v.configProps),c(y,i,r)):c()}var m=f.matched[p],g=m&&m.components[u];if(!m||!g)return l[u]=null,c();l[u]={component:g},i.registerRouteInstance=function(t,e){var n=m.instances[u];(e&&n!==t||!e&&n===t)&&(m.instances[u]=e)},(i.hook||(i.hook={})).prepatch=function(t,e){m.instances[u]=e.componentInstance},i.hook.init=function(t){t.data.keepAlive&&t.componentInstance&&t.componentInstance!==m.instances[u]&&(m.instances[u]=t.componentInstance)};var b=m.props&&m.props[u];return b&&(a(l[u],{route:f,configProps:b}),s(g,i,f,b)),c(g,i,r)}};function s(t,e,n,r){var o=e.props=u(n,r);if(o){o=e.props=a({},o);var i=e.attrs=e.attrs||{};for(var c in o)t.props&&c in t.props||(i[c]=o[c],delete o[c])}}function u(t,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(t);case"boolean":return e?t.params:void 0;default:0}}var f=/[!'()*]/g,l=function(t){return"%"+t.charCodeAt(0).toString(16)},p=/%2C/g,d=function(t){return encodeURIComponent(t).replace(f,l).replace(p,",")},h=decodeURIComponent;function v(t,e,n){void 0===e&&(e={});var r,o=n||y;try{r=o(t||"")}catch(a){r={}}for(var i in e)r[i]=e[i];return r}function y(t){var e={};return t=t.trim().replace(/^(\?|#|&)/,""),t?(t.split("&").forEach((function(t){var n=t.replace(/\+/g," ").split("="),r=h(n.shift()),o=n.length>0?h(n.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function m(t){var e=t?Object.keys(t).map((function(e){var n=t[e];if(void 0===n)return"";if(null===n)return d(e);if(Array.isArray(n)){var r=[];return n.forEach((function(t){void 0!==t&&(null===t?r.push(d(e)):r.push(d(e)+"="+d(t)))})),r.join("&")}return d(e)+"="+d(n)})).filter((function(t){return t.length>0})).join("&"):null;return e?"?"+e:""}var g=/\/?$/;function b(t,e,n,r){var o=r&&r.options.stringifyQuery,i=e.query||{};try{i=_(i)}catch(c){}var a={name:e.name||t&&t.name,meta:t&&t.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:O(e,o),matched:t?x(t):[]};return n&&(a.redirectedFrom=O(n,o)),Object.freeze(a)}function _(t){if(Array.isArray(t))return t.map(_);if(t&&"object"===typeof t){var e={};for(var n in t)e[n]=_(t[n]);return e}return t}var w=b(null,{path:"/"});function x(t){var e=[];while(t)e.unshift(t),t=t.parent;return e}function O(t,e){var n=t.path,r=t.query;void 0===r&&(r={});var o=t.hash;void 0===o&&(o="");var i=e||m;return(n||"/")+i(r)+o}function C(t,e){return e===w?t===e:!!e&&(t.path&&e.path?t.path.replace(g,"")===e.path.replace(g,"")&&t.hash===e.hash&&S(t.query,e.query):!(!t.name||!e.name)&&(t.name===e.name&&t.hash===e.hash&&S(t.query,e.query)&&S(t.params,e.params)))}function S(t,e){if(void 0===t&&(t={}),void 0===e&&(e={}),!t||!e)return t===e;var n=Object.keys(t),r=Object.keys(e);return n.length===r.length&&n.every((function(n){var r=t[n],o=e[n];return"object"===typeof r&&"object"===typeof o?S(r,o):String(r)===String(o)}))}function A(t,e){return 0===t.path.replace(g,"/").indexOf(e.path.replace(g,"/"))&&(!e.hash||t.hash===e.hash)&&$(t.query,e.query)}function $(t,e){for(var n in e)if(!(n in t))return!1;return!0}function E(t,e,n){var r=t.charAt(0);if("/"===r)return t;if("?"===r||"#"===r)return e+t;var o=e.split("/");n&&o[o.length-1]||o.pop();for(var i=t.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var c=i[a];".."===c?o.pop():"."!==c&&o.push(c)}return""!==o[0]&&o.unshift(""),o.join("/")}function k(t){var e="",n="",r=t.indexOf("#");r>=0&&(e=t.slice(r),t=t.slice(0,r));var o=t.indexOf("?");return o>=0&&(n=t.slice(o+1),t=t.slice(0,o)),{path:t,query:n,hash:e}}function j(t){return t.replace(/\/\//g,"/")}var T=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},P=J,I=D,N=F,M=B,L=Y,R=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function D(t,e){var n,r=[],o=0,i=0,a="",c=e&&e.delimiter||"/";while(null!=(n=R.exec(t))){var s=n[0],u=n[1],f=n.index;if(a+=t.slice(i,f),i=f+s.length,u)a+=u[1];else{var l=t[i],p=n[2],d=n[3],h=n[4],v=n[5],y=n[6],m=n[7];a&&(r.push(a),a="");var g=null!=p&&null!=l&&l!==p,b="+"===y||"*"===y,_="?"===y||"*"===y,w=n[2]||c,x=h||v;r.push({name:d||o++,prefix:p||"",delimiter:w,optional:_,repeat:b,partial:g,asterisk:!!m,pattern:x?G(x):m?".*":"[^"+H(w)+"]+?"})}}return i<t.length&&(a+=t.substr(i)),a&&r.push(a),r}function F(t,e){return B(D(t,e))}function V(t){return encodeURI(t).replace(/[\/?#]/g,(function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}))}function U(t){return encodeURI(t).replace(/[?#]/g,(function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}))}function B(t){for(var e=new Array(t.length),n=0;n<t.length;n++)"object"===typeof t[n]&&(e[n]=new RegExp("^(?:"+t[n].pattern+")$"));return function(n,r){for(var o="",i=n||{},a=r||{},c=a.pretty?V:encodeURIComponent,s=0;s<t.length;s++){var u=t[s];if("string"!==typeof u){var f,l=i[u.name];if(null==l){if(u.optional){u.partial&&(o+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(T(l)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(l)+"`");if(0===l.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var p=0;p<l.length;p++){if(f=c(l[p]),!e[s].test(f))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?u.prefix:u.delimiter)+f}}else{if(f=u.asterisk?U(l):c(l),!e[s].test(f))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+f+'"');o+=u.prefix+f}}else o+=u}return o}}function H(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function G(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function z(t,e){return t.keys=e,t}function q(t){return t.sensitive?"":"i"}function X(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return z(t,e)}function K(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(J(t[o],e,n).source);var i=new RegExp("(?:"+r.join("|")+")",q(n));return z(i,e)}function W(t,e,n){return Y(D(t,n),e,n)}function Y(t,e,n){T(e)||(n=e||n,e=[]),n=n||{};for(var r=n.strict,o=!1!==n.end,i="",a=0;a<t.length;a++){var c=t[a];if("string"===typeof c)i+=H(c);else{var s=H(c.prefix),u="(?:"+c.pattern+")";e.push(c),c.repeat&&(u+="(?:"+s+u+")*"),u=c.optional?c.partial?s+"("+u+")?":"(?:"+s+"("+u+"))?":s+"("+u+")",i+=u}}var f=H(n.delimiter||"/"),l=i.slice(-f.length)===f;return r||(i=(l?i.slice(0,-f.length):i)+"(?:"+f+"(?=$))?"),i+=o?"$":r&&l?"":"(?="+f+"|$)",z(new RegExp("^"+i,q(n)),e)}function J(t,e,n){return T(e)||(n=e||n,e=[]),n=n||{},t instanceof RegExp?X(t,e):T(t)?K(t,e,n):W(t,e,n)}P.parse=I,P.compile=N,P.tokensToFunction=M,P.tokensToRegExp=L;var Q=Object.create(null);function Z(t,e,n){e=e||{};try{var r=Q[t]||(Q[t]=P.compile(t));return"string"===typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(o){return""}finally{delete e[0]}}function tt(t,e,n,r){var o="string"===typeof t?{path:t}:t;if(o._normalized)return o;if(o.name){o=a({},t);var i=o.params;return i&&"object"===typeof i&&(o.params=a({},i)),o}if(!o.path&&o.params&&e){o=a({},o),o._normalized=!0;var c=a(a({},e.params),o.params);if(e.name)o.name=e.name,o.params=c;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;o.path=Z(s,c,"path "+e.path)}else 0;return o}var u=k(o.path||""),f=e&&e.path||"/",l=u.path?E(u.path,f,n||o.append):f,p=v(u.query,o.query,r&&r.options.parseQuery),d=o.hash||u.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:l,query:p,hash:d}}var et,nt=[String,Object],rt=[String,Array],ot=function(){},it={name:"RouterLink",props:{to:{type:nt,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:rt,default:"click"}},render:function(t){var e=this,n=this.$router,r=this.$route,o=n.resolve(this.to,r,this.append),i=o.location,c=o.route,s=o.href,u={},f=n.options.linkActiveClass,l=n.options.linkExactActiveClass,p=null==f?"router-link-active":f,d=null==l?"router-link-exact-active":l,h=null==this.activeClass?p:this.activeClass,v=null==this.exactActiveClass?d:this.exactActiveClass,y=c.redirectedFrom?b(null,tt(c.redirectedFrom),null,n):c;u[v]=C(r,y),u[h]=this.exact?u[v]:A(r,y);var m=function(t){at(t)&&(e.replace?n.replace(i,ot):n.push(i,ot))},g={click:at};Array.isArray(this.event)?this.event.forEach((function(t){g[t]=m})):g[this.event]=m;var _={class:u},w=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:c,navigate:m,isActive:u[h],isExactActive:u[v]});if(w){if(1===w.length)return w[0];if(w.length>1||!w.length)return 0===w.length?t():t("span",{},w)}if("a"===this.tag)_.on=g,_.attrs={href:s};else{var x=ct(this.$slots.default);if(x){x.isStatic=!1;var O=x.data=a({},x.data);for(var S in O.on=O.on||{},O.on){var $=O.on[S];S in g&&(O.on[S]=Array.isArray($)?$:[$])}for(var E in g)E in O.on?O.on[E].push(g[E]):O.on[E]=m;var k=x.data.attrs=a({},x.data.attrs);k.href=s}else _.on=g}return t(this.tag,_,this.$slots.default)}};function at(t){if(!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)&&!t.defaultPrevented&&(void 0===t.button||0===t.button)){if(t.currentTarget&&t.currentTarget.getAttribute){var e=t.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return t.preventDefault&&t.preventDefault(),!0}}function ct(t){if(t)for(var e,n=0;n<t.length;n++){if(e=t[n],"a"===e.tag)return e;if(e.children&&(e=ct(e.children)))return e}}function st(t){if(!st.installed||et!==t){st.installed=!0,et=t;var e=function(t){return void 0!==t},n=function(t,n){var r=t.$options._parentVnode;e(r)&&e(r=r.data)&&e(r=r.registerRouteInstance)&&r(t,n)};t.mixin({beforeCreate:function(){e(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,n(this,this)},destroyed:function(){n(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",c),t.component("RouterLink",it);var r=t.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}}var ut="undefined"!==typeof window;function ft(t,e,n,r){var o=e||[],i=n||Object.create(null),a=r||Object.create(null);t.forEach((function(t){lt(o,i,a,t)}));for(var c=0,s=o.length;c<s;c++)"*"===o[c]&&(o.push(o.splice(c,1)[0]),s--,c--);return{pathList:o,pathMap:i,nameMap:a}}function lt(t,e,n,r,o,i){var a=r.path,c=r.name;var s=r.pathToRegexpOptions||{},u=dt(a,o,s.strict);"boolean"===typeof r.caseSensitive&&(s.sensitive=r.caseSensitive);var f={path:u,regex:pt(u,s),components:r.components||{default:r.component},instances:{},name:c,parent:o,matchAs:i,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};if(r.children&&r.children.forEach((function(r){var o=i?j(i+"/"+r.path):void 0;lt(t,e,n,r,f,o)})),e[f.path]||(t.push(f.path),e[f.path]=f),void 0!==r.alias)for(var l=Array.isArray(r.alias)?r.alias:[r.alias],p=0;p<l.length;++p){var d=l[p];0;var h={path:d,children:r.children};lt(t,e,n,h,o,f.path||"/")}c&&(n[c]||(n[c]=f))}function pt(t,e){var n=P(t,[],e);return n}function dt(t,e,n){return n||(t=t.replace(/\/$/,"")),"/"===t[0]||null==e?t:j(e.path+"/"+t)}function ht(t,e){var n=ft(t),r=n.pathList,o=n.pathMap,i=n.nameMap;function a(t){ft(t,r,o,i)}function c(t,n,a){var c=tt(t,n,!1,e),s=c.name;if(s){var u=i[s];if(!u)return f(null,c);var l=u.regex.keys.filter((function(t){return!t.optional})).map((function(t){return t.name}));if("object"!==typeof c.params&&(c.params={}),n&&"object"===typeof n.params)for(var p in n.params)!(p in c.params)&&l.indexOf(p)>-1&&(c.params[p]=n.params[p]);return c.path=Z(u.path,c.params,'named route "'+s+'"'),f(u,c,a)}if(c.path){c.params={};for(var d=0;d<r.length;d++){var h=r[d],v=o[h];if(vt(v.regex,c.path,c.params))return f(v,c,a)}}return f(null,c)}function s(t,n){var r=t.redirect,o="function"===typeof r?r(b(t,n,null,e)):r;if("string"===typeof o&&(o={path:o}),!o||"object"!==typeof o)return f(null,n);var a=o,s=a.name,u=a.path,l=n.query,p=n.hash,d=n.params;if(l=a.hasOwnProperty("query")?a.query:l,p=a.hasOwnProperty("hash")?a.hash:p,d=a.hasOwnProperty("params")?a.params:d,s){i[s];return c({_normalized:!0,name:s,query:l,hash:p,params:d},void 0,n)}if(u){var h=yt(u,t),v=Z(h,d,'redirect route with path "'+h+'"');return c({_normalized:!0,path:v,query:l,hash:p},void 0,n)}return f(null,n)}function u(t,e,n){var r=Z(n,e.params,'aliased route with path "'+n+'"'),o=c({_normalized:!0,path:r});if(o){var i=o.matched,a=i[i.length-1];return e.params=o.params,f(a,e)}return f(null,e)}function f(t,n,r){return t&&t.redirect?s(t,r||n):t&&t.matchAs?u(t,n,t.matchAs):b(t,n,r,e)}return{match:c,addRoutes:a}}function vt(t,e,n){var r=e.match(t);if(!r)return!1;if(!n)return!0;for(var o=1,i=r.length;o<i;++o){var a=t.keys[o-1],c="string"===typeof r[o]?decodeURIComponent(r[o]):r[o];a&&(n[a.name||"pathMatch"]=c)}return!0}function yt(t,e){return E(t,e.parent?e.parent.path:"/",!0)}var mt=ut&&window.performance&&window.performance.now?window.performance:Date;function gt(){return mt.now().toFixed(3)}var bt=gt();function _t(){return bt}function wt(t){return bt=t}var xt=Object.create(null);function Ot(){var t=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(t,""),n=a({},window.history.state);n.key=_t(),window.history.replaceState(n,"",e),window.addEventListener("popstate",(function(t){St(),t.state&&t.state.key&&wt(t.state.key)}))}function Ct(t,e,n,r){if(t.app){var o=t.options.scrollBehavior;o&&t.app.$nextTick((function(){var i=At(),a=o.call(t,e,n,r?i:null);a&&("function"===typeof a.then?a.then((function(t){It(t,i)})).catch((function(t){0})):It(a,i))}))}}function St(){var t=_t();t&&(xt[t]={x:window.pageXOffset,y:window.pageYOffset})}function At(){var t=_t();if(t)return xt[t]}function $t(t,e){var n=document.documentElement,r=n.getBoundingClientRect(),o=t.getBoundingClientRect();return{x:o.left-r.left-e.x,y:o.top-r.top-e.y}}function Et(t){return Tt(t.x)||Tt(t.y)}function kt(t){return{x:Tt(t.x)?t.x:window.pageXOffset,y:Tt(t.y)?t.y:window.pageYOffset}}function jt(t){return{x:Tt(t.x)?t.x:0,y:Tt(t.y)?t.y:0}}function Tt(t){return"number"===typeof t}var Pt=/^#\d/;function It(t,e){var n="object"===typeof t;if(n&&"string"===typeof t.selector){var r=Pt.test(t.selector)?document.getElementById(t.selector.slice(1)):document.querySelector(t.selector);if(r){var o=t.offset&&"object"===typeof t.offset?t.offset:{};o=jt(o),e=$t(r,o)}else Et(t)&&(e=kt(t))}else n&&Et(t)&&(e=kt(t));e&&window.scrollTo(e.x,e.y)}var Nt=ut&&function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)}();function Mt(t,e){St();var n=window.history;try{if(e){var r=a({},n.state);r.key=_t(),n.replaceState(r,"",t)}else n.pushState({key:wt(gt())},"",t)}catch(o){window.location[e?"replace":"assign"](t)}}function Lt(t){Mt(t,!0)}function Rt(t,e,n){var r=function(o){o>=t.length?n():t[o]?e(t[o],(function(){r(o+1)})):r(o+1)};r(0)}function Dt(t){return function(e,n,r){var i=!1,a=0,c=null;Ft(t,(function(t,e,n,s){if("function"===typeof t&&void 0===t.cid){i=!0,a++;var u,f=Ht((function(e){Bt(e)&&(e=e.default),t.resolved="function"===typeof e?e:et.extend(e),n.components[s]=e,a--,a<=0&&r()})),l=Ht((function(t){var e="Failed to resolve async component "+s+": "+t;c||(c=o(t)?t:new Error(e),r(c))}));try{u=t(f,l)}catch(d){l(d)}if(u)if("function"===typeof u.then)u.then(f,l);else{var p=u.component;p&&"function"===typeof p.then&&p.then(f,l)}}})),i||r()}}function Ft(t,e){return Vt(t.map((function(t){return Object.keys(t.components).map((function(n){return e(t.components[n],t.instances[n],t,n)}))})))}function Vt(t){return Array.prototype.concat.apply([],t)}var Ut="function"===typeof Symbol&&"symbol"===typeof Symbol.toStringTag;function Bt(t){return t.__esModule||Ut&&"Module"===t[Symbol.toStringTag]}function Ht(t){var e=!1;return function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];if(!e)return e=!0,t.apply(this,n)}}var Gt=function(t){function e(e){t.call(this),this.name=this._name="NavigationDuplicated",this.message='Navigating to current location ("'+e.fullPath+'") is not allowed',Object.defineProperty(this,"stack",{value:(new t).stack,writable:!0,configurable:!0})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Error);Gt._name="NavigationDuplicated";var zt=function(t,e){this.router=t,this.base=qt(e),this.current=w,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function qt(t){if(!t)if(ut){var e=document.querySelector("base");t=e&&e.getAttribute("href")||"/",t=t.replace(/^https?:\/\/[^\/]+/,"")}else t="/";return"/"!==t.charAt(0)&&(t="/"+t),t.replace(/\/$/,"")}function Xt(t,e){var n,r=Math.max(t.length,e.length);for(n=0;n<r;n++)if(t[n]!==e[n])break;return{updated:e.slice(0,n),activated:e.slice(n),deactivated:t.slice(n)}}function Kt(t,e,n,r){var o=Ft(t,(function(t,r,o,i){var a=Wt(t,e);if(a)return Array.isArray(a)?a.map((function(t){return n(t,r,o,i)})):n(a,r,o,i)}));return Vt(r?o.reverse():o)}function Wt(t,e){return"function"!==typeof t&&(t=et.extend(t)),t.options[e]}function Yt(t){return Kt(t,"beforeRouteLeave",Qt,!0)}function Jt(t){return Kt(t,"beforeRouteUpdate",Qt)}function Qt(t,e){if(e)return function(){return t.apply(e,arguments)}}function Zt(t,e,n){return Kt(t,"beforeRouteEnter",(function(t,r,o,i){return te(t,o,i,e,n)}))}function te(t,e,n,r,o){return function(i,a,c){return t(i,a,(function(t){"function"===typeof t&&r.push((function(){ee(t,e.instances,n,o)})),c(t)}))}}function ee(t,e,n,r){e[n]&&!e[n]._isBeingDestroyed?t(e[n]):r()&&setTimeout((function(){ee(t,e,n,r)}),16)}zt.prototype.listen=function(t){this.cb=t},zt.prototype.onReady=function(t,e){this.ready?t():(this.readyCbs.push(t),e&&this.readyErrorCbs.push(e))},zt.prototype.onError=function(t){this.errorCbs.push(t)},zt.prototype.transitionTo=function(t,e,n){var r=this,o=this.router.match(t,this.current);this.confirmTransition(o,(function(){r.updateRoute(o),e&&e(o),r.ensureURL(),r.ready||(r.ready=!0,r.readyCbs.forEach((function(t){t(o)})))}),(function(t){n&&n(t),t&&!r.ready&&(r.ready=!0,r.readyErrorCbs.forEach((function(e){e(t)})))}))},zt.prototype.confirmTransition=function(t,e,n){var a=this,c=this.current,s=function(t){!i(Gt,t)&&o(t)&&(a.errorCbs.length?a.errorCbs.forEach((function(e){e(t)})):(r(!1,"uncaught error during route navigation:"),console.error(t))),n&&n(t)};if(C(t,c)&&t.matched.length===c.matched.length)return this.ensureURL(),s(new Gt(t));var u=Xt(this.current.matched,t.matched),f=u.updated,l=u.deactivated,p=u.activated,d=[].concat(Yt(l),this.router.beforeHooks,Jt(f),p.map((function(t){return t.beforeEnter})),Dt(p));this.pending=t;var h=function(e,n){if(a.pending!==t)return s();try{e(t,c,(function(t){!1===t||o(t)?(a.ensureURL(!0),s(t)):"string"===typeof t||"object"===typeof t&&("string"===typeof t.path||"string"===typeof t.name)?(s(),"object"===typeof t&&t.replace?a.replace(t):a.push(t)):n(t)}))}catch(r){s(r)}};Rt(d,h,(function(){var n=[],r=function(){return a.current===t},o=Zt(p,n,r),i=o.concat(a.router.resolveHooks);Rt(i,h,(function(){if(a.pending!==t)return s();a.pending=null,e(t),a.router.app&&a.router.app.$nextTick((function(){n.forEach((function(t){t()}))}))}))}))},zt.prototype.updateRoute=function(t){var e=this.current;this.current=t,this.cb&&this.cb(t),this.router.afterHooks.forEach((function(n){n&&n(t,e)}))};var ne=function(t){function e(e,n){var r=this;t.call(this,e,n);var o=e.options.scrollBehavior,i=Nt&&o;i&&Ot();var a=re(this.base);window.addEventListener("popstate",(function(t){var n=r.current,o=re(r.base);r.current===w&&o===a||r.transitionTo(o,(function(t){i&&Ct(e,t,n,!0)}))}))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.go=function(t){window.history.go(t)},e.prototype.push=function(t,e,n){var r=this,o=this,i=o.current;this.transitionTo(t,(function(t){Mt(j(r.base+t.fullPath)),Ct(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this,o=this,i=o.current;this.transitionTo(t,(function(t){Lt(j(r.base+t.fullPath)),Ct(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.ensureURL=function(t){if(re(this.base)!==this.current.fullPath){var e=j(this.base+this.current.fullPath);t?Mt(e):Lt(e)}},e.prototype.getCurrentLocation=function(){return re(this.base)},e}(zt);function re(t){var e=decodeURI(window.location.pathname);return t&&0===e.indexOf(t)&&(e=e.slice(t.length)),(e||"/")+window.location.search+window.location.hash}var oe=function(t){function e(e,n,r){t.call(this,e,n),r&&ie(this.base)||ae()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var t=this,e=this.router,n=e.options.scrollBehavior,r=Nt&&n;r&&Ot(),window.addEventListener(Nt?"popstate":"hashchange",(function(){var e=t.current;ae()&&t.transitionTo(ce(),(function(n){r&&Ct(t.router,n,e,!0),Nt||fe(n.fullPath)}))}))},e.prototype.push=function(t,e,n){var r=this,o=this,i=o.current;this.transitionTo(t,(function(t){ue(t.fullPath),Ct(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this,o=this,i=o.current;this.transitionTo(t,(function(t){fe(t.fullPath),Ct(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.go=function(t){window.history.go(t)},e.prototype.ensureURL=function(t){var e=this.current.fullPath;ce()!==e&&(t?ue(e):fe(e))},e.prototype.getCurrentLocation=function(){return ce()},e}(zt);function ie(t){var e=re(t);if(!/^\/#/.test(e))return window.location.replace(j(t+"/#"+e)),!0}function ae(){var t=ce();return"/"===t.charAt(0)||(fe("/"+t),!1)}function ce(){var t=window.location.href,e=t.indexOf("#");if(e<0)return"";t=t.slice(e+1);var n=t.indexOf("?");if(n<0){var r=t.indexOf("#");t=r>-1?decodeURI(t.slice(0,r))+t.slice(r):decodeURI(t)}else t=decodeURI(t.slice(0,n))+t.slice(n);return t}function se(t){var e=window.location.href,n=e.indexOf("#"),r=n>=0?e.slice(0,n):e;return r+"#"+t}function ue(t){Nt?Mt(se(t)):window.location.hash=t}function fe(t){Nt?Lt(se(t)):window.location.replace(se(t))}var le=function(t){function e(e,n){t.call(this,e,n),this.stack=[],this.index=-1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e,n){var r=this;this.transitionTo(t,(function(t){r.stack=r.stack.slice(0,r.index+1).concat(t),r.index++,e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this;this.transitionTo(t,(function(t){r.stack=r.stack.slice(0,r.index).concat(t),e&&e(t)}),n)},e.prototype.go=function(t){var e=this,n=this.index+t;if(!(n<0||n>=this.stack.length)){var r=this.stack[n];this.confirmTransition(r,(function(){e.index=n,e.updateRoute(r)}),(function(t){i(Gt,t)&&(e.index=n)}))}},e.prototype.getCurrentLocation=function(){var t=this.stack[this.stack.length-1];return t?t.fullPath:"/"},e.prototype.ensureURL=function(){},e}(zt),pe=function(t){void 0===t&&(t={}),this.app=null,this.apps=[],this.options=t,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=ht(t.routes||[],this);var e=t.mode||"hash";switch(this.fallback="history"===e&&!Nt&&!1!==t.fallback,this.fallback&&(e="hash"),ut||(e="abstract"),this.mode=e,e){case"history":this.history=new ne(this,t.base);break;case"hash":this.history=new oe(this,t.base,this.fallback);break;case"abstract":this.history=new le(this,t.base);break;default:0}},de={currentRoute:{configurable:!0}};function he(t,e){return t.push(e),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}function ve(t,e,n){var r="hash"===n?"#"+e:e;return t?j(t+"/"+r):r}pe.prototype.match=function(t,e,n){return this.matcher.match(t,e,n)},de.currentRoute.get=function(){return this.history&&this.history.current},pe.prototype.init=function(t){var e=this;if(this.apps.push(t),t.$once("hook:destroyed",(function(){var n=e.apps.indexOf(t);n>-1&&e.apps.splice(n,1),e.app===t&&(e.app=e.apps[0]||null)})),!this.app){this.app=t;var n=this.history;if(n instanceof ne)n.transitionTo(n.getCurrentLocation());else if(n instanceof oe){var r=function(){n.setupListeners()};n.transitionTo(n.getCurrentLocation(),r,r)}n.listen((function(t){e.apps.forEach((function(e){e._route=t}))}))}},pe.prototype.beforeEach=function(t){return he(this.beforeHooks,t)},pe.prototype.beforeResolve=function(t){return he(this.resolveHooks,t)},pe.prototype.afterEach=function(t){return he(this.afterHooks,t)},pe.prototype.onReady=function(t,e){this.history.onReady(t,e)},pe.prototype.onError=function(t){this.history.onError(t)},pe.prototype.push=function(t,e,n){var r=this;if(!e&&!n&&"undefined"!==typeof Promise)return new Promise((function(e,n){r.history.push(t,e,n)}));this.history.push(t,e,n)},pe.prototype.replace=function(t,e,n){var r=this;if(!e&&!n&&"undefined"!==typeof Promise)return new Promise((function(e,n){r.history.replace(t,e,n)}));this.history.replace(t,e,n)},pe.prototype.go=function(t){this.history.go(t)},pe.prototype.back=function(){this.go(-1)},pe.prototype.forward=function(){this.go(1)},pe.prototype.getMatchedComponents=function(t){var e=t?t.matched?t:this.resolve(t).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(t){return Object.keys(t.components).map((function(e){return t.components[e]}))}))):[]},pe.prototype.resolve=function(t,e,n){e=e||this.history.current;var r=tt(t,e,n,this),o=this.match(r,e),i=o.redirectedFrom||o.fullPath,a=this.history.base,c=ve(a,i,this.mode);return{location:r,route:o,href:c,normalizedTo:r,resolved:o}},pe.prototype.addRoutes=function(t){this.matcher.addRoutes(t),this.history.current!==w&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(pe.prototype,de),pe.install=st,pe.version="3.1.6",ut&&window.Vue&&window.Vue.use(pe),e["a"]=pe},9062:function(t,e,n){!function(e,n){t.exports=n()}("undefined"!=typeof self&&self,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){},function(t,e,n){"use strict";n.r(e);var r="undefined"!=typeof window?window.HTMLElement:Object,o={mounted:function(){document.addEventListener("focusin",this.focusIn)},methods:{focusIn:function(t){if(this.isActive&&t.target!==this.$el&&!this.$el.contains(t.target)){var e=this.container?this.container:this.isFullPage?null:this.$el.parentElement;(this.isFullPage||e&&e.contains(t.target))&&(t.preventDefault(),this.$el.focus())}}},beforeDestroy:function(){document.removeEventListener("focusin",this.focusIn)}};function i(t,e,n,r,o,i,a,c){var s,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(s=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=s):o&&(s=c?function(){o.call(this,this.$root.$options.shadowRoot)}:o),s)if(u.functional){u._injectStyles=s;var f=u.render;u.render=function(t,e){return s.call(e),f(t,e)}}else{var l=u.beforeCreate;u.beforeCreate=l?[].concat(l,s):[s]}return{exports:t,options:u}}var a=i({name:"spinner",props:{color:{type:String,default:"#000"},height:{type:Number,default:64},width:{type:Number,default:64}}},(function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{viewBox:"0 0 38 38",xmlns:"http://www.w3.org/2000/svg",width:this.width,height:this.height,stroke:this.color}},[e("g",{attrs:{fill:"none","fill-rule":"evenodd"}},[e("g",{attrs:{transform:"translate(1 1)","stroke-width":"2"}},[e("circle",{attrs:{"stroke-opacity":".25",cx:"18",cy:"18",r:"18"}}),e("path",{attrs:{d:"M36 18c0-9.94-8.06-18-18-18"}},[e("animateTransform",{attrs:{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:"0.8s",repeatCount:"indefinite"}})],1)])])])}),[],!1,null,null,null).exports,c=i({name:"dots",props:{color:{type:String,default:"#000"},height:{type:Number,default:240},width:{type:Number,default:60}}},(function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{viewBox:"0 0 120 30",xmlns:"http://www.w3.org/2000/svg",fill:this.color,width:this.width,height:this.height}},[e("circle",{attrs:{cx:"15",cy:"15",r:"15"}},[e("animate",{attrs:{attributeName:"r",from:"15",to:"15",begin:"0s",dur:"0.8s",values:"15;9;15",calcMode:"linear",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"fill-opacity",from:"1",to:"1",begin:"0s",dur:"0.8s",values:"1;.5;1",calcMode:"linear",repeatCount:"indefinite"}})]),e("circle",{attrs:{cx:"60",cy:"15",r:"9","fill-opacity":"0.3"}},[e("animate",{attrs:{attributeName:"r",from:"9",to:"9",begin:"0s",dur:"0.8s",values:"9;15;9",calcMode:"linear",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"fill-opacity",from:"0.5",to:"0.5",begin:"0s",dur:"0.8s",values:".5;1;.5",calcMode:"linear",repeatCount:"indefinite"}})]),e("circle",{attrs:{cx:"105",cy:"15",r:"15"}},[e("animate",{attrs:{attributeName:"r",from:"15",to:"15",begin:"0s",dur:"0.8s",values:"15;9;15",calcMode:"linear",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"fill-opacity",from:"1",to:"1",begin:"0s",dur:"0.8s",values:"1;.5;1",calcMode:"linear",repeatCount:"indefinite"}})])])}),[],!1,null,null,null).exports,s=i({name:"bars",props:{color:{type:String,default:"#000"},height:{type:Number,default:40},width:{type:Number,default:40}}},(function(){var t=this.$createElement,e=this._self._c||t;return e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 30 30",height:this.height,width:this.width,fill:this.color}},[e("rect",{attrs:{x:"0",y:"13",width:"4",height:"5"}},[e("animate",{attrs:{attributeName:"height",attributeType:"XML",values:"5;21;5",begin:"0s",dur:"0.6s",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"y",attributeType:"XML",values:"13; 5; 13",begin:"0s",dur:"0.6s",repeatCount:"indefinite"}})]),e("rect",{attrs:{x:"10",y:"13",width:"4",height:"5"}},[e("animate",{attrs:{attributeName:"height",attributeType:"XML",values:"5;21;5",begin:"0.15s",dur:"0.6s",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"y",attributeType:"XML",values:"13; 5; 13",begin:"0.15s",dur:"0.6s",repeatCount:"indefinite"}})]),e("rect",{attrs:{x:"20",y:"13",width:"4",height:"5"}},[e("animate",{attrs:{attributeName:"height",attributeType:"XML",values:"5;21;5",begin:"0.3s",dur:"0.6s",repeatCount:"indefinite"}}),e("animate",{attrs:{attributeName:"y",attributeType:"XML",values:"13; 5; 13",begin:"0.3s",dur:"0.6s",repeatCount:"indefinite"}})])])}),[],!1,null,null,null).exports,u=i({name:"vue-loading",mixins:[o],props:{active:Boolean,programmatic:Boolean,container:[Object,Function,r],isFullPage:{type:Boolean,default:!0},transition:{type:String,default:"fade"},canCancel:Boolean,onCancel:{type:Function,default:function(){}},color:String,backgroundColor:String,opacity:Number,width:Number,height:Number,zIndex:Number,loader:{type:String,default:"spinner"}},data:function(){return{isActive:this.active}},components:{Spinner:a,Dots:c,Bars:s},beforeMount:function(){this.programmatic&&(this.container?(this.isFullPage=!1,this.container.appendChild(this.$el)):document.body.appendChild(this.$el))},mounted:function(){this.programmatic&&(this.isActive=!0),document.addEventListener("keyup",this.keyPress)},methods:{cancel:function(){this.canCancel&&this.isActive&&(this.hide(),this.onCancel.apply(null,arguments))},hide:function(){var t=this;this.$emit("hide"),this.$emit("update:active",!1),this.programmatic&&(this.isActive=!1,setTimeout((function(){var e;t.$destroy(),void 0!==(e=t.$el).remove?e.remove():e.parentNode.removeChild(e)}),150))},keyPress:function(t){27===t.keyCode&&this.cancel()}},watch:{active:function(t){this.isActive=t}},beforeDestroy:function(){document.removeEventListener("keyup",this.keyPress)}},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("transition",{attrs:{name:t.transition}},[n("div",{directives:[{name:"show",rawName:"v-show",value:t.isActive,expression:"isActive"}],staticClass:"vld-overlay is-active",class:{"is-full-page":t.isFullPage},style:{zIndex:t.zIndex},attrs:{tabindex:"0","aria-busy":t.isActive,"aria-label":"Loading"}},[n("div",{staticClass:"vld-background",style:{background:t.backgroundColor,opacity:t.opacity},on:{click:function(e){return e.preventDefault(),t.cancel(e)}}}),n("div",{staticClass:"vld-icon"},[t._t("before"),t._t("default",[n(t.loader,{tag:"component",attrs:{color:t.color,width:t.width,height:t.height}})]),t._t("after")],2)])])}),[],!1,null,null,null).exports,f=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return{show:function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,i={programmatic:!0},a=Object.assign({},e,r,i),c=new(t.extend(u))({el:document.createElement("div"),propsData:a}),s=Object.assign({},n,o);return Object.keys(s).map((function(t){c.$slots[t]=s[t]})),c}}};n(0),u.install=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=f(t,e,n);t.$loading=r,t.prototype.$loading=r},e.default=u}]).default}))},"90e3":function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},"910d":function(t,e,n){"use strict";var r=n("bd5e"),o=n.n(r);o.a},9112:function(t,e,n){var r=n("83ab"),o=n("9bf2"),i=n("5c6c");t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},9263:function(t,e,n){"use strict";var r=n("ad6d"),o=n("9f7f"),i=RegExp.prototype.exec,a=String.prototype.replace,c=i,s=function(){var t=/a/,e=/b*/g;return i.call(t,"a"),i.call(e,"a"),0!==t.lastIndex||0!==e.lastIndex}(),u=o.UNSUPPORTED_Y||o.BROKEN_CARET,f=void 0!==/()??/.exec("")[1],l=s||f||u;l&&(c=function(t){var e,n,o,c,l=this,p=u&&l.sticky,d=r.call(l),h=l.source,v=0,y=t;return p&&(d=d.replace("y",""),-1===d.indexOf("g")&&(d+="g"),y=String(t).slice(l.lastIndex),l.lastIndex>0&&(!l.multiline||l.multiline&&"\n"!==t[l.lastIndex-1])&&(h="(?: "+h+")",y=" "+y,v++),n=new RegExp("^(?:"+h+")",d)),f&&(n=new RegExp("^"+h+"$(?!\\s)",d)),s&&(e=l.lastIndex),o=i.call(p?n:l,y),p?o?(o.input=o.input.slice(v),o[0]=o[0].slice(v),o.index=l.lastIndex,l.lastIndex+=o[0].length):l.lastIndex=0:s&&o&&(l.lastIndex=l.global?o.index+o[0].length:e),f&&o&&o.length>1&&a.call(o[0],n,(function(){for(c=1;c<arguments.length-2;c++)void 0===arguments[c]&&(o[c]=void 0)})),o}),t.exports=c},"94ca":function(t,e,n){var r=n("d039"),o=/#|\.prototype\./,i=function(t,e){var n=c[a(t)];return n==u||n!=s&&("function"==typeof e?r(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",u=i.POLYFILL="P";t.exports=i},"9bdd":function(t,e,n){var r=n("825a");t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(a){var i=t["return"];throw void 0!==i&&r(i.call(t)),a}}},"9bf2":function(t,e,n){var r=n("83ab"),o=n("0cfb"),i=n("825a"),a=n("c04e"),c=Object.defineProperty;e.f=r?c:function(t,e,n){if(i(t),e=a(e,!0),i(n),o)try{return c(t,e,n)}catch(r){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},"9ed3":function(t,e,n){"use strict";var r=n("ae93").IteratorPrototype,o=n("7c73"),i=n("5c6c"),a=n("d44e"),c=n("3f8c"),s=function(){return this};t.exports=function(t,e,n){var u=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),a(t,u,!1,!0),c[u]=s,t}},"9f7f":function(t,e,n){"use strict";var r=n("d039");function o(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=r((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=r((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},a4d3:function(t,e,n){"use strict";var r=n("23e7"),o=n("da84"),i=n("d066"),a=n("c430"),c=n("83ab"),s=n("4930"),u=n("fdbf"),f=n("d039"),l=n("5135"),p=n("e8b5"),d=n("861d"),h=n("825a"),v=n("7b0b"),y=n("fc6a"),m=n("c04e"),g=n("5c6c"),b=n("7c73"),_=n("df75"),w=n("241c"),x=n("057f"),O=n("7418"),C=n("06cf"),S=n("9bf2"),A=n("d1e7"),$=n("9112"),E=n("6eeb"),k=n("5692"),j=n("f772"),T=n("d012"),P=n("90e3"),I=n("b622"),N=n("e538"),M=n("746f"),L=n("d44e"),R=n("69f3"),D=n("b727").forEach,F=j("hidden"),V="Symbol",U="prototype",B=I("toPrimitive"),H=R.set,G=R.getterFor(V),z=Object[U],q=o.Symbol,X=i("JSON","stringify"),K=C.f,W=S.f,Y=x.f,J=A.f,Q=k("symbols"),Z=k("op-symbols"),tt=k("string-to-symbol-registry"),et=k("symbol-to-string-registry"),nt=k("wks"),rt=o.QObject,ot=!rt||!rt[U]||!rt[U].findChild,it=c&&f((function(){return 7!=b(W({},"a",{get:function(){return W(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=K(z,e);r&&delete z[e],W(t,e,n),r&&t!==z&&W(z,e,r)}:W,at=function(t,e){var n=Q[t]=b(q[U]);return H(n,{type:V,tag:t,description:e}),c||(n.description=e),n},ct=u?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof q},st=function(t,e,n){t===z&&st(Z,e,n),h(t);var r=m(e,!0);return h(n),l(Q,r)?(n.enumerable?(l(t,F)&&t[F][r]&&(t[F][r]=!1),n=b(n,{enumerable:g(0,!1)})):(l(t,F)||W(t,F,g(1,{})),t[F][r]=!0),it(t,r,n)):W(t,r,n)},ut=function(t,e){h(t);var n=y(e),r=_(n).concat(ht(n));return D(r,(function(e){c&&!lt.call(n,e)||st(t,e,n[e])})),t},ft=function(t,e){return void 0===e?b(t):ut(b(t),e)},lt=function(t){var e=m(t,!0),n=J.call(this,e);return!(this===z&&l(Q,e)&&!l(Z,e))&&(!(n||!l(this,e)||!l(Q,e)||l(this,F)&&this[F][e])||n)},pt=function(t,e){var n=y(t),r=m(e,!0);if(n!==z||!l(Q,r)||l(Z,r)){var o=K(n,r);return!o||!l(Q,r)||l(n,F)&&n[F][r]||(o.enumerable=!0),o}},dt=function(t){var e=Y(y(t)),n=[];return D(e,(function(t){l(Q,t)||l(T,t)||n.push(t)})),n},ht=function(t){var e=t===z,n=Y(e?Z:y(t)),r=[];return D(n,(function(t){!l(Q,t)||e&&!l(z,t)||r.push(Q[t])})),r};if(s||(q=function(){if(this instanceof q)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=P(t),n=function(t){this===z&&n.call(Z,t),l(this,F)&&l(this[F],e)&&(this[F][e]=!1),it(this,e,g(1,t))};return c&&ot&&it(z,e,{configurable:!0,set:n}),at(e,t)},E(q[U],"toString",(function(){return G(this).tag})),E(q,"withoutSetter",(function(t){return at(P(t),t)})),A.f=lt,S.f=st,C.f=pt,w.f=x.f=dt,O.f=ht,N.f=function(t){return at(I(t),t)},c&&(W(q[U],"description",{configurable:!0,get:function(){return G(this).description}}),a||E(z,"propertyIsEnumerable",lt,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:q}),D(_(nt),(function(t){M(t)})),r({target:V,stat:!0,forced:!s},{for:function(t){var e=String(t);if(l(tt,e))return tt[e];var n=q(e);return tt[e]=n,et[n]=e,n},keyFor:function(t){if(!ct(t))throw TypeError(t+" is not a symbol");if(l(et,t))return et[t]},useSetter:function(){ot=!0},useSimple:function(){ot=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!c},{create:ft,defineProperty:st,defineProperties:ut,getOwnPropertyDescriptor:pt}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:dt,getOwnPropertySymbols:ht}),r({target:"Object",stat:!0,forced:f((function(){O.f(1)}))},{getOwnPropertySymbols:function(t){return O.f(v(t))}}),X){var vt=!s||f((function(){var t=q();return"[null]"!=X([t])||"{}"!=X({a:t})||"{}"!=X(Object(t))}));r({target:"JSON",stat:!0,forced:vt},{stringify:function(t,e,n){var r,o=[t],i=1;while(arguments.length>i)o.push(arguments[i++]);if(r=e,(d(e)||void 0!==t)&&!ct(t))return p(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!ct(e))return e}),o[1]=e,X.apply(null,o)}})}q[U][B]||$(q[U],B,q[U].valueOf),L(q,V),T[F]=!0},a640:function(t,e,n){"use strict";var r=n("d039");t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},a691:function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},a79d:function(t,e,n){"use strict";var r=n("23e7"),o=n("c430"),i=n("fea9"),a=n("d039"),c=n("d066"),s=n("4840"),u=n("cdf9"),f=n("6eeb"),l=!!i&&a((function(){i.prototype["finally"].call({then:function(){}},(function(){}))}));r({target:"Promise",proto:!0,real:!0,forced:l},{finally:function(t){var e=s(this,c("Promise")),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),o||"function"!=typeof i||i.prototype["finally"]||f(i.prototype,"finally",c("Promise").prototype["finally"])},a9e3:function(t,e,n){"use strict";var r=n("83ab"),o=n("da84"),i=n("94ca"),a=n("6eeb"),c=n("5135"),s=n("c6b6"),u=n("7156"),f=n("c04e"),l=n("d039"),p=n("7c73"),d=n("241c").f,h=n("06cf").f,v=n("9bf2").f,y=n("58a8").trim,m="Number",g=o[m],b=g.prototype,_=s(p(b))==m,w=function(t){var e,n,r,o,i,a,c,s,u=f(t,!1);if("string"==typeof u&&u.length>2)if(u=y(u),e=u.charCodeAt(0),43===e||45===e){if(n=u.charCodeAt(2),88===n||120===n)return NaN}else if(48===e){switch(u.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+u}for(i=u.slice(2),a=i.length,c=0;c<a;c++)if(s=i.charCodeAt(c),s<48||s>o)return NaN;return parseInt(i,r)}return+u};if(i(m,!g(" 0o1")||!g("0b1")||g("+0x1"))){for(var x,O=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof O&&(_?l((function(){b.valueOf.call(n)})):s(n)!=m)?u(new g(w(e)),n,O):w(e)},C=r?d(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;C.length>S;S++)c(g,x=C[S])&&!c(O,x)&&v(O,x,h(g,x));O.prototype=b,b.constructor=O,a(o,m,O)}},ac1f:function(t,e,n){"use strict";var r=n("23e7"),o=n("9263");r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},ad6d:function(t,e,n){"use strict";var r=n("825a");t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},ae40:function(t,e,n){var r=n("83ab"),o=n("d039"),i=n("5135"),a=Object.defineProperty,c={},s=function(t){throw t};t.exports=function(t,e){if(i(c,t))return c[t];e||(e={});var n=[][t],u=!!i(e,"ACCESSORS")&&e.ACCESSORS,f=i(e,0)?e[0]:s,l=i(e,1)?e[1]:void 0;return c[t]=!!n&&!o((function(){if(u&&!r)return!0;var t={length:-1};u?a(t,1,{enumerable:!0,get:s}):t[1]=1,n.call(t,f,l)}))}},ae93:function(t,e,n){"use strict";var r,o,i,a=n("e163"),c=n("9112"),s=n("5135"),u=n("b622"),f=n("c430"),l=u("iterator"),p=!1,d=function(){return this};[].keys&&(i=[].keys(),"next"in i?(o=a(a(i)),o!==Object.prototype&&(r=o)):p=!0),void 0==r&&(r={}),f||s(r,l)||c(r,l,d),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},b0c0:function(t,e,n){var r=n("83ab"),o=n("9bf2").f,i=Function.prototype,a=i.toString,c=/^\s*function ([^ (]*)/,s="name";r&&!(s in i)&&o(i,s,{configurable:!0,get:function(){try{return a.call(this).match(c)[1]}catch(t){return""}}})},b575:function(t,e,n){var r,o,i,a,c,s,u,f,l=n("da84"),p=n("06cf").f,d=n("c6b6"),h=n("2cf4").set,v=n("1cdc"),y=l.MutationObserver||l.WebKitMutationObserver,m=l.process,g=l.Promise,b="process"==d(m),_=p(l,"queueMicrotask"),w=_&&_.value;w||(r=function(){var t,e;b&&(t=m.domain)&&t.exit();while(o){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,t&&t.enter()},b?a=function(){m.nextTick(r)}:y&&!v?(c=!0,s=document.createTextNode(""),new y(r).observe(s,{characterData:!0}),a=function(){s.data=c=!c}):g&&g.resolve?(u=g.resolve(void 0),f=u.then,a=function(){f.call(u,r)}):a=function(){h.call(l,r)}),t.exports=w||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},b622:function(t,e,n){var r=n("da84"),o=n("5692"),i=n("5135"),a=n("90e3"),c=n("4930"),s=n("fdbf"),u=o("wks"),f=r.Symbol,l=s?f:f&&f.withoutSetter||a;t.exports=function(t){return i(u,t)||(c&&i(f,t)?u[t]=f[t]:u[t]=l("Symbol."+t)),u[t]}},b64b:function(t,e,n){var r=n("23e7"),o=n("7b0b"),i=n("df75"),a=n("d039"),c=a((function(){i(1)}));r({target:"Object",stat:!0,forced:c},{keys:function(t){return i(o(t))}})},b727:function(t,e,n){var r=n("0366"),o=n("44ad"),i=n("7b0b"),a=n("50c4"),c=n("65f0"),s=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,f=4==t,l=6==t,p=5==t||l;return function(d,h,v,y){for(var m,g,b=i(d),_=o(b),w=r(h,v,3),x=a(_.length),O=0,C=y||c,S=e?C(d,x):n?C(d,0):void 0;x>O;O++)if((p||O in _)&&(m=_[O],g=w(m,O,b),t))if(e)S[O]=g;else if(g)switch(t){case 3:return!0;case 5:return m;case 6:return O;case 2:s.call(S,m)}else if(f)return!1;return l?-1:u||f?f:S}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},bd5e:function(t,e,n){},c04e:function(t,e,n){var r=n("861d");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},c430:function(t,e){t.exports=!1},c6b6:function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},c6cd:function(t,e,n){var r=n("da84"),o=n("ce4e"),i="__core-js_shared__",a=r[i]||o(i,{});t.exports=a},c8ba:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}t.exports=n},c975:function(t,e,n){"use strict";var r=n("23e7"),o=n("4d64").indexOf,i=n("a640"),a=n("ae40"),c=[].indexOf,s=!!c&&1/[1].indexOf(1,-0)<0,u=i("indexOf"),f=a("indexOf",{ACCESSORS:!0,1:0});r({target:"Array",proto:!0,forced:s||!u||!f},{indexOf:function(t){return s?c.apply(this,arguments)||0:o(this,t,arguments.length>1?arguments[1]:void 0)}})},ca84:function(t,e,n){var r=n("5135"),o=n("fc6a"),i=n("4d64").indexOf,a=n("d012");t.exports=function(t,e){var n,c=o(t),s=0,u=[];for(n in c)!r(a,n)&&r(c,n)&&u.push(n);while(e.length>s)r(c,n=e[s++])&&(~i(u,n)||u.push(n));return u}},cc12:function(t,e,n){var r=n("da84"),o=n("861d"),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},cca6:function(t,e,n){var r=n("23e7"),o=n("60da");r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},cdf9:function(t,e,n){var r=n("825a"),o=n("861d"),i=n("f069");t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t),a=n.resolve;return a(e),n.promise}},ce4e:function(t,e,n){var r=n("da84"),o=n("9112");t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},d012:function(t,e){t.exports={}},d039:function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},d066:function(t,e,n){var r=n("428f"),o=n("da84"),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},d2bb:function(t,e,n){var r=n("825a"),o=n("3bbe");t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set,t.call(n,[]),e=n instanceof Array}catch(i){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},d44e:function(t,e,n){var r=n("9bf2").f,o=n("5135"),i=n("b622"),a=i("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,a)&&r(t,a,{configurable:!0,value:e})}},d784:function(t,e,n){"use strict";n("ac1f");var r=n("6eeb"),o=n("d039"),i=n("b622"),a=n("9263"),c=n("9112"),s=i("species"),u=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f=function(){return"$0"==="a".replace(/./,"$0")}(),l=i("replace"),p=function(){return!!/./[l]&&""===/./[l]("a","$0")}(),d=!o((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,l){var h=i(t),v=!o((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),y=v&&!o((function(){var e=!1,n=/a/;return"split"===t&&(n={},n.constructor={},n.constructor[s]=function(){return n},n.flags="",n[h]=/./[h]),n.exec=function(){return e=!0,null},n[h](""),!e}));if(!v||!y||"replace"===t&&(!u||!f||p)||"split"===t&&!d){var m=/./[h],g=n(h,""[t],(function(t,e,n,r,o){return e.exec===a?v&&!o?{done:!0,value:m.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),{REPLACE_KEEPS_$0:f,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),b=g[0],_=g[1];r(String.prototype,t,b),r(RegExp.prototype,h,2==e?function(t,e){return _.call(t,this,e)}:function(t){return _.call(t,this)})}l&&c(RegExp.prototype[h],"sham",!0)}},d81d:function(t,e,n){"use strict";var r=n("23e7"),o=n("b727").map,i=n("1dde"),a=n("ae40"),c=i("map"),s=a("map");r({target:"Array",proto:!0,forced:!c||!s},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},da84:function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n("c8ba"))},dbb4:function(t,e,n){var r=n("23e7"),o=n("83ab"),i=n("56ef"),a=n("fc6a"),c=n("06cf"),s=n("8418");r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){var e,n,r=a(t),o=c.f,u=i(r),f={},l=0;while(u.length>l)n=o(r,e=u[l++]),void 0!==n&&s(f,e,n);return f}})},df75:function(t,e,n){var r=n("ca84"),o=n("7839");t.exports=Object.keys||function(t){return r(t,o)}},e163:function(t,e,n){var r=n("5135"),o=n("7b0b"),i=n("f772"),a=n("e177"),c=i("IE_PROTO"),s=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,c)?t[c]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},e177:function(t,e,n){var r=n("d039");t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},e260:function(t,e,n){"use strict";var r=n("fc6a"),o=n("44d2"),i=n("3f8c"),a=n("69f3"),c=n("7dd0"),s="Array Iterator",u=a.set,f=a.getterFor(s);t.exports=c(Array,"Array",(function(t,e){u(this,{type:s,target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},e2cc:function(t,e,n){var r=n("6eeb");t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},e40d:function(t,e,n){},e439:function(t,e,n){var r=n("23e7"),o=n("d039"),i=n("fc6a"),a=n("06cf").f,c=n("83ab"),s=o((function(){a(1)})),u=!c||s;r({target:"Object",stat:!0,forced:u,sham:!c},{getOwnPropertyDescriptor:function(t,e){return a(i(t),e)}})},e538:function(t,e,n){var r=n("b622");e.f=r},e667:function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(e){return{error:!0,value:e}}}},e6cf:function(t,e,n){"use strict";var r,o,i,a,c=n("23e7"),s=n("c430"),u=n("da84"),f=n("d066"),l=n("fea9"),p=n("6eeb"),d=n("e2cc"),h=n("d44e"),v=n("2626"),y=n("861d"),m=n("1c0b"),g=n("19aa"),b=n("c6b6"),_=n("8925"),w=n("2266"),x=n("1c7e"),O=n("4840"),C=n("2cf4").set,S=n("b575"),A=n("cdf9"),$=n("44de"),E=n("f069"),k=n("e667"),j=n("69f3"),T=n("94ca"),P=n("b622"),I=n("2d00"),N=P("species"),M="Promise",L=j.get,R=j.set,D=j.getterFor(M),F=l,V=u.TypeError,U=u.document,B=u.process,H=f("fetch"),G=E.f,z=G,q="process"==b(B),X=!!(U&&U.createEvent&&u.dispatchEvent),K="unhandledrejection",W="rejectionhandled",Y=0,J=1,Q=2,Z=1,tt=2,et=T(M,(function(){var t=_(F)!==String(F);if(!t){if(66===I)return!0;if(!q&&"function"!=typeof PromiseRejectionEvent)return!0}if(s&&!F.prototype["finally"])return!0;if(I>=51&&/native code/.test(F))return!1;var e=F.resolve(1),n=function(t){t((function(){}),(function(){}))},r=e.constructor={};return r[N]=n,!(e.then((function(){}))instanceof n)})),nt=et||!x((function(t){F.all(t)["catch"]((function(){}))})),rt=function(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e},ot=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;S((function(){var o=e.value,i=e.state==J,a=0;while(r.length>a){var c,s,u,f=r[a++],l=i?f.ok:f.fail,p=f.resolve,d=f.reject,h=f.domain;try{l?(i||(e.rejection===tt&&st(t,e),e.rejection=Z),!0===l?c=o:(h&&h.enter(),c=l(o),h&&(h.exit(),u=!0)),c===f.promise?d(V("Promise-chain cycle")):(s=rt(c))?s.call(c,p,d):p(c)):d(o)}catch(v){h&&!u&&h.exit(),d(v)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&at(t,e)}))}},it=function(t,e,n){var r,o;X?(r=U.createEvent("Event"),r.promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},(o=u["on"+t])?o(r):t===K&&$("Unhandled promise rejection",n)},at=function(t,e){C.call(u,(function(){var n,r=e.value,o=ct(e);if(o&&(n=k((function(){q?B.emit("unhandledRejection",r,t):it(K,t,r)})),e.rejection=q||ct(e)?tt:Z,n.error))throw n.value}))},ct=function(t){return t.rejection!==Z&&!t.parent},st=function(t,e){C.call(u,(function(){q?B.emit("rejectionHandled",t):it(W,t,e.value)}))},ut=function(t,e,n,r){return function(o){t(e,n,o,r)}},ft=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=Q,ot(t,e,!0))},lt=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw V("Promise can't be resolved itself");var o=rt(n);o?S((function(){var r={done:!1};try{o.call(n,ut(lt,t,r,e),ut(ft,t,r,e))}catch(i){ft(t,r,i,e)}})):(e.value=n,e.state=J,ot(t,e,!1))}catch(i){ft(t,{done:!1},i,e)}}};et&&(F=function(t){g(this,F,M),m(t),r.call(this);var e=L(this);try{t(ut(lt,this,e),ut(ft,this,e))}catch(n){ft(this,e,n)}},r=function(t){R(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:Y,value:void 0})},r.prototype=d(F.prototype,{then:function(t,e){var n=D(this),r=G(O(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=q?B.domain:void 0,n.parent=!0,n.reactions.push(r),n.state!=Y&&ot(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=L(t);this.promise=t,this.resolve=ut(lt,t,e),this.reject=ut(ft,t,e)},E.f=G=function(t){return t===F||t===i?new o(t):z(t)},s||"function"!=typeof l||(a=l.prototype.then,p(l.prototype,"then",(function(t,e){var n=this;return new F((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof H&&c({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return A(F,H.apply(u,arguments))}}))),c({global:!0,wrap:!0,forced:et},{Promise:F}),h(F,M,!1,!0),v(M),i=f(M),c({target:M,stat:!0,forced:et},{reject:function(t){var e=G(this);return e.reject.call(void 0,t),e.promise}}),c({target:M,stat:!0,forced:s||et},{resolve:function(t){return A(s&&this===i?F:this,t)}}),c({target:M,stat:!0,forced:nt},{all:function(t){var e=this,n=G(e),r=n.resolve,o=n.reject,i=k((function(){var n=m(e.resolve),i=[],a=0,c=1;w(t,(function(t){var s=a++,u=!1;i.push(void 0),c++,n.call(e,t).then((function(t){u||(u=!0,i[s]=t,--c||r(i))}),o)})),--c||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=G(e),r=n.reject,o=k((function(){var o=m(e.resolve);w(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},e893:function(t,e,n){var r=n("5135"),o=n("56ef"),i=n("06cf"),a=n("9bf2");t.exports=function(t,e){for(var n=o(e),c=a.f,s=i.f,u=0;u<n.length;u++){var f=n[u];r(t,f)||c(t,f,s(e,f))}}},e8b5:function(t,e,n){var r=n("c6b6");t.exports=Array.isArray||function(t){return"Array"==r(t)}},e95a:function(t,e,n){var r=n("b622"),o=n("3f8c"),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},f069:function(t,e,n){"use strict";var r=n("1c0b"),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},f5df:function(t,e,n){var r=n("00ee"),o=n("c6b6"),i=n("b622"),a=i("toStringTag"),c="Arguments"==o(function(){return arguments}()),s=function(t,e){try{return t[e]}catch(n){}};t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=s(e=Object(t),a))?n:c?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},f772:function(t,e,n){var r=n("5692"),o=n("90e3"),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},fc6a:function(t,e,n){var r=n("44ad"),o=n("1d80");t.exports=function(t){return r(o(t))}},fdbc:function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},fdbf:function(t,e,n){var r=n("4930");t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},fea9:function(t,e,n){var r=n("da84");t.exports=r.Promise}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZXgvZGlzdC92dWV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWludGVnZXItcGx1c21pbnVzL3NyYy9jb21wb25lbnRzL0ludGVnZXJQbHVzbWludXMudnVlPzU1MmMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy92dWUtaW50ZWdlci1wbHVzbWludXMvc3JjL2NvbXBvbmVudHMvSW50ZWdlclBsdXNtaW51cy52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1pbnRlZ2VyLXBsdXNtaW51cy9zcmMvY29tcG9uZW50cy9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT9hMThhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtaW50ZWdlci1wbHVzbWludXMvc3JjL2NvbXBvbmVudHMvSW50ZWdlclBsdXNtaW51cy52dWU/NGI5ZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtcm91dGVyL2Rpc3QvdnVlLXJvdXRlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkaW5nLW92ZXJsYXkvZGlzdC92dWUtbG9hZGluZy5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWludGVnZXItcGx1c21pbnVzL3NyYy9jb21wb25lbnRzL0ludGVnZXJQbHVzbWludXMudnVlP2QwMDYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3Rvci5qcyJdLCJuYW1lcyI6WyJ3ZWxsS25vd25TeW1ib2wiLCJUT19TVFJJTkdfVEFHIiwidGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJTdHJpbmciLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjYWxsIiwiYSIsImIiLCJjIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZiIsInRvU3RyaW5nIiwid2luZG93TmFtZXMiLCJ3aW5kb3ciLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJpdCIsImVycm9yIiwic2xpY2UiLCJERVNDUklQVE9SUyIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwidG9QcmltaXRpdmUiLCJoYXMiLCJJRThfRE9NX0RFRklORSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk8iLCJQIiwiZmFpbHMiLCJjcmVhdGVFbGVtZW50IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJjbGFzc29mIiwicmVnZXhwRXhlYyIsIlIiLCJTIiwiZXhlYyIsInJlc3VsdCIsIlR5cGVFcnJvciIsImdsb2JhbCIsIkRPTUl0ZXJhYmxlcyIsImZvckVhY2giLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsInByb3RvdHlwZSIsIiRmb3JFYWNoIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoIiwiU1RSSUNUX01FVEhPRCIsIlVTRVNfVE9fTEVOR1RIIiwiY2FsbGJhY2tmbiIsInRoaXMiLCJDb25zdHJ1Y3RvciIsIm5hbWUiLCJnZXRCdWlsdEluIiwiSVRFUkFUT1IiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJuZXh0IiwiZG9uZSIsIkFycmF5IiwiZnJvbSIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwib2JqZWN0IiwidXNlckFnZW50IiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiY29uc3RydWN0b3IiLCJmb28iLCJCb29sZWFuIiwiYW5PYmplY3QiLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJ0b0xlbmd0aCIsImJpbmQiLCJnZXRJdGVyYXRvck1ldGhvZCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJSZXN1bHQiLCJzdG9wcGVkIiwiaXRlcmF0ZSIsIml0ZXJhYmxlIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiaXRlcmF0b3IiLCJpdGVyRm4iLCJpbmRleCIsInN0ZXAiLCJib3VuZEZ1bmN0aW9uIiwidmFsdWUiLCJzdG9wIiwidG9JbnRlZ2VyIiwibWF4IiwiTWF0aCIsIm1pbiIsImludGVnZXIiLCJyZWRlZmluZSIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsIm9wdGlvbnMiLCJzb3VyY2UiLCJGT1JDRUQiLCJ0YXJnZXQiLCJrZXkiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsImZvcmNlZCIsInNoYW0iLCJpbnRlcm5hbE9iamVjdEtleXMiLCJlbnVtQnVnS2V5cyIsImhpZGRlbktleXMiLCJjb25jYXQiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsIkNPTlNUUlVDVE9SX05BTUUiLCJjb25maWd1cmFibGUiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwicmVuZGVyIiwic3RhdGljUmVuZGVyRm5zIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiaG9vayIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsImNvbnRleHQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwiaCIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiZW1wdHlPYmplY3QiLCJmcmVlemUiLCJpc1VuZGVmIiwidiIsImlzRGVmIiwiaXNUcnVlIiwiaXNGYWxzZSIsImlzUHJpbWl0aXZlIiwiaXNPYmplY3QiLCJvYmoiLCJfdG9TdHJpbmciLCJpc1BsYWluT2JqZWN0IiwiaXNSZWdFeHAiLCJpc1ZhbGlkQXJyYXlJbmRleCIsInZhbCIsIm4iLCJwYXJzZUZsb2F0IiwiZmxvb3IiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsInRoZW4iLCJjYXRjaCIsImlzQXJyYXkiLCJKU09OIiwic3RyaW5naWZ5IiwidG9OdW1iZXIiLCJpc05hTiIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwibWFwIiwiY3JlYXRlIiwibGlzdCIsInNwbGl0IiwiaSIsInRvTG93ZXJDYXNlIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsInJlbW92ZSIsImFyciIsIml0ZW0iLCJpbmRleE9mIiwic3BsaWNlIiwiaGFzT3duUHJvcGVydHkiLCJoYXNPd24iLCJjYWNoZWQiLCJjYWNoZSIsImhpdCIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsInJlcGxhY2UiLCJfIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJwb2x5ZmlsbEJpbmQiLCJjdHgiLCJib3VuZEZuIiwibCIsIl9sZW5ndGgiLCJuYXRpdmVCaW5kIiwiRnVuY3Rpb24iLCJ0b0FycmF5Iiwic3RhcnQiLCJyZXQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJyZXMiLCJub29wIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJlIiwiRGF0ZSIsImdldFRpbWUiLCJrZXlzQSIsImtleXMiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIm9uY2UiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJhc3luYyIsIl9saWZlY3ljbGVIb29rcyIsInVuaWNvZGVSZWdFeHAiLCJpc1Jlc2VydmVkIiwiY2hhckNvZGVBdCIsImRlZiIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImJhaWxSRSIsIlJlZ0V4cCIsInBhcnNlUGF0aCIsInBhdGgiLCJzZWdtZW50cyIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJuYXZpZ2F0b3IiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzRkYiLCJtYXRjaCIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlzU2VydmVyUmVuZGVyaW5nIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJTZXQiLCJzZXQiLCJjbGVhciIsIndhcm4iLCJ1aWQiLCJEZXAiLCJpZCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJwdXNoIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5IiwidXBkYXRlIiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwicG9wIiwiVk5vZGUiLCJ0YWciLCJkYXRhIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwibWV0aG9kc1RvUGF0Y2giLCJtZXRob2QiLCJvcmlnaW5hbCIsImFyZ3MiLCJsZW4iLCJpbnNlcnRlZCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsInNyYyIsIl9fcHJvdG9fXyIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInZtIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJkZWR1cGVIb29rcyIsImhvb2tzIiwibWVyZ2VBc3NldHMiLCJ0eXBlIiwia2V5JDEiLCJwcm9wcyIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJkZWZhdWx0U3RyYXQiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJtZXJnZU9wdGlvbnMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJwcm9wIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJkZWZhdWx0IiwiX3Byb3BzIiwiZ2V0VHlwZSIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaGFuZGxlRXJyb3IiLCJlcnIiLCJpbmZvIiwiY3VyIiwiJHBhcmVudCIsImVycm9yQ2FwdHVyZWQiLCJjYXB0dXJlIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsImhhbmRsZXIiLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwiY29uc29sZSIsInRpbWVyRnVuYyIsImlzVXNpbmdNaWNyb1Rhc2siLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJQcm9taXNlIiwicCIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiTXV0YXRpb25PYnNlcnZlciIsInNldEltbWVkaWF0ZSIsImNvdW50ZXIiLCJvYnNlcnZlciIsInRleHROb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNoYXJhY3RlckRhdGEiLCJuZXh0VGljayIsImNiIiwiX3Jlc29sdmUiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib24iLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwiZXZlbnQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwiYXR0cnMiLCJhbHRLZXkiLCJjaGVja1Byb3AiLCJoYXNoIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsImxhc3QiLCJzaGlmdCIsIl9pc1ZMaXN0IiwiaW5pdFByb3ZpZGUiLCJfcHJvdmlkZWQiLCJpbml0SW5qZWN0aW9ucyIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwicmVuZGVyU2xvdCIsImZhbGxiYWNrIiwiYmluZE9iamVjdCIsIm5vZGVzIiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwiJHNsb3RzIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImxvb3AiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwidHJlZSIsIl9yZW5kZXJQcm94eSIsIm1hcmtTdGF0aWMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInZhbHVlcyIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbiIsIl9zIiwiX2wiLCJfdCIsIl9xIiwiX2kiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX2UiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwidGhpcyQxIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwibGlzdGVuZXJzIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX2MiLCJkIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm1lcmdlUHJvcHMiLCJyZW5kZXJDb250ZXh0IiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInZub2RlcyIsImNsb25lIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImluaXQiLCJoeWRyYXRpbmciLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiY2lkIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsInRyYW5zZm9ybU1vZGVsIiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImluc3RhbGxDb21wb25lbnRIb29rcyIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsImlubGluZVRlbXBsYXRlIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImYxIiwiZjIiLCJjYWxsYmFjayIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJfY3JlYXRlRWxlbWVudCIsImlzIiwicHJlIiwiYXBwbHlOUyIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiZm9yY2UiLCJzdHlsZSIsImNsYXNzIiwiaW5pdFJlbmRlciIsIl92bm9kZSIsInBhcmVudFZub2RlIiwiX3JlbmRlckNoaWxkcmVuIiwicGFyZW50RGF0YSIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJNaXhpbiIsIlZ1ZSIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJlbnN1cmVDdG9yIiwiY29tcCIsImJhc2UiLCJfX2VzTW9kdWxlIiwidG9TdHJpbmdUYWciLCJmYWN0b3J5IiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJvd25lciIsIm93bmVycyIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsInN5bmMiLCJ0aW1lckxvYWRpbmciLCJ0aW1lclRpbWVvdXQiLCIkb24iLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsIiRmb3JjZVVwZGF0ZSIsImNsZWFyVGltZW91dCIsInJlamVjdCIsInJlYXNvbiIsImNvbXBvbmVudCIsImRlbGF5IiwidGltZW91dCIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJpbml0RXZlbnRzIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwiJGVtaXQiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImluaXRMaWZlY3ljbGUiLCIkY2hpbGRyZW4iLCIkcmVmcyIsIl93YXRjaGVyIiwiX2luYWN0aXZlIiwiX2RpcmVjdEluYWN0aXZlIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJsaWZlY3ljbGVNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJfZGF0YSIsIm1vdW50Q29tcG9uZW50IiwiZWwiLCJ1cGRhdGVDb21wb25lbnQiLCJXYXRjaGVyIiwiYmVmb3JlIiwicmVuZGVyQ2hpbGRyZW4iLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwiaXNJbkluYWN0aXZlVHJlZSIsImRpcmVjdCIsImhhbmRsZXJzIiwiaiIsInF1ZXVlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJyZXNldFNjaGVkdWxlclN0YXRlIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93Iiwibm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInNvcnQiLCJydW4iLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsImNhbGxVcGRhdGVkSG9va3MiLCJlbWl0IiwicXVldWVXYXRjaGVyIiwidWlkJDIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiZGVlcCIsInVzZXIiLCJsYXp5IiwiYWN0aXZlIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImV4cHJlc3Npb24iLCJjbGVhbnVwRGVwcyIsInRtcCIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJpbml0U3RhdGUiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsImluaXREYXRhIiwiaW5pdENvbXB1dGVkIiwiaW5pdFdhdGNoIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiZ2V0RGF0YSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiZGVmaW5lQ29tcHV0ZWQiLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsImNyZWF0ZVdhdGNoZXIiLCIkd2F0Y2giLCJzdGF0ZU1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJ1aWQkMyIsImluaXRNaXhpbiIsIl9pbml0IiwiX3VpZCIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIl9zZWxmIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwiY2FjaGVkU3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJjb21wb25lbnRzIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwiaW5pdFVzZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsInVuc2hpZnQiLCJpbnN0YWxsIiwiaW5pdE1peGluJDEiLCJtaXhpbiIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsIkNvbXAiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJkZWZpbml0aW9uIiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwYXR0ZXJuIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiZmlsdGVyIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJjYWNoZWQkJDEiLCJwYXR0ZXJuVHlwZXMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsIk51bWJlciIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJtb3VudGVkIiwicmVmJDEiLCJwYXJzZUludCIsImJ1aWx0SW5Db21wb25lbnRzIiwiaW5pdEdsb2JhbEFQSSIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImRlbGV0ZSIsIm9ic2VydmFibGUiLCJ2ZXJzaW9uIiwiYWNjZXB0VmFsdWUiLCJhdHRyIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJpc0ZhbHN5QXR0clZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInJlbmRlckNsYXNzIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0Iiwic3RyaW5naWZpZWQiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiSFRNTFVua25vd25FbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJpc1RleHRJbnB1dFR5cGUiLCJxdWVyeSIsInNlbGVjdGVkIiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZUVsZW1lbnQkMSIsInRhZ05hbWUiLCJtdWx0aXBsZSIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwibm9kZU9wcyIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwic2FtZUlucHV0VHlwZSIsInR5cGVBIiwidHlwZUIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsImJhY2tlbmQiLCJtb2R1bGVzIiwiZW1wdHlOb2RlQXQiLCJjcmVhdGVSbUNiIiwiY2hpbGRFbG0iLCJyZW1vdmVOb2RlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsImlubmVyTm9kZSIsInRyYW5zaXRpb24iLCJhY3RpdmF0ZSIsInJlZiQkMSIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsInJtIiwidXBkYXRlQ2hpbGRyZW4iLCJvbGRDaCIsIm5ld0NoIiwicmVtb3ZlT25seSIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwicGF0Y2hWbm9kZSIsImZpbmRJZHhJbk9sZCIsImVuZCIsImh5ZHJhdGUiLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJoYXNDaGlsZE5vZGVzIiwiaW5uZXJIVE1MIiwiY2hpbGRyZW5NYXRjaCIsImZpcnN0Q2hpbGQiLCJmdWxsSW52b2tlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50Iiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbGRFbG0iLCJfbGVhdmVDYiIsInBhdGNoYWJsZSIsImkkMiIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJkaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZEFyZyIsImFyZyIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJqb2luIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYmFzZVNldEF0dHIiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsInRhcmdldCQxIiwia2xhc3MiLCJSQU5HRV9UT0tFTiIsIkNIRUNLQk9YX1JBRElPX1RPS0VOIiwibm9ybWFsaXplRXZlbnRzIiwiY2hhbmdlIiwiY3JlYXRlT25jZUhhbmRsZXIkMSIsInJlbW92ZSQyIiwidXNlTWljcm90YXNrRml4IiwiYWRkJDEiLCJhdHRhY2hlZFRpbWVzdGFtcCIsIl93cmFwcGVyIiwiY3VycmVudFRhcmdldCIsIm93bmVyRG9jdW1lbnQiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJzdmdDb250YWluZXIiLCJldmVudHMiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwiY2hpbGROb2RlcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJfdk1vZGlmaWVycyIsIm51bWJlciIsInRyaW0iLCJwYXJzZVN0eWxlVGV4dCIsImNzc1RleHQiLCJsaXN0RGVsaW1pdGVyIiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImdldFN0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJleHBlY3RlZFR5cGUiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwicyIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsImNhbmNlbGxlZCIsIl9lbnRlckNiIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwbGF0Zm9ybU1vZHVsZXMiLCJwYXRjaCIsInZtb2RlbCIsInRyaWdnZXIiLCJkaXJlY3RpdmUiLCJiaW5kaW5nIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJzb21lIiwibyIsIm5lZWRSZXNldCIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5IiwidW5iaW5kIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvblByb3BzIiwibW9kZSIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJyYXdDaGlsZCIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJpc1NhbWVDaGlsZCIsIm9sZENoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwicG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidXBkYXRlZCIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbW92ZUNiIiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJuZXdQb3MiLCJvbGRQb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsInBsYXRmb3JtQ29tcG9uZW50cyIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJodG1sIiwiSVNfSU9TIiwibG9jYXRpb24iLCJjbGVhckltbWVkaWF0ZSIsInByb2Nlc3MiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwicnVubmVyIiwibGlzdGVuZXIiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInZlcnNpb25zIiwidjgiLCJhcHBseU1peGluIiwidnVleEluaXQiLCJzdG9yZSIsIiRzdG9yZSIsImRldnRvb2xIb29rIiwiZGV2dG9vbFBsdWdpbiIsIl9kZXZ0b29sSG9vayIsInRhcmdldFN0YXRlIiwicmVwbGFjZVN0YXRlIiwic3Vic2NyaWJlIiwibXV0YXRpb24iLCJzdGF0ZSIsImZvckVhY2hWYWx1ZSIsInBhcnRpYWwiLCJNb2R1bGUiLCJyYXdNb2R1bGUiLCJydW50aW1lIiwiX2NoaWxkcmVuIiwiX3Jhd01vZHVsZSIsInJhd1N0YXRlIiwibmFtZXNwYWNlZCIsImFkZENoaWxkIiwiZ2V0Q2hpbGQiLCJhY3Rpb25zIiwibXV0YXRpb25zIiwiZ2V0dGVycyIsImZvckVhY2hDaGlsZCIsImZvckVhY2hHZXR0ZXIiLCJmb3JFYWNoQWN0aW9uIiwiZm9yRWFjaE11dGF0aW9uIiwiTW9kdWxlQ29sbGVjdGlvbiIsInJhd1Jvb3RNb2R1bGUiLCJyZWdpc3RlciIsInRhcmdldE1vZHVsZSIsIm5ld01vZHVsZSIsInJlZHVjZSIsInJvb3QiLCJnZXROYW1lc3BhY2UiLCJyYXdDaGlsZE1vZHVsZSIsInVucmVnaXN0ZXIiLCJTdG9yZSIsInBsdWdpbnMiLCJzdHJpY3QiLCJfY29tbWl0dGluZyIsIl9hY3Rpb25zIiwiX2FjdGlvblN1YnNjcmliZXJzIiwiX211dGF0aW9ucyIsIl93cmFwcGVkR2V0dGVycyIsIl9tb2R1bGVzIiwiX21vZHVsZXNOYW1lc3BhY2VNYXAiLCJfc3Vic2NyaWJlcnMiLCJfd2F0Y2hlclZNIiwiX21ha2VMb2NhbEdldHRlcnNDYWNoZSIsImRpc3BhdGNoIiwiY29tbWl0IiwicGF5bG9hZCIsImluc3RhbGxNb2R1bGUiLCJyZXNldFN0b3JlVk0iLCJ1c2VEZXZ0b29scyIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwiZ2VuZXJpY1N1YnNjcmliZSIsInJlc2V0U3RvcmUiLCJob3QiLCJvbGRWbSIsIl92bSIsIndyYXBwZWRHZXR0ZXJzIiwiJCRzdGF0ZSIsImVuYWJsZVN0cmljdE1vZGUiLCJfd2l0aENvbW1pdCIsInJvb3RTdGF0ZSIsInBhcmVudFN0YXRlIiwiZ2V0TmVzdGVkU3RhdGUiLCJtb2R1bGVOYW1lIiwibG9jYWwiLCJtYWtlTG9jYWxDb250ZXh0IiwibmFtZXNwYWNlZFR5cGUiLCJyZWdpc3Rlck11dGF0aW9uIiwiYWN0aW9uIiwicmVnaXN0ZXJBY3Rpb24iLCJyZWdpc3RlckdldHRlciIsIm5vTmFtZXNwYWNlIiwiX3R5cGUiLCJfcGF5bG9hZCIsIl9vcHRpb25zIiwidW5pZnlPYmplY3RTdHlsZSIsIm1ha2VMb2NhbEdldHRlcnMiLCJnZXR0ZXJzUHJveHkiLCJzcGxpdFBvcyIsImxvY2FsVHlwZSIsImVudHJ5Iiwicm9vdEdldHRlcnMiLCJyYXdHZXR0ZXIiLCJfVnVlIiwiYWxsIiwiYWZ0ZXIiLCJzdWJzY3JpYmVBY3Rpb24iLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsIm5vcm1hbGl6ZU1hcCIsImdldE1vZHVsZUJ5TmFtZXNwYWNlIiwidnVleCIsIm1hcE11dGF0aW9ucyIsIm1hcEdldHRlcnMiLCJtYXBBY3Rpb25zIiwiY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMiLCJpc1ZhbGlkTWFwIiwiaGVscGVyIiwiaW5kZXhfZXNtIiwiSXRlcmF0b3JzIiwib2JqZWN0S2V5cyIsIlByb3BlcnRpZXMiLCIkIiwicHJvdG8iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJDIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiJGZpbHRlciIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiYXJndW1lbnQiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1heWJlVG9TdHJpbmciLCJSRVBMQUNFIiwibmF0aXZlUmVwbGFjZSIsIm1heWJlQ2FsbE5hdGl2ZSIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwiUkVQTEFDRV9LRUVQU18kMCIsIlVOU0FGRV9TVUJTVElUVVRFIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJyZXBsYWNlciIsInJlZ2V4cCIsInJ4IiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsInVuaWNvZGUiLCJyZXN1bHRzIiwibWF0Y2hTdHIiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsImdyb3VwcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsIm0iLCJzeW1ib2xzIiwiX2RlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZU9ubHkiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJJU19QVVJFIiwiY29weXJpZ2h0IiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsIndoaXRlc3BhY2VzIiwid2hpdGVzcGFjZSIsImx0cmltIiwicnRyaW0iLCJUWVBFIiwic3RyaW5nIiwiYml0bWFwIiwiX2giLCJ2ZXJ0aWNhbCIsImdldEJ0bkNsYXNzIiwiZGVjcmVtZW50QXJpYUxhYmVsIiwiZGlzYWJsZWQiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJzcGluQnV0dG9uQXJpYUxhYmVsIiwiaW50VmFsdWUiLCJpbmNyZW1lbnRBcmlhTGFiZWwiLCJJbmRleGVkT2JqZWN0IiwibmF0aXZlQXNzaWduIiwiYXNzaWduIiwiQSIsIkIiLCJhbHBoYWJldCIsImNociIsIlQiLCJhcmd1bWVudHNMZW5ndGgiLCJDT05WRVJUX1RPX1NUUklORyIsImZpcnN0Iiwic2Vjb25kIiwic2l6ZSIsImNvZGVBdCIsIm9yaWdpbmFsQXJyYXkiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJXZWFrTWFwIiwiZW5mb3JjZSIsImdldHRlckZvciIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJpbnNwZWN0U291cmNlIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwic2V0UHJvdG90eXBlT2YiLCJkdW1teSIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiTkFNRSIsImFjdGl2ZVhEb2N1bWVudCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIkdUIiwiTFQiLCJQUk9UT1RZUEUiLCJTQ1JJUFQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lIiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJKUyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiRiIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRUb1N0cmluZ1RhZyIsIkl0ZXJhdG9yc0NvcmUiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJLRVlTIiwiVkFMVUVTIiwiRU5UUklFUyIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJwcm9wZXJ0eUtleSIsImZ1bmN0aW9uVG9TdHJpbmciLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiaXNFcnJvciIsImlzRXh0ZW5kZWRFcnJvciIsIl9uYW1lIiwiVmlldyIsInJvdXRlclZpZXciLCJyb3V0ZSIsIiRyb3V0ZSIsIl9yb3V0ZXJWaWV3Q2FjaGUiLCJkZXB0aCIsImluYWN0aXZlIiwiX3JvdXRlclJvb3QiLCJ2bm9kZURhdGEiLCJyb3V0ZXJWaWV3RGVwdGgiLCJjYWNoZWREYXRhIiwiY2FjaGVkQ29tcG9uZW50IiwiY29uZmlnUHJvcHMiLCJmaWxsUHJvcHNpbkRhdGEiLCJyZWdpc3RlclJvdXRlSW5zdGFuY2UiLCJpbnN0YW5jZXMiLCJwcm9wc1RvUGFzcyIsInJlc29sdmVQcm9wcyIsImVuY29kZVJlc2VydmVSRSIsImVuY29kZVJlc2VydmVSZXBsYWNlciIsImNvbW1hUkUiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZXNvbHZlUXVlcnkiLCJleHRyYVF1ZXJ5IiwiX3BhcnNlUXVlcnkiLCJwYXJzZWRRdWVyeSIsInBhcnNlIiwicGFyc2VRdWVyeSIsInBhcmFtIiwicGFydHMiLCJzdHJpbmdpZnlRdWVyeSIsInZhbDIiLCJ4IiwidHJhaWxpbmdTbGFzaFJFIiwiY3JlYXRlUm91dGUiLCJyZWNvcmQiLCJyZWRpcmVjdGVkRnJvbSIsInJvdXRlciIsIm1ldGEiLCJmdWxsUGF0aCIsImdldEZ1bGxQYXRoIiwiZm9ybWF0TWF0Y2giLCJTVEFSVCIsIl9zdHJpbmdpZnlRdWVyeSIsImlzU2FtZVJvdXRlIiwiaXNPYmplY3RFcXVhbCIsImFLZXlzIiwiYktleXMiLCJhVmFsIiwiYlZhbCIsImlzSW5jbHVkZWRSb3V0ZSIsInF1ZXJ5SW5jbHVkZXMiLCJyZXNvbHZlUGF0aCIsInJlbGF0aXZlIiwiYXBwZW5kIiwiZmlyc3RDaGFyIiwic3RhY2siLCJzZWdtZW50IiwiaGFzaEluZGV4IiwicXVlcnlJbmRleCIsImNsZWFuUGF0aCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHBfMSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlXzEiLCJjb21waWxlXzEiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbl8xIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwXzEiLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJvZmZzZXQiLCJwcmVmaXgiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiZW5jb2RlQXN0ZXJpc2siLCJwcmV0dHkiLCJ0b2tlbiIsImF0dGFjaEtleXMiLCJyZSIsImZsYWdzIiwic2Vuc2l0aXZlIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJlbmRzV2l0aERlbGltaXRlciIsInJlZ2V4cENvbXBpbGVDYWNoZSIsImZpbGxQYXJhbXMiLCJyb3V0ZU1zZyIsImZpbGxlciIsInBhdGhNYXRjaCIsIm5vcm1hbGl6ZUxvY2F0aW9uIiwicGFyYW1zJDEiLCJyYXdQYXRoIiwicGFyc2VkUGF0aCIsImJhc2VQYXRoIiwidG9UeXBlcyIsImV2ZW50VHlwZXMiLCJMaW5rIiwicmVxdWlyZWQiLCJleGFjdCIsImV4YWN0QWN0aXZlQ2xhc3MiLCIkcm91dGVyIiwiaHJlZiIsImNsYXNzZXMiLCJnbG9iYWxBY3RpdmVDbGFzcyIsImxpbmtBY3RpdmVDbGFzcyIsImdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MiLCJsaW5rRXhhY3RBY3RpdmVDbGFzcyIsImFjdGl2ZUNsYXNzRmFsbGJhY2siLCJleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2siLCJjb21wYXJlVGFyZ2V0IiwiZ3VhcmRFdmVudCIsImNsaWNrIiwic2NvcGVkU2xvdCIsIm5hdmlnYXRlIiwiaXNBY3RpdmUiLCJpc0V4YWN0QWN0aXZlIiwiZmluZEFuY2hvciIsImFEYXRhIiwiaGFuZGxlciQxIiwiZXZlbnQkMSIsImFBdHRycyIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJpbnN0YWxsZWQiLCJyZWdpc3Rlckluc3RhbmNlIiwiY2FsbFZhbCIsIl9yb3V0ZXIiLCJoaXN0b3J5IiwiX3JvdXRlIiwiYmVmb3JlUm91dGVFbnRlciIsImJlZm9yZVJvdXRlTGVhdmUiLCJiZWZvcmVSb3V0ZVVwZGF0ZSIsImNyZWF0ZVJvdXRlTWFwIiwicm91dGVzIiwib2xkUGF0aExpc3QiLCJvbGRQYXRoTWFwIiwib2xkTmFtZU1hcCIsInBhdGhMaXN0IiwicGF0aE1hcCIsIm5hbWVNYXAiLCJhZGRSb3V0ZVJlY29yZCIsIm1hdGNoQXMiLCJwYXRoVG9SZWdleHBPcHRpb25zIiwibm9ybWFsaXplZFBhdGgiLCJub3JtYWxpemVQYXRoIiwiY2FzZVNlbnNpdGl2ZSIsInJlZ2V4IiwiY29tcGlsZVJvdXRlUmVnZXgiLCJyZWRpcmVjdCIsImNoaWxkTWF0Y2hBcyIsImFsaWFzIiwiYWxpYXNlcyIsImFsaWFzUm91dGUiLCJjcmVhdGVNYXRjaGVyIiwiYWRkUm91dGVzIiwiY3VycmVudFJvdXRlIiwiX2NyZWF0ZVJvdXRlIiwicGFyYW1OYW1lcyIsInJlY29yZCQxIiwibWF0Y2hSb3V0ZSIsIm9yaWdpbmFsUmVkaXJlY3QiLCJyZXNvbHZlUmVjb3JkUGF0aCIsInJlc29sdmVkUGF0aCIsImFsaWFzZWRQYXRoIiwiYWxpYXNlZE1hdGNoIiwiYWxpYXNlZFJlY29yZCIsIlRpbWUiLCJnZW5TdGF0ZUtleSIsInRvRml4ZWQiLCJfa2V5IiwiZ2V0U3RhdGVLZXkiLCJzZXRTdGF0ZUtleSIsInBvc2l0aW9uU3RvcmUiLCJzZXR1cFNjcm9sbCIsInByb3RvY29sQW5kUGF0aCIsImFic29sdXRlUGF0aCIsInN0YXRlQ29weSIsInNhdmVTY3JvbGxQb3NpdGlvbiIsImhhbmRsZVNjcm9sbCIsImlzUG9wIiwiYXBwIiwiYmVoYXZpb3IiLCJzY3JvbGxCZWhhdmlvciIsImdldFNjcm9sbFBvc2l0aW9uIiwic2hvdWxkU2Nyb2xsIiwic2Nyb2xsVG9Qb3NpdGlvbiIsInBhZ2VYT2Zmc2V0IiwieSIsInBhZ2VZT2Zmc2V0IiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwiZG9jRWwiLCJkb2N1bWVudEVsZW1lbnQiLCJkb2NSZWN0IiwiZWxSZWN0IiwiaXNWYWxpZFBvc2l0aW9uIiwiaXNOdW1iZXIiLCJub3JtYWxpemVQb3NpdGlvbiIsIm5vcm1hbGl6ZU9mZnNldCIsImhhc2hTdGFydHNXaXRoTnVtYmVyUkUiLCJzZWxlY3RvciIsImdldEVsZW1lbnRCeUlkIiwic2Nyb2xsVG8iLCJzdXBwb3J0c1B1c2hTdGF0ZSIsInVhIiwicHVzaFN0YXRlIiwidXJsIiwicnVuUXVldWUiLCJyZXNvbHZlQXN5bmNDb21wb25lbnRzIiwiaGFzQXN5bmMiLCJmbGF0TWFwQ29tcG9uZW50cyIsInJlc29sdmVkRGVmIiwiaXNFU01vZHVsZSIsIm1zZyIsIkVycm9yIiwiZmxhdHRlbiIsIk5hdmlnYXRpb25EdXBsaWNhdGVkIiwibm9ybWFsaXplZExvY2F0aW9uIiwiSGlzdG9yeSIsIm5vcm1hbGl6ZUJhc2UiLCJyZWFkeSIsInJlYWR5Q2JzIiwicmVhZHlFcnJvckNicyIsImVycm9yQ2JzIiwiYmFzZUVsIiwicmVzb2x2ZVF1ZXVlIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJleHRyYWN0R3VhcmRzIiwicmVjb3JkcyIsInJldmVyc2UiLCJndWFyZHMiLCJpbnN0YW5jZSIsImd1YXJkIiwiZXh0cmFjdEd1YXJkIiwiZXh0cmFjdExlYXZlR3VhcmRzIiwiYmluZEd1YXJkIiwiZXh0cmFjdFVwZGF0ZUhvb2tzIiwiZXh0cmFjdEVudGVyR3VhcmRzIiwiaXNWYWxpZCIsImJpbmRFbnRlckd1YXJkIiwicG9sbCIsImxpc3RlbiIsIm9uUmVhZHkiLCJlcnJvckNiIiwib25FcnJvciIsInRyYW5zaXRpb25UbyIsIm9uQ29tcGxldGUiLCJvbkFib3J0IiwiY29uZmlybVRyYW5zaXRpb24iLCJ1cGRhdGVSb3V0ZSIsImVuc3VyZVVSTCIsImFib3J0IiwiYmVmb3JlSG9va3MiLCJwb3N0RW50ZXJDYnMiLCJlbnRlckd1YXJkcyIsInJlc29sdmVIb29rcyIsInByZXYiLCJhZnRlckhvb2tzIiwiSFRNTDVIaXN0b3J5IiwiZXhwZWN0U2Nyb2xsIiwic3VwcG9ydHNTY3JvbGwiLCJpbml0TG9jYXRpb24iLCJnZXRMb2NhdGlvbiIsImdvIiwiZnJvbVJvdXRlIiwiZ2V0Q3VycmVudExvY2F0aW9uIiwiZGVjb2RlVVJJIiwicGF0aG5hbWUiLCJzZWFyY2giLCJIYXNoSGlzdG9yeSIsImNoZWNrRmFsbGJhY2siLCJlbnN1cmVTbGFzaCIsInNldHVwTGlzdGVuZXJzIiwiZ2V0SGFzaCIsInJlcGxhY2VIYXNoIiwicHVzaEhhc2giLCJzZWFyY2hJbmRleCIsImdldFVybCIsIkFic3RyYWN0SGlzdG9yeSIsInRhcmdldEluZGV4IiwiVnVlUm91dGVyIiwiYXBwcyIsIm1hdGNoZXIiLCJyZWdpc3Rlckhvb2siLCJjcmVhdGVIcmVmIiwic2V0dXBIYXNoTGlzdGVuZXIiLCJiZWZvcmVFYWNoIiwiYmVmb3JlUmVzb2x2ZSIsImFmdGVyRWFjaCIsImJhY2siLCJmb3J3YXJkIiwiZ2V0TWF0Y2hlZENvbXBvbmVudHMiLCJub3JtYWxpemVkVG8iLCJ0Iiwic2VsZiIsInIiLCJmb2N1c0luIiwiY29udGFpbnMiLCJjb250YWluZXIiLCJpc0Z1bGxQYWdlIiwicGFyZW50RWxlbWVudCIsImZvY3VzIiwiYmVmb3JlRGVzdHJveSIsInUiLCJjb2xvciIsImhlaWdodCIsIndpZHRoIiwidmlld0JveCIsInhtbG5zIiwic3Ryb2tlIiwiZmlsbCIsImN4IiwiY3kiLCJhdHRyaWJ1dGVOYW1lIiwiZHVyIiwicmVwZWF0Q291bnQiLCJiZWdpbiIsImNhbGNNb2RlIiwiYXR0cmlidXRlVHlwZSIsInByb2dyYW1tYXRpYyIsImNhbkNhbmNlbCIsIm9uQ2FuY2VsIiwiYmFja2dyb3VuZENvbG9yIiwib3BhY2l0eSIsInpJbmRleCIsImxvYWRlciIsIlNwaW5uZXIiLCJEb3RzIiwiQmFycyIsImtleVByZXNzIiwiY2FuY2VsIiwiaGlkZSIsImtleUNvZGUiLCJ0YWJpbmRleCIsImJhY2tncm91bmQiLCIkbG9hZGluZyIsInBvc3RmaXgiLCJyYW5kb20iLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJuYXRpdmVFeGVjIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJyZTEiLCJyZTIiLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsIlBBVENIIiwicmVDb3B5Iiwic3RpY2t5IiwiY2hhcnNBZGRlZCIsInN0ckNvcHkiLCJtdWx0aWxpbmUiLCJpbnB1dCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJQT0xZRklMTCIsIk5BVElWRSIsInJldHVybk1ldGhvZCIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiQXR0cmlidXRlcyIsIlJFIiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwic2hhcmVkIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiSElEREVOIiwiU1lNQk9MIiwiVE9fUFJJTUlUSVZFIiwic2V0SW50ZXJuYWxTdGF0ZSIsIk9iamVjdFByb3RvdHlwZSIsIiRTeW1ib2wiLCIkc3RyaW5naWZ5IiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiUU9iamVjdCIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIndyYXAiLCJkZXNjcmlwdGlvbiIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRjcmVhdGUiLCJWIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmFtZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRk9SQ0VEX0pTT05fU1RSSU5HSUZZIiwic3BhY2UiLCIkcmVwbGFjZXIiLCJ2YWx1ZU9mIiwiY2VpbCIsIk5hdGl2ZVByb21pc2UiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJwcm9taXNlUmVzb2x2ZSIsIk5PTl9HRU5FUklDIiwicmVhbCIsIm9uRmluYWxseSIsImlzRnVuY3Rpb24iLCJpbmhlcml0SWZSZXF1aXJlZCIsIk5VTUJFUiIsIk5hdGl2ZU51bWJlciIsIk51bWJlclByb3RvdHlwZSIsIkJST0tFTl9DTEFTU09GIiwidGhpcmQiLCJyYWRpeCIsIm1heENvZGUiLCJkaWdpdHMiLCJjb2RlIiwiTmFOIiwiTnVtYmVyV3JhcHBlciIsImlnbm9yZUNhc2UiLCJkb3RBbGwiLCJ0aHJvd2VyIiwiQUNDRVNTT1JTIiwiYXJndW1lbnQwIiwiYXJndW1lbnQxIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsImZsdXNoIiwiaGVhZCIsInRvZ2dsZSIsInByb21pc2UiLCJtYWNyb3Rhc2siLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiSVNfTk9ERSIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwiZXhpdCIsInRhc2siLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwibmF0aXZlS2V5cyIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJzcGVjaWZpY0NyZWF0ZSIsImZpbmQiLCJmaW5kSW5kZXgiLCJQUkVGRVJSRURfU1RSSU5HIiwiU0hBUkVEIiwiZyIsIiRpbmRleE9mIiwibmF0aXZlSW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCIxIiwic2VhcmNoRWxlbWVudCIsIkVYSVNUUyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJ2YXJpYWJsZSIsIk5BU0hPUk5fQlVHIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwiQ09SUkVDVF9TRVRURVIiLCJUQUciLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJuYXRpdmVNZXRob2QiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJpbmdNZXRob2QiLCJyZWdleE1ldGhvZCIsIiRtYXAiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJjcmVhdGVQcm9wZXJ0eSIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsImFkZFRvVW5zY29wYWJsZXMiLCJkZWZpbmVJdGVyYXRvciIsIkFSUkFZX0lURVJBVE9SIiwiaXRlcmF0ZWQiLCJraW5kIiwiQXJndW1lbnRzIiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsInJlZGVmaW5lQWxsIiwic2V0U3BlY2llcyIsImFuSW5zdGFuY2UiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJtaWNyb3Rhc2siLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiUFJPTUlTRSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiJGZldGNoIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJVTkhBTkRMRURfUkVKRUNUSU9OIiwiUkVKRUNUSU9OX0hBTkRMRUQiLCJQRU5ESU5HIiwiRlVMRklMTEVEIiwiUkVKRUNURUQiLCJIQU5ETEVEIiwiVU5IQU5ETEVEIiwiR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIkZha2VQcm9taXNlIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwiY2hhaW4iLCJyZWFjdGlvbnMiLCJvayIsImV4aXRlZCIsInJlYWN0aW9uIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJJU19VTkhBTkRMRUQiLCJpc1VuaGFuZGxlZCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwid3JhcHBlciIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZmV0Y2giLCJjYXBhYmlsaXR5IiwiJHByb21pc2VSZXNvbHZlIiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidHJ5R2V0IiwiY2FsbGVlIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiXSwibWFwcGluZ3MiOiJvR0FBQSxJQUFJQSxFQUFrQixFQUFRLFFBRTFCQyxFQUFnQkQsRUFBZ0IsZUFDaENFLEVBQU8sR0FFWEEsRUFBS0QsR0FBaUIsSUFFdEJFLEVBQU9DLFFBQTJCLGVBQWpCQyxPQUFPSCxJLHVCQ1B4QixJQUFJSSxFQUFZLEVBQVEsUUFHeEJILEVBQU9DLFFBQVUsU0FBVUcsRUFBSUMsRUFBTUMsR0FFbkMsR0FEQUgsRUFBVUMsUUFDR0csSUFBVEYsRUFBb0IsT0FBT0QsRUFDL0IsT0FBUUUsR0FDTixLQUFLLEVBQUcsT0FBTyxXQUNiLE9BQU9GLEVBQUdJLEtBQUtILElBRWpCLEtBQUssRUFBRyxPQUFPLFNBQVVJLEdBQ3ZCLE9BQU9MLEVBQUdJLEtBQUtILEVBQU1JLElBRXZCLEtBQUssRUFBRyxPQUFPLFNBQVVBLEVBQUdDLEdBQzFCLE9BQU9OLEVBQUdJLEtBQUtILEVBQU1JLEVBQUdDLElBRTFCLEtBQUssRUFBRyxPQUFPLFNBQVVELEVBQUdDLEVBQUdDLEdBQzdCLE9BQU9QLEVBQUdJLEtBQUtILEVBQU1JLEVBQUdDLEVBQUdDLElBRy9CLE9BQU8sV0FDTCxPQUFPUCxFQUFHUSxNQUFNUCxFQUFNUSxjLHVCQ3JCMUIsSUFBSUMsRUFBa0IsRUFBUSxRQUMxQkMsRUFBNEIsRUFBUSxRQUE4Q0MsRUFFbEZDLEVBQVcsR0FBR0EsU0FFZEMsRUFBK0IsaUJBQVZDLFFBQXNCQSxRQUFVQyxPQUFPQyxvQkFDNURELE9BQU9DLG9CQUFvQkYsUUFBVSxHQUVyQ0csRUFBaUIsU0FBVUMsR0FDN0IsSUFDRSxPQUFPUixFQUEwQlEsR0FDakMsTUFBT0MsR0FDUCxPQUFPTixFQUFZTyxVQUt2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QUFTLEVBQVEsUUFFckIvQyxFQUFPQyxRQUFVOEMsRUFBTzRhIiwiZmlsZSI6ImFzc2V0cy9qcy9jaHVuay12ZW5kb3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL2NsYXNzb2YtcmF3Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZm9yRWFjaCcpO1xudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICghU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEgpID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSA6IFtdLmZvckVhY2g7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCAnICsgKG5hbWUgPyBuYW1lICsgJyAnIDogJycpICsgJ2ludm9jYXRpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxudmFyIGl0ZXJhdGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZm4sIHRoYXQsIEFTX0VOVFJJRVMsIElTX0lURVJBVE9SKSB7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChmbiwgdGhhdCwgQVNfRU5UUklFUyA/IDIgOiAxKTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IEFTX0VOVFJJRVNcbiAgICAgICAgICA/IGJvdW5kRnVuY3Rpb24oYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pXG4gICAgICAgICAgOiBib3VuZEZ1bmN0aW9uKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpO1xuICB9XG5cbiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgcmVzdWx0ID0gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgYm91bmRGdW5jdGlvbiwgc3RlcC52YWx1ZSwgQVNfRU5UUklFUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuXG5pdGVyYXRlLnN0b3AgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIHJlc3VsdCk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTFcbiAqIChjKSAyMDE0LTIwMTkgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gKFxuICAgIGlzRGVmKHZhbCkgJiZcbiAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nXG4gIClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgKGlzUGxhaW5PYmplY3QodmFsKSAmJiB2YWwudG9TdHJpbmcgPT09IF90b1N0cmluZylcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZVxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gcG9seWZpbGxCaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4gID8gbmF0aXZlQmluZFxuICA6IHBvbHlmaWxsQmluZDtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXG4gKiB3aXRoIC4uLnJlc3QgKGh0dHBzOi8vZmxvdy5vcmcvYmxvZy8yMDE3LzA1LzA3L1N0cmljdC1GdW5jdGlvbi1DYWxsLUFyaXR5LykuXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmJCQxLCB1cGRhdGU6IGRlZiQkMSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2huaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgdGltZXJGdW5jKCk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzLiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJiAhKGtleSBpbiB0YXJnZXQuJGRhdGEpKTtcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc2xvdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgIHJlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHJlc1swXS5pc0NvbW1lbnQpIC8vICM5NjU4XG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGlmIChoYXNTeW1ib2wgJiYgdmFsW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHJldCA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdmFsW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzT2JqZWN0KGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgbm9kZXMgPSBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XG4gICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xuICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiVGhlIC5uYXRpdmUgbW9kaWZpZXIgZm9yIHYtb24gaXMgb25seSB2YWxpZCBvbiBjb21wb25lbnRzIGJ1dCBpdCB3YXMgdXNlZCBvbiA8XCIgKyB0YWcgKyBcIj4uXCIpLFxuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKCFkYXRhIHx8ICFkYXRhLnByZSkgJiYgaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2UgaWYgKGlzRGVmKHZub2RlKSkge1xuICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7IHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgZm9yY2UgPSB0cnVlO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoXG4gICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWYgIzUzMThcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4vLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2Rlc1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1c2UgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICAgIC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpICYmIHZub2RlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvclxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgdmFyIG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChvd25lciAmJiAhaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgdmFyIG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTtcbiAgICB2YXIgc3luYyA9IHRydWU7XG4gICAgdmFyIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgdmFyIHRpbWVyVGltZW91dCA9IG51bGxcblxuICAgIDsob3duZXIpLiRvbignaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUob3duZXJzLCBvd25lcik7IH0pO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIChvd25lcnNbaV0pLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZyk7XG4gICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyVGltZW91dCk7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgICAgICAgICAgICAgPyAoXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjYnNbaV0sIHZtLCBhcmdzLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHtcbiAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG4gICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCAoXG4gIHZtLFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgdm0uJGVsID0gZWw7XG4gIGlmICghdm0uJG9wdGlvbnMucmVuZGVyKSB7XG4gICAgdm0uJG9wdGlvbnMucmVuZGVyID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB8fFxuICAgICAgICB2bS4kb3B0aW9ucy5lbCB8fCBlbCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAnY29tcGlsZXIgaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgdmFyIHVwZGF0ZUNvbXBvbmVudDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5hbWUgPSB2bS5fbmFtZTtcbiAgICAgIHZhciBpZCA9IHZtLl91aWQ7XG4gICAgICB2YXIgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgaWQ7XG4gICAgICB2YXIgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyBpZDtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2YXIgdm5vZGUgPSB2bS5fcmVuZGVyKCk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiByZW5kZXJcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiBwYXRjaFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gd2Ugc2V0IHRoaXMgdG8gdm0uX3dhdGNoZXIgaW5zaWRlIHRoZSB3YXRjaGVyJ3MgY29uc3RydWN0b3JcbiAgLy8gc2luY2UgdGhlIHdhdGNoZXIncyBpbml0aWFsIHBhdGNoIG1heSBjYWxsICRmb3JjZVVwZGF0ZSAoZS5nLiBpbnNpZGUgY2hpbGRcbiAgLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZFxuICBuZXcgV2F0Y2hlcih2bSwgdXBkYXRlQ29tcG9uZW50LCBub29wLCB7XG4gICAgYmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUgKCkge1xuICAgICAgaWYgKHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgdHJ1ZSAvKiBpc1JlbmRlcldhdGNoZXIgKi8pO1xuICBoeWRyYXRpbmcgPSBmYWxzZTtcblxuICAvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZlxuICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICB2bS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgfVxuICByZXR1cm4gdm1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQgKFxuICB2bSxcbiAgcHJvcHNEYXRhLFxuICBsaXN0ZW5lcnMsXG4gIHBhcmVudFZub2RlLFxuICByZW5kZXJDaGlsZHJlblxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbi5cblxuICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgZHluYW1pYyBzY29wZWRTbG90cyAoaGFuZC13cml0dGVuIG9yIGNvbXBpbGVkIGJ1dCB3aXRoXG4gIC8vIGR5bmFtaWMgc2xvdCBuYW1lcykuIFN0YXRpYyBzY29wZWQgc2xvdHMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBoYXMgdGhlXG4gIC8vIFwiJHN0YWJsZVwiIG1hcmtlci5cbiAgdmFyIG5ld1Njb3BlZFNsb3RzID0gcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cztcbiAgdmFyIG9sZFNjb3BlZFNsb3RzID0gdm0uJHNjb3BlZFNsb3RzO1xuICB2YXIgaGFzRHluYW1pY1Njb3BlZFNsb3QgPSAhIShcbiAgICAobmV3U2NvcGVkU2xvdHMgJiYgIW5ld1Njb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG9sZFNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAmJiAhb2xkU2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAobmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkgIT09IG5ld1Njb3BlZFNsb3RzLiRrZXkpXG4gICk7XG5cbiAgLy8gQW55IHN0YXRpYyBzbG90IGNoaWxkcmVuIGZyb20gdGhlIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGR1cmluZyBwYXJlbnQnc1xuICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBoYXNEeW5hbWljU2NvcGVkU2xvdFxuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgdGhpcy5iZWZvcmUgPSBvcHRpb25zLmJlZm9yZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZtID0gdGhpcy52bTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcG9wVGFyZ2V0KCk7XG4gICAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdGhpcy5kZXBzW2ldLmRlcGVuZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSBzZWxmIGZyb20gYWxsIGRlcGVuZGVuY2llcycgc3Vic2NyaWJlciBsaXN0LlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uID0ge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogbm9vcCxcbiAgc2V0OiBub29wXG59O1xuXG5mdW5jdGlvbiBwcm94eSAodGFyZ2V0LCBzb3VyY2VLZXksIGtleSkge1xuICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gZnVuY3Rpb24gcHJveHlHZXR0ZXIgKCkge1xuICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XVxuICB9O1xuICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gcHJveHlTZXR0ZXIgKHZhbCkge1xuICAgIHRoaXNbc291cmNlS2V5XVtrZXldID0gdmFsO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGluaXRTdGF0ZSAodm0pIHtcbiAgdm0uX3dhdGNoZXJzID0gW107XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnM7XG4gIGlmIChvcHRzLnByb3BzKSB7IGluaXRQcm9wcyh2bSwgb3B0cy5wcm9wcyk7IH1cbiAgaWYgKG9wdHMubWV0aG9kcykgeyBpbml0TWV0aG9kcyh2bSwgb3B0cy5tZXRob2RzKTsgfVxuICBpZiAob3B0cy5kYXRhKSB7XG4gICAgaW5pdERhdGEodm0pO1xuICB9IGVsc2Uge1xuICAgIG9ic2VydmUodm0uX2RhdGEgPSB7fSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgfVxuICBpZiAob3B0cy5jb21wdXRlZCkgeyBpbml0Q29tcHV0ZWQodm0sIG9wdHMuY29tcHV0ZWQpOyB9XG4gIGlmIChvcHRzLndhdGNoICYmIG9wdHMud2F0Y2ggIT09IG5hdGl2ZVdhdGNoKSB7XG4gICAgaW5pdFdhdGNoKHZtLCBvcHRzLndhdGNoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMgKHZtLCBwcm9wc09wdGlvbnMpIHtcbiAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm0uX3Byb3BzID0ge307XG4gIC8vIGNhY2hlIHByb3Aga2V5cyBzbyB0aGF0IGZ1dHVyZSBwcm9wcyB1cGRhdGVzIGNhbiBpdGVyYXRlIHVzaW5nIEFycmF5XG4gIC8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLlxuICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG4gIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICBpZiAoIWlzUm9vdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gIH1cbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wc09wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGh5cGhlbmF0ZWRLZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIC8vIHN0YXRpYyBwcm9wcyBhcmUgYWxyZWFkeSBwcm94aWVkIG9uIHRoZSBjb21wb25lbnQncyBwcm90b3R5cGVcbiAgICAvLyBkdXJpbmcgVnVlLmV4dGVuZCgpLiBXZSBvbmx5IG5lZWQgdG8gcHJveHkgcHJvcHMgZGVmaW5lZCBhdFxuICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBwcm94eSh2bSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzT3B0aW9ucykgbG9vcCgga2V5ICk7XG4gIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEgKHZtKSB7XG4gIHZhciBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbidcbiAgICA/IGdldERhdGEoZGF0YSwgdm0pXG4gICAgOiBkYXRhIHx8IHt9O1xuICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICBkYXRhID0ge307XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgdmFyIG1ldGhvZHMgPSB2bS4kb3B0aW9ucy5tZXRob2RzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChtZXRob2RzICYmIGhhc093bihtZXRob2RzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBkYXRhIHByb3BlcnR5LlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgfVxuICB9XG4gIC8vIG9ic2VydmUgZGF0YVxuICBvYnNlcnZlKGRhdGEsIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG59XG5cbmZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBkYXRhIGdldHRlcnNcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIHJldHVybiBkYXRhLmNhbGwodm0sIHZtKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgIHJldHVybiB7fVxuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbnZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXG4gIHZhciBpc1NTUiA9IGlzU2VydmVyUmVuZGVyaW5nKCk7XG5cbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIi5cIiksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YS5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMucHJvcHMgJiYga2V5IGluIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpXG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gcGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO1xuICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztcblxuICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICBvcHRzLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgaWYgKEN0b3Iuc3VwZXIpIHtcbiAgICB2YXIgc3VwZXJPcHRpb25zID0gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yLnN1cGVyKTtcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7XG4gICAgICAvLyB1cGRhdGUgYmFzZSBleHRlbmQgb3B0aW9uc1xuICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xuICAgICAgICBleHRlbmQoQ3Rvci5leHRlbmRPcHRpb25zLCBtb2RpZmllZE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3RvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgbW9kaWZpZWQ7XG4gIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChrZWVwQWxpdmVJbnN0YW5jZSwgZmlsdGVyKSB7XG4gIHZhciBjYWNoZSA9IGtlZXBBbGl2ZUluc3RhbmNlLmNhY2hlO1xuICB2YXIga2V5cyA9IGtlZXBBbGl2ZUluc3RhbmNlLmtleXM7XG4gIHZhciBfdm5vZGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5fdm5vZGU7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICBpZiAoY2FjaGVkTm9kZSkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNhY2hlZE5vZGUuY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKFxuICBjYWNoZSxcbiAga2V5LFxuICBrZXlzLFxuICBjdXJyZW50XG4pIHtcbiAgdmFyIGNhY2hlZCQkMSA9IGNhY2hlW2tleV07XG4gIGlmIChjYWNoZWQkJDEgJiYgKCFjdXJyZW50IHx8IGNhY2hlZCQkMS50YWcgIT09IGN1cnJlbnQudGFnKSkge1xuICAgIGNhY2hlZCQkMS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICB9XG4gIGNhY2hlW2tleV0gPSBudWxsO1xuICByZW1vdmUoa2V5cywga2V5KTtcbn1cblxudmFyIHBhdHRlcm5UeXBlcyA9IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldO1xuXG52YXIgS2VlcEFsaXZlID0ge1xuICBuYW1lOiAna2VlcC1hbGl2ZScsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHByb3BzOiB7XG4gICAgaW5jbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIGV4Y2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gICAgdGhpcy4kd2F0Y2goJ2V4Y2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgc2xvdCA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgdmFyIGluY2x1ZGUgPSByZWYuaW5jbHVkZTtcbiAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAvLyBleGNsdWRlZFxuICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG5cbiAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYkMS5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmJDEua2V5cztcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgLy8gbWFrZSBjdXJyZW50IGtleSBmcmVzaGVzdFxuICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSlcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIC8vIDIuNiBleHBsaWNpdCBvYnNlcnZhYmxlIEFQSVxuICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYnNlcnZlKG9iaik7XG4gICAgcmV0dXJuIG9ialxuICB9O1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7XG4gIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFxufSk7XG5cblZ1ZS52ZXJzaW9uID0gJzIuNi4xMSc7XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbnZhciBjb252ZXJ0RW51bWVyYXRlZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnXG4gICAgPyAnZmFsc2UnXG4gICAgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlXG4gICAgOiBrZXkgPT09ICdjb250ZW50ZWRpdGFibGUnICYmIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogJ3RydWUnXG59O1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJlxuICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG5mdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpO1xuICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlJCQxXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEgKHZub2RlLCBpblZQcmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIWluVlByZSAmJlxuICAgICAgIXZub2RlLm5zICYmXG4gICAgICAhKFxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xuICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpXG4gICAgICAgICAgICA/IGlnbm9yZS50ZXN0KHZub2RlLnRhZylcbiAgICAgICAgICAgIDogaWdub3JlID09PSB2bm9kZS50YWdcbiAgICAgICAgfSlcbiAgICAgICkgJiZcbiAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZylcbiAgICApXG4gIH1cblxuICB2YXIgY3JlYXRpbmdFbG1JblZQcmUgPSAwO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAoXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG0sXG4gICAgbmVzdGVkLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXhcbiAgKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIFRoaXMgdm5vZGUgd2FzIHVzZWQgaW4gYSBwcmV2aW91cyByZW5kZXIhXG4gICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2VcbiAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb25cbiAgICAgIC8vIHJlZmVyZW5jZSBub2RlLiBJbnN0ZWFkLCB3ZSBjbG9uZSB0aGUgbm9kZSBvbi1kZW1hbmQgYmVmb3JlIGNyZWF0aW5nXG4gICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC5cbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkgJiYgaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSkge1xuICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2Rlcyhbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNhcnJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiYgIWZhaWxzKHBvc3QpKSB7XG4gICAgZGVmZXIgPSBwb3N0O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCIvKipcbiAqIHZ1ZXggdjMuMS4zXG4gKiAoYykgMjAyMCBFdmFuIFlvdVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TWl4aW4gKFZ1ZSkge1xuICB2YXIgdmVyc2lvbiA9IE51bWJlcihWdWUudmVyc2lvbi5zcGxpdCgnLicpWzBdKTtcblxuICBpZiAodmVyc2lvbiA+PSAyKSB7XG4gICAgVnVlLm1peGluKHsgYmVmb3JlQ3JlYXRlOiB2dWV4SW5pdCB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBvdmVycmlkZSBpbml0IGFuZCBpbmplY3QgdnVleCBpbml0IHByb2NlZHVyZVxuICAgIC8vIGZvciAxLnggYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgdmFyIF9pbml0ID0gVnVlLnByb3RvdHlwZS5faW5pdDtcbiAgICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBvcHRpb25zLmluaXQgPSBvcHRpb25zLmluaXRcbiAgICAgICAgPyBbdnVleEluaXRdLmNvbmNhdChvcHRpb25zLmluaXQpXG4gICAgICAgIDogdnVleEluaXQ7XG4gICAgICBfaW5pdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVnVleCBpbml0IGhvb2ssIGluamVjdGVkIGludG8gZWFjaCBpbnN0YW5jZXMgaW5pdCBob29rcyBsaXN0LlxuICAgKi9cblxuICBmdW5jdGlvbiB2dWV4SW5pdCAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAgIC8vIHN0b3JlIGluamVjdGlvblxuICAgIGlmIChvcHRpb25zLnN0b3JlKSB7XG4gICAgICB0aGlzLiRzdG9yZSA9IHR5cGVvZiBvcHRpb25zLnN0b3JlID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gb3B0aW9ucy5zdG9yZSgpXG4gICAgICAgIDogb3B0aW9ucy5zdG9yZTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LiRzdG9yZSkge1xuICAgICAgdGhpcy4kc3RvcmUgPSBvcHRpb25zLnBhcmVudC4kc3RvcmU7XG4gICAgfVxuICB9XG59XG5cbnZhciB0YXJnZXQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICA/IHdpbmRvd1xuICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHt9O1xudmFyIGRldnRvb2xIb29rID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbmZ1bmN0aW9uIGRldnRvb2xQbHVnaW4gKHN0b3JlKSB7XG4gIGlmICghZGV2dG9vbEhvb2spIHsgcmV0dXJuIH1cblxuICBzdG9yZS5fZGV2dG9vbEhvb2sgPSBkZXZ0b29sSG9vaztcblxuICBkZXZ0b29sSG9vay5lbWl0KCd2dWV4OmluaXQnLCBzdG9yZSk7XG5cbiAgZGV2dG9vbEhvb2sub24oJ3Z1ZXg6dHJhdmVsLXRvLXN0YXRlJywgZnVuY3Rpb24gKHRhcmdldFN0YXRlKSB7XG4gICAgc3RvcmUucmVwbGFjZVN0YXRlKHRhcmdldFN0YXRlKTtcbiAgfSk7XG5cbiAgc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGUpIHtcbiAgICBkZXZ0b29sSG9vay5lbWl0KCd2dWV4Om11dGF0aW9uJywgbXV0YXRpb24sIHN0YXRlKTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBmaXJzdCBpdGVtIHRoYXQgcGFzcyB0aGUgdGVzdFxuICogYnkgc2Vjb25kIGFyZ3VtZW50IGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbGlzdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZlxuICogQHJldHVybiB7Kn1cbiAqL1xuXG4vKipcbiAqIGZvckVhY2ggZm9yIG9iamVjdFxuICovXG5mdW5jdGlvbiBmb3JFYWNoVmFsdWUgKG9iaiwgZm4pIHtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKG9ialtrZXldLCBrZXkpOyB9KTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiB2YWwgJiYgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nXG59XG5cbmZ1bmN0aW9uIGFzc2VydCAoY29uZGl0aW9uLCBtc2cpIHtcbiAgaWYgKCFjb25kaXRpb24pIHsgdGhyb3cgbmV3IEVycm9yKChcIlt2dWV4XSBcIiArIG1zZykpIH1cbn1cblxuZnVuY3Rpb24gcGFydGlhbCAoZm4sIGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmbihhcmcpXG4gIH1cbn1cblxuLy8gQmFzZSBkYXRhIHN0cnVjdCBmb3Igc3RvcmUncyBtb2R1bGUsIHBhY2thZ2Ugd2l0aCBzb21lIGF0dHJpYnV0ZSBhbmQgbWV0aG9kXG52YXIgTW9kdWxlID0gZnVuY3Rpb24gTW9kdWxlIChyYXdNb2R1bGUsIHJ1bnRpbWUpIHtcbiAgdGhpcy5ydW50aW1lID0gcnVudGltZTtcbiAgLy8gU3RvcmUgc29tZSBjaGlsZHJlbiBpdGVtXG4gIHRoaXMuX2NoaWxkcmVuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUgb2JqZWN0IHdoaWNoIHBhc3NlZCBieSBwcm9ncmFtbWVyXG4gIHRoaXMuX3Jhd01vZHVsZSA9IHJhd01vZHVsZTtcbiAgdmFyIHJhd1N0YXRlID0gcmF3TW9kdWxlLnN0YXRlO1xuXG4gIC8vIFN0b3JlIHRoZSBvcmlnaW4gbW9kdWxlJ3Mgc3RhdGVcbiAgdGhpcy5zdGF0ZSA9ICh0eXBlb2YgcmF3U3RhdGUgPT09ICdmdW5jdGlvbicgPyByYXdTdGF0ZSgpIDogcmF3U3RhdGUpIHx8IHt9O1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgbmFtZXNwYWNlZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMubmFtZXNwYWNlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIXRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmFkZENoaWxkID0gZnVuY3Rpb24gYWRkQ2hpbGQgKGtleSwgbW9kdWxlKSB7XG4gIHRoaXMuX2NoaWxkcmVuW2tleV0gPSBtb2R1bGU7XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKGtleSkge1xuICBkZWxldGUgdGhpcy5fY2hpbGRyZW5ba2V5XTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbiBnZXRDaGlsZCAoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9jaGlsZHJlbltrZXldXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAocmF3TW9kdWxlKSB7XG4gIHRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkID0gcmF3TW9kdWxlLm5hbWVzcGFjZWQ7XG4gIGlmIChyYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zID0gcmF3TW9kdWxlLmFjdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zID0gcmF3TW9kdWxlLm11dGF0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLmdldHRlcnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycyA9IHJhd01vZHVsZS5nZXR0ZXJzO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hDaGlsZCA9IGZ1bmN0aW9uIGZvckVhY2hDaGlsZCAoZm4pIHtcbiAgZm9yRWFjaFZhbHVlKHRoaXMuX2NoaWxkcmVuLCBmbik7XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hHZXR0ZXIgPSBmdW5jdGlvbiBmb3JFYWNoR2V0dGVyIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmdldHRlcnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmdldHRlcnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQWN0aW9uID0gZnVuY3Rpb24gZm9yRWFjaEFjdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaE11dGF0aW9uID0gZnVuY3Rpb24gZm9yRWFjaE11dGF0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zLCBmbik7XG4gIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBNb2R1bGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIE1vZHVsZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiBNb2R1bGVDb2xsZWN0aW9uIChyYXdSb290TW9kdWxlKSB7XG4gIC8vIHJlZ2lzdGVyIHJvb3QgbW9kdWxlIChWdWV4LlN0b3JlIG9wdGlvbnMpXG4gIHRoaXMucmVnaXN0ZXIoW10sIHJhd1Jvb3RNb2R1bGUsIGZhbHNlKTtcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAocGF0aCkge1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKG1vZHVsZSwga2V5KSB7XG4gICAgcmV0dXJuIG1vZHVsZS5nZXRDaGlsZChrZXkpXG4gIH0sIHRoaXMucm9vdClcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldE5hbWVzcGFjZSA9IGZ1bmN0aW9uIGdldE5hbWVzcGFjZSAocGF0aCkge1xuICB2YXIgbW9kdWxlID0gdGhpcy5yb290O1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwga2V5KSB7XG4gICAgbW9kdWxlID0gbW9kdWxlLmdldENoaWxkKGtleSk7XG4gICAgcmV0dXJuIG5hbWVzcGFjZSArIChtb2R1bGUubmFtZXNwYWNlZCA/IGtleSArICcvJyA6ICcnKVxuICB9LCAnJylcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSQxIChyYXdSb290TW9kdWxlKSB7XG4gIHVwZGF0ZShbXSwgdGhpcy5yb290LCByYXdSb290TW9kdWxlKTtcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIgKHBhdGgsIHJhd01vZHVsZSwgcnVudGltZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgIGlmICggcnVudGltZSA9PT0gdm9pZCAwICkgcnVudGltZSA9IHRydWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRSYXdNb2R1bGUocGF0aCwgcmF3TW9kdWxlKTtcbiAgfVxuXG4gIHZhciBuZXdNb2R1bGUgPSBuZXcgTW9kdWxlKHJhd01vZHVsZSwgcnVudGltZSk7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHRoaXMucm9vdCA9IG5ld01vZHVsZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIHBhcmVudC5hZGRDaGlsZChwYXRoW3BhdGgubGVuZ3RoIC0gMV0sIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyByZWdpc3RlciBuZXN0ZWQgbW9kdWxlc1xuICBpZiAocmF3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlLm1vZHVsZXMsIGZ1bmN0aW9uIChyYXdDaGlsZE1vZHVsZSwga2V5KSB7XG4gICAgICB0aGlzJDEucmVnaXN0ZXIocGF0aC5jb25jYXQoa2V5KSwgcmF3Q2hpbGRNb2R1bGUsIHJ1bnRpbWUpO1xuICAgIH0pO1xuICB9XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51bnJlZ2lzdGVyID0gZnVuY3Rpb24gdW5yZWdpc3RlciAocGF0aCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICB2YXIga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICBpZiAoIXBhcmVudC5nZXRDaGlsZChrZXkpLnJ1bnRpbWUpIHsgcmV0dXJuIH1cblxuICBwYXJlbnQucmVtb3ZlQ2hpbGQoa2V5KTtcbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZSAocGF0aCwgdGFyZ2V0TW9kdWxlLCBuZXdNb2R1bGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRSYXdNb2R1bGUocGF0aCwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSB0YXJnZXQgbW9kdWxlXG4gIHRhcmdldE1vZHVsZS51cGRhdGUobmV3TW9kdWxlKTtcblxuICAvLyB1cGRhdGUgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKG5ld01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG5ld01vZHVsZS5tb2R1bGVzKSB7XG4gICAgICBpZiAoIXRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJbdnVleF0gdHJ5aW5nIHRvIGFkZCBhIG5ldyBtb2R1bGUgJ1wiICsga2V5ICsgXCInIG9uIGhvdCByZWxvYWRpbmcsIFwiICtcbiAgICAgICAgICAgICdtYW51YWwgcmVsb2FkIGlzIG5lZWRlZCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKFxuICAgICAgICBwYXRoLmNvbmNhdChrZXkpLFxuICAgICAgICB0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSxcbiAgICAgICAgbmV3TW9kdWxlLm1vZHVsZXNba2V5XVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGZ1bmN0aW9uQXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uJ1xufTtcblxudmFyIG9iamVjdEFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5oYW5kbGVyID09PSAnZnVuY3Rpb24nKTsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbiBvciBvYmplY3Qgd2l0aCBcImhhbmRsZXJcIiBmdW5jdGlvbidcbn07XG5cbnZhciBhc3NlcnRUeXBlcyA9IHtcbiAgZ2V0dGVyczogZnVuY3Rpb25Bc3NlcnQsXG4gIG11dGF0aW9uczogZnVuY3Rpb25Bc3NlcnQsXG4gIGFjdGlvbnM6IG9iamVjdEFzc2VydFxufTtcblxuZnVuY3Rpb24gYXNzZXJ0UmF3TW9kdWxlIChwYXRoLCByYXdNb2R1bGUpIHtcbiAgT2JqZWN0LmtleXMoYXNzZXJ0VHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghcmF3TW9kdWxlW2tleV0pIHsgcmV0dXJuIH1cblxuICAgIHZhciBhc3NlcnRPcHRpb25zID0gYXNzZXJ0VHlwZXNba2V5XTtcblxuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGVba2V5XSwgZnVuY3Rpb24gKHZhbHVlLCB0eXBlKSB7XG4gICAgICBhc3NlcnQoXG4gICAgICAgIGFzc2VydE9wdGlvbnMuYXNzZXJ0KHZhbHVlKSxcbiAgICAgICAgbWFrZUFzc2VydGlvbk1lc3NhZ2UocGF0aCwga2V5LCB0eXBlLCB2YWx1ZSwgYXNzZXJ0T3B0aW9ucy5leHBlY3RlZClcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWtlQXNzZXJ0aW9uTWVzc2FnZSAocGF0aCwga2V5LCB0eXBlLCB2YWx1ZSwgZXhwZWN0ZWQpIHtcbiAgdmFyIGJ1ZiA9IGtleSArIFwiIHNob3VsZCBiZSBcIiArIGV4cGVjdGVkICsgXCIgYnV0IFxcXCJcIiArIGtleSArIFwiLlwiICsgdHlwZSArIFwiXFxcIlwiO1xuICBpZiAocGF0aC5sZW5ndGggPiAwKSB7XG4gICAgYnVmICs9IFwiIGluIG1vZHVsZSBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCI7XG4gIH1cbiAgYnVmICs9IFwiIGlzIFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbHVlKSkgKyBcIi5cIjtcbiAgcmV0dXJuIGJ1ZlxufVxuXG52YXIgVnVlOyAvLyBiaW5kIG9uIGluc3RhbGxcblxudmFyIFN0b3JlID0gZnVuY3Rpb24gU3RvcmUgKG9wdGlvbnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEF1dG8gaW5zdGFsbCBpZiBpdCBpcyBub3QgZG9uZSB5ZXQgYW5kIGB3aW5kb3dgIGhhcyBgVnVlYC5cbiAgLy8gVG8gYWxsb3cgdXNlcnMgdG8gYXZvaWQgYXV0by1pbnN0YWxsYXRpb24gaW4gc29tZSBjYXNlcyxcbiAgLy8gdGhpcyBjb2RlIHNob3VsZCBiZSBwbGFjZWQgaGVyZS4gU2VlICM3MzFcbiAgaWYgKCFWdWUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSkge1xuICAgIGluc3RhbGwod2luZG93LlZ1ZSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChWdWUsIFwibXVzdCBjYWxsIFZ1ZS51c2UoVnVleCkgYmVmb3JlIGNyZWF0aW5nIGEgc3RvcmUgaW5zdGFuY2UuXCIpO1xuICAgIGFzc2VydCh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcsIFwidnVleCByZXF1aXJlcyBhIFByb21pc2UgcG9seWZpbGwgaW4gdGhpcyBicm93c2VyLlwiKTtcbiAgICBhc3NlcnQodGhpcyBpbnN0YW5jZW9mIFN0b3JlLCBcInN0b3JlIG11c3QgYmUgY2FsbGVkIHdpdGggdGhlIG5ldyBvcGVyYXRvci5cIik7XG4gIH1cblxuICB2YXIgcGx1Z2lucyA9IG9wdGlvbnMucGx1Z2luczsgaWYgKCBwbHVnaW5zID09PSB2b2lkIDAgKSBwbHVnaW5zID0gW107XG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDsgaWYgKCBzdHJpY3QgPT09IHZvaWQgMCApIHN0cmljdCA9IGZhbHNlO1xuXG4gIC8vIHN0b3JlIGludGVybmFsIHN0YXRlXG4gIHRoaXMuX2NvbW1pdHRpbmcgPSBmYWxzZTtcbiAgdGhpcy5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fbW9kdWxlcyA9IG5ldyBNb2R1bGVDb2xsZWN0aW9uKG9wdGlvbnMpO1xuICB0aGlzLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fd2F0Y2hlclZNID0gbmV3IFZ1ZSgpO1xuICB0aGlzLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vIGJpbmQgY29tbWl0IGFuZCBkaXNwYXRjaCB0byBzZWxmXG4gIHZhciBzdG9yZSA9IHRoaXM7XG4gIHZhciByZWYgPSB0aGlzO1xuICB2YXIgZGlzcGF0Y2ggPSByZWYuZGlzcGF0Y2g7XG4gIHZhciBjb21taXQgPSByZWYuY29tbWl0O1xuICB0aGlzLmRpc3BhdGNoID0gZnVuY3Rpb24gYm91bmREaXNwYXRjaCAodHlwZSwgcGF5bG9hZCkge1xuICAgIHJldHVybiBkaXNwYXRjaC5jYWxsKHN0b3JlLCB0eXBlLCBwYXlsb2FkKVxuICB9O1xuICB0aGlzLmNvbW1pdCA9IGZ1bmN0aW9uIGJvdW5kQ29tbWl0ICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbW1pdC5jYWxsKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBvcHRpb25zKVxuICB9O1xuXG4gIC8vIHN0cmljdCBtb2RlXG4gIHRoaXMuc3RyaWN0ID0gc3RyaWN0O1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX21vZHVsZXMucm9vdC5zdGF0ZTtcblxuICAvLyBpbml0IHJvb3QgbW9kdWxlLlxuICAvLyB0aGlzIGFsc28gcmVjdXJzaXZlbHkgcmVnaXN0ZXJzIGFsbCBzdWItbW9kdWxlc1xuICAvLyBhbmQgY29sbGVjdHMgYWxsIG1vZHVsZSBnZXR0ZXJzIGluc2lkZSB0aGlzLl93cmFwcGVkR2V0dGVyc1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHN0YXRlLCBbXSwgdGhpcy5fbW9kdWxlcy5yb290KTtcblxuICAvLyBpbml0aWFsaXplIHRoZSBzdG9yZSB2bSwgd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHRoZSByZWFjdGl2aXR5XG4gIC8vIChhbHNvIHJlZ2lzdGVycyBfd3JhcHBlZEdldHRlcnMgYXMgY29tcHV0ZWQgcHJvcGVydGllcylcbiAgcmVzZXRTdG9yZVZNKHRoaXMsIHN0YXRlKTtcblxuICAvLyBhcHBseSBwbHVnaW5zXG4gIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7IHJldHVybiBwbHVnaW4odGhpcyQxKTsgfSk7XG5cbiAgdmFyIHVzZURldnRvb2xzID0gb3B0aW9ucy5kZXZ0b29scyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXZ0b29scyA6IFZ1ZS5jb25maWcuZGV2dG9vbHM7XG4gIGlmICh1c2VEZXZ0b29scykge1xuICAgIGRldnRvb2xQbHVnaW4odGhpcyk7XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgc3RhdGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEuc3RhdGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fdm0uX2RhdGEuJCRzdGF0ZVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEuc3RhdGUuc2V0ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoZmFsc2UsIFwidXNlIHN0b3JlLnJlcGxhY2VTdGF0ZSgpIHRvIGV4cGxpY2l0IHJlcGxhY2Ugc3RvcmUgc3RhdGUuXCIpO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gY29tbWl0IChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGNvbW1pdFxuICB2YXIgcmVmID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgIHZhciBwYXlsb2FkID0gcmVmLnBheWxvYWQ7XG4gICAgdmFyIG9wdGlvbnMgPSByZWYub3B0aW9ucztcblxuICB2YXIgbXV0YXRpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fbXV0YXRpb25zW3R5cGVdO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIGVudHJ5LmZvckVhY2goZnVuY3Rpb24gY29tbWl0SXRlcmF0b3IgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMuX3N1YnNjcmliZXJzXG4gICAgLnNsaWNlKCkgLy8gc2hhbGxvdyBjb3B5IHRvIHByZXZlbnQgaXRlcmF0b3IgaW52YWxpZGF0aW9uIGlmIHN1YnNjcmliZXIgc3luY2hyb25vdXNseSBjYWxscyB1bnN1YnNjcmliZVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1YihtdXRhdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG5cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBvcHRpb25zICYmIG9wdGlvbnMuc2lsZW50XG4gICkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwiW3Z1ZXhdIG11dGF0aW9uIHR5cGU6IFwiICsgdHlwZSArIFwiLiBTaWxlbnQgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIFwiICtcbiAgICAgICdVc2UgdGhlIGZpbHRlciBmdW5jdGlvbmFsaXR5IGluIHRoZSB2dWUtZGV2dG9vbHMnXG4gICAgKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2ggKF90eXBlLCBfcGF5bG9hZCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBkaXNwYXRjaFxuICB2YXIgcmVmID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcblxuICB2YXIgYWN0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX2FjdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBhY3Rpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgdHJ5IHtcbiAgICB0aGlzLl9hY3Rpb25TdWJzY3JpYmVyc1xuICAgICAgLnNsaWNlKCkgLy8gc2hhbGxvdyBjb3B5IHRvIHByZXZlbnQgaXRlcmF0b3IgaW52YWxpZGF0aW9uIGlmIHN1YnNjcmliZXIgc3luY2hyb25vdXNseSBjYWxscyB1bnN1YnNjcmliZVxuICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYmVmb3JlOyB9KVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmJlZm9yZShhY3Rpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBiZWZvcmUgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBlbnRyeS5sZW5ndGggPiAxXG4gICAgPyBQcm9taXNlLmFsbChlbnRyeS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGhhbmRsZXIocGF5bG9hZCk7IH0pKVxuICAgIDogZW50cnlbMF0ocGF5bG9hZCk7XG5cbiAgcmV0dXJuIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcyQxLl9hY3Rpb25TdWJzY3JpYmVyc1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5hZnRlcjsgfSlcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZXhdIGVycm9yIGluIGFmdGVyIGFjdGlvbiBzdWJzY3JpYmVyczogXCIpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0pXG59O1xuXG5TdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlIChmbikge1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShmbiwgdGhpcy5fc3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlQWN0aW9uID0gZnVuY3Rpb24gc3Vic2NyaWJlQWN0aW9uIChmbikge1xuICB2YXIgc3VicyA9IHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyA/IHsgYmVmb3JlOiBmbiB9IDogZm47XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKHN1YnMsIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzKVxufTtcblxuU3RvcmUucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24gd2F0Y2ggKGdldHRlciwgY2IsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgZ2V0dGVyID09PSAnZnVuY3Rpb24nLCBcInN0b3JlLndhdGNoIG9ubHkgYWNjZXB0cyBhIGZ1bmN0aW9uLlwiKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fd2F0Y2hlclZNLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBnZXR0ZXIodGhpcyQxLnN0YXRlLCB0aGlzJDEuZ2V0dGVycyk7IH0sIGNiLCBvcHRpb25zKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZSAoc3RhdGUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzJDEuX3ZtLl9kYXRhLiQkc3RhdGUgPSBzdGF0ZTtcbiAgfSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiByZWdpc3Rlck1vZHVsZSAocGF0aCwgcmF3TW9kdWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgeyBwYXRoID0gW3BhdGhdOyB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgICBhc3NlcnQocGF0aC5sZW5ndGggPiAwLCAnY2Fubm90IHJlZ2lzdGVyIHRoZSByb290IG1vZHVsZSBieSB1c2luZyByZWdpc3Rlck1vZHVsZS4nKTtcbiAgfVxuXG4gIHRoaXMuX21vZHVsZXMucmVnaXN0ZXIocGF0aCwgcmF3TW9kdWxlKTtcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCB0aGlzLnN0YXRlLCBwYXRoLCB0aGlzLl9tb2R1bGVzLmdldChwYXRoKSwgb3B0aW9ucy5wcmVzZXJ2ZVN0YXRlKTtcbiAgLy8gcmVzZXQgc3RvcmUgdG8gdXBkYXRlIGdldHRlcnMuLi5cbiAgcmVzZXRTdG9yZVZNKHRoaXMsIHRoaXMuc3RhdGUpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnVucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTW9kdWxlIChwYXRoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgeyBwYXRoID0gW3BhdGhdOyB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgfVxuXG4gIHRoaXMuX21vZHVsZXMudW5yZWdpc3RlcihwYXRoKTtcbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUodGhpcyQxLnN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgVnVlLmRlbGV0ZShwYXJlbnRTdGF0ZSwgcGF0aFtwYXRoLmxlbmd0aCAtIDFdKTtcbiAgfSk7XG4gIHJlc2V0U3RvcmUodGhpcyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuaG90VXBkYXRlID0gZnVuY3Rpb24gaG90VXBkYXRlIChuZXdPcHRpb25zKSB7XG4gIHRoaXMuX21vZHVsZXMudXBkYXRlKG5ld09wdGlvbnMpO1xuICByZXNldFN0b3JlKHRoaXMsIHRydWUpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLl93aXRoQ29tbWl0ID0gZnVuY3Rpb24gX3dpdGhDb21taXQgKGZuKSB7XG4gIHZhciBjb21taXR0aW5nID0gdGhpcy5fY29tbWl0dGluZztcbiAgdGhpcy5fY29tbWl0dGluZyA9IHRydWU7XG4gIGZuKCk7XG4gIHRoaXMuX2NvbW1pdHRpbmcgPSBjb21taXR0aW5nO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFN0b3JlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTtcblxuZnVuY3Rpb24gZ2VuZXJpY1N1YnNjcmliZSAoZm4sIHN1YnMpIHtcbiAgaWYgKHN1YnMuaW5kZXhPZihmbikgPCAwKSB7XG4gICAgc3Vicy5wdXNoKGZuKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gc3Vicy5pbmRleE9mKGZuKTtcbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICBzdWJzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZSAoc3RvcmUsIGhvdCkge1xuICBzdG9yZS5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzdGF0ZSA9IHN0b3JlLnN0YXRlO1xuICAvLyBpbml0IGFsbCBtb2R1bGVzXG4gIGluc3RhbGxNb2R1bGUoc3RvcmUsIHN0YXRlLCBbXSwgc3RvcmUuX21vZHVsZXMucm9vdCwgdHJ1ZSk7XG4gIC8vIHJlc2V0IHZtXG4gIHJlc2V0U3RvcmVWTShzdG9yZSwgc3RhdGUsIGhvdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmVWTSAoc3RvcmUsIHN0YXRlLCBob3QpIHtcbiAgdmFyIG9sZFZtID0gc3RvcmUuX3ZtO1xuXG4gIC8vIGJpbmQgc3RvcmUgcHVibGljIGdldHRlcnNcbiAgc3RvcmUuZ2V0dGVycyA9IHt9O1xuICAvLyByZXNldCBsb2NhbCBnZXR0ZXJzIGNhY2hlXG4gIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgd3JhcHBlZEdldHRlcnMgPSBzdG9yZS5fd3JhcHBlZEdldHRlcnM7XG4gIHZhciBjb21wdXRlZCA9IHt9O1xuICBmb3JFYWNoVmFsdWUod3JhcHBlZEdldHRlcnMsIGZ1bmN0aW9uIChmbiwga2V5KSB7XG4gICAgLy8gdXNlIGNvbXB1dGVkIHRvIGxldmVyYWdlIGl0cyBsYXp5LWNhY2hpbmcgbWVjaGFuaXNtXG4gICAgLy8gZGlyZWN0IGlubGluZSBmdW5jdGlvbiB1c2Ugd2lsbCBsZWFkIHRvIGNsb3N1cmUgcHJlc2VydmluZyBvbGRWbS5cbiAgICAvLyB1c2luZyBwYXJ0aWFsIHRvIHJldHVybiBmdW5jdGlvbiB3aXRoIG9ubHkgYXJndW1lbnRzIHByZXNlcnZlZCBpbiBjbG9zdXJlIGVudmlyb25tZW50LlxuICAgIGNvbXB1dGVkW2tleV0gPSBwYXJ0aWFsKGZuLCBzdG9yZSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0b3JlLmdldHRlcnMsIGtleSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5fdm1ba2V5XTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUgLy8gZm9yIGxvY2FsIGdldHRlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdXNlIGEgVnVlIGluc3RhbmNlIHRvIHN0b3JlIHRoZSBzdGF0ZSB0cmVlXG4gIC8vIHN1cHByZXNzIHdhcm5pbmdzIGp1c3QgaW4gY2FzZSB0aGUgdXNlciBoYXMgYWRkZWRcbiAgLy8gc29tZSBmdW5reSBnbG9iYWwgbWl4aW5zXG4gIHZhciBzaWxlbnQgPSBWdWUuY29uZmlnLnNpbGVudDtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuICBzdG9yZS5fdm0gPSBuZXcgVnVlKHtcbiAgICBkYXRhOiB7XG4gICAgICAkJHN0YXRlOiBzdGF0ZVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IGNvbXB1dGVkXG4gIH0pO1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHNpbGVudDtcblxuICAvLyBlbmFibGUgc3RyaWN0IG1vZGUgZm9yIG5ldyB2bVxuICBpZiAoc3RvcmUuc3RyaWN0KSB7XG4gICAgZW5hYmxlU3RyaWN0TW9kZShzdG9yZSk7XG4gIH1cblxuICBpZiAob2xkVm0pIHtcbiAgICBpZiAoaG90KSB7XG4gICAgICAvLyBkaXNwYXRjaCBjaGFuZ2VzIGluIGFsbCBzdWJzY3JpYmVkIHdhdGNoZXJzXG4gICAgICAvLyB0byBmb3JjZSBnZXR0ZXIgcmUtZXZhbHVhdGlvbiBmb3IgaG90IHJlbG9hZGluZy5cbiAgICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2xkVm0uX2RhdGEuJCRzdGF0ZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgVnVlLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9sZFZtLiRkZXN0cm95KCk7IH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGxNb2R1bGUgKHN0b3JlLCByb290U3RhdGUsIHBhdGgsIG1vZHVsZSwgaG90KSB7XG4gIHZhciBpc1Jvb3QgPSAhcGF0aC5sZW5ndGg7XG4gIHZhciBuYW1lc3BhY2UgPSBzdG9yZS5fbW9kdWxlcy5nZXROYW1lc3BhY2UocGF0aCk7XG5cbiAgLy8gcmVnaXN0ZXIgaW4gbmFtZXNwYWNlIG1hcFxuICBpZiAobW9kdWxlLm5hbWVzcGFjZWQpIHtcbiAgICBpZiAoc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBkdXBsaWNhdGUgbmFtZXNwYWNlIFwiICsgbmFtZXNwYWNlICsgXCIgZm9yIHRoZSBuYW1lc3BhY2VkIG1vZHVsZSBcIiArIChwYXRoLmpvaW4oJy8nKSkpKTtcbiAgICB9XG4gICAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSA9IG1vZHVsZTtcbiAgfVxuXG4gIC8vIHNldCBzdGF0ZVxuICBpZiAoIWlzUm9vdCAmJiAhaG90KSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUocm9vdFN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKG1vZHVsZU5hbWUgaW4gcGFyZW50U3RhdGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAoXCJbdnVleF0gc3RhdGUgZmllbGQgXFxcIlwiICsgbW9kdWxlTmFtZSArIFwiXFxcIiB3YXMgb3ZlcnJpZGRlbiBieSBhIG1vZHVsZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXQgXFxcIlwiICsgKHBhdGguam9pbignLicpKSArIFwiXFxcIlwiKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFZ1ZS5zZXQocGFyZW50U3RhdGUsIG1vZHVsZU5hbWUsIG1vZHVsZS5zdGF0ZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbG9jYWwgPSBtb2R1bGUuY29udGV4dCA9IG1ha2VMb2NhbENvbnRleHQoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCk7XG5cbiAgbW9kdWxlLmZvckVhY2hNdXRhdGlvbihmdW5jdGlvbiAobXV0YXRpb24sIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3Rlck11dGF0aW9uKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgbXV0YXRpb24sIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwga2V5KSB7XG4gICAgdmFyIHR5cGUgPSBhY3Rpb24ucm9vdCA/IGtleSA6IG5hbWVzcGFjZSArIGtleTtcbiAgICB2YXIgaGFuZGxlciA9IGFjdGlvbi5oYW5kbGVyIHx8IGFjdGlvbjtcbiAgICByZWdpc3RlckFjdGlvbihzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEdldHRlcihmdW5jdGlvbiAoZ2V0dGVyLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJHZXR0ZXIoc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBnZXR0ZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQsIGtleSkge1xuICAgIGluc3RhbGxNb2R1bGUoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aC5jb25jYXQoa2V5KSwgY2hpbGQsIGhvdCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIG1ha2UgbG9jYWxpemVkIGRpc3BhdGNoLCBjb21taXQsIGdldHRlcnMgYW5kIHN0YXRlXG4gKiBpZiB0aGVyZSBpcyBubyBuYW1lc3BhY2UsIGp1c3QgdXNlIHJvb3Qgb25lc1xuICovXG5mdW5jdGlvbiBtYWtlTG9jYWxDb250ZXh0IChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKSB7XG4gIHZhciBub05hbWVzcGFjZSA9IG5hbWVzcGFjZSA9PT0gJyc7XG5cbiAgdmFyIGxvY2FsID0ge1xuICAgIGRpc3BhdGNoOiBub05hbWVzcGFjZSA/IHN0b3JlLmRpc3BhdGNoIDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdG9yZS5fYWN0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgYWN0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaCh0eXBlLCBwYXlsb2FkKVxuICAgIH0sXG5cbiAgICBjb21taXQ6IG5vTmFtZXNwYWNlID8gc3RvcmUuY29tbWl0IDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdG9yZS5fbXV0YXRpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBtdXRhdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdG9yZS5jb21taXQodHlwZSwgcGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGdldHRlcnMgYW5kIHN0YXRlIG9iamVjdCBtdXN0IGJlIGdvdHRlbiBsYXppbHlcbiAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgYmUgY2hhbmdlZCBieSB2bSB1cGRhdGVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobG9jYWwsIHtcbiAgICBnZXR0ZXJzOiB7XG4gICAgICBnZXQ6IG5vTmFtZXNwYWNlXG4gICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyczsgfVxuICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1ha2VMb2NhbEdldHRlcnMoc3RvcmUsIG5hbWVzcGFjZSk7IH1cbiAgICB9LFxuICAgIHN0YXRlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldE5lc3RlZFN0YXRlKHN0b3JlLnN0YXRlLCBwYXRoKTsgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGxvY2FsXG59XG5cbmZ1bmN0aW9uIG1ha2VMb2NhbEdldHRlcnMgKHN0b3JlLCBuYW1lc3BhY2UpIHtcbiAgaWYgKCFzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV0pIHtcbiAgICB2YXIgZ2V0dGVyc1Byb3h5ID0ge307XG4gICAgdmFyIHNwbGl0UG9zID0gbmFtZXNwYWNlLmxlbmd0aDtcbiAgICBPYmplY3Qua2V5cyhzdG9yZS5nZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAvLyBza2lwIGlmIHRoZSB0YXJnZXQgZ2V0dGVyIGlzIG5vdCBtYXRjaCB0aGlzIG5hbWVzcGFjZVxuICAgICAgaWYgKHR5cGUuc2xpY2UoMCwgc3BsaXRQb3MpICE9PSBuYW1lc3BhY2UpIHsgcmV0dXJuIH1cblxuICAgICAgLy8gZXh0cmFjdCBsb2NhbCBnZXR0ZXIgdHlwZVxuICAgICAgdmFyIGxvY2FsVHlwZSA9IHR5cGUuc2xpY2Uoc3BsaXRQb3MpO1xuXG4gICAgICAvLyBBZGQgYSBwb3J0IHRvIHRoZSBnZXR0ZXJzIHByb3h5LlxuICAgICAgLy8gRGVmaW5lIGFzIGdldHRlciBwcm9wZXJ0eSBiZWNhdXNlXG4gICAgICAvLyB3ZSBkbyBub3Qgd2FudCB0byBldmFsdWF0ZSB0aGUgZ2V0dGVycyBpbiB0aGlzIHRpbWUuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2V0dGVyc1Byb3h5LCBsb2NhbFR5cGUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzW3R5cGVdOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV0gPSBnZXR0ZXJzUHJveHk7XG4gIH1cblxuICByZXR1cm4gc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZVtuYW1lc3BhY2VdXG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTXV0YXRpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fbXV0YXRpb25zW3R5cGVdIHx8IChzdG9yZS5fbXV0YXRpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRNdXRhdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICBoYW5kbGVyLmNhbGwoc3RvcmUsIGxvY2FsLnN0YXRlLCBwYXlsb2FkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQWN0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX2FjdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9hY3Rpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRBY3Rpb25IYW5kbGVyIChwYXlsb2FkKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuY2FsbChzdG9yZSwge1xuICAgICAgZGlzcGF0Y2g6IGxvY2FsLmRpc3BhdGNoLFxuICAgICAgY29tbWl0OiBsb2NhbC5jb21taXQsXG4gICAgICBnZXR0ZXJzOiBsb2NhbC5nZXR0ZXJzLFxuICAgICAgc3RhdGU6IGxvY2FsLnN0YXRlLFxuICAgICAgcm9vdEdldHRlcnM6IHN0b3JlLmdldHRlcnMsXG4gICAgICByb290U3RhdGU6IHN0b3JlLnN0YXRlXG4gICAgfSwgcGF5bG9hZCk7XG4gICAgaWYgKCFpc1Byb21pc2UocmVzKSkge1xuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgfVxuICAgIGlmIChzdG9yZS5fZGV2dG9vbEhvb2spIHtcbiAgICAgIHJldHVybiByZXMuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBzdG9yZS5fZGV2dG9vbEhvb2suZW1pdCgndnVleDplcnJvcicsIGVycik7XG4gICAgICAgIHRocm93IGVyclxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyR2V0dGVyIChzdG9yZSwgdHlwZSwgcmF3R2V0dGVyLCBsb2NhbCkge1xuICBpZiAoc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIGR1cGxpY2F0ZSBnZXR0ZXIga2V5OiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdID0gZnVuY3Rpb24gd3JhcHBlZEdldHRlciAoc3RvcmUpIHtcbiAgICByZXR1cm4gcmF3R2V0dGVyKFxuICAgICAgbG9jYWwuc3RhdGUsIC8vIGxvY2FsIHN0YXRlXG4gICAgICBsb2NhbC5nZXR0ZXJzLCAvLyBsb2NhbCBnZXR0ZXJzXG4gICAgICBzdG9yZS5zdGF0ZSwgLy8gcm9vdCBzdGF0ZVxuICAgICAgc3RvcmUuZ2V0dGVycyAvLyByb290IGdldHRlcnNcbiAgICApXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuYWJsZVN0cmljdE1vZGUgKHN0b3JlKSB7XG4gIHN0b3JlLl92bS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YS4kJHN0YXRlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgYXNzZXJ0KHN0b3JlLl9jb21taXR0aW5nLCBcImRvIG5vdCBtdXRhdGUgdnVleCBzdG9yZSBzdGF0ZSBvdXRzaWRlIG11dGF0aW9uIGhhbmRsZXJzLlwiKTtcbiAgICB9XG4gIH0sIHsgZGVlcDogdHJ1ZSwgc3luYzogdHJ1ZSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TmVzdGVkU3RhdGUgKHN0YXRlLCBwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGtleSkgeyByZXR1cm4gc3RhdGVba2V5XTsgfSwgc3RhdGUpXG59XG5cbmZ1bmN0aW9uIHVuaWZ5T2JqZWN0U3R5bGUgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgaWYgKGlzT2JqZWN0KHR5cGUpICYmIHR5cGUudHlwZSkge1xuICAgIG9wdGlvbnMgPSBwYXlsb2FkO1xuICAgIHBheWxvYWQgPSB0eXBlO1xuICAgIHR5cGUgPSB0eXBlLnR5cGU7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycsIChcImV4cGVjdHMgc3RyaW5nIGFzIHRoZSB0eXBlLCBidXQgZm91bmQgXCIgKyAodHlwZW9mIHR5cGUpICsgXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQsIG9wdGlvbnM6IG9wdGlvbnMgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsIChfVnVlKSB7XG4gIGlmIChWdWUgJiYgX1Z1ZSA9PT0gVnVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdbdnVleF0gYWxyZWFkeSBpbnN0YWxsZWQuIFZ1ZS51c2UoVnVleCkgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IG9uY2UuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgVnVlID0gX1Z1ZTtcbiAgYXBwbHlNaXhpbihWdWUpO1xufVxuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZ2V0dGluZyB0aGUgc3RhdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBzdGF0ZXMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBzdGF0ZSBhbmQgZ2V0dGVycyBmb3IgcGFyYW0sIHlvdSBjYW4gZG8gc29tZXRoaW5nIGZvciBzdGF0ZSBhbmQgZ2V0dGVycyBpbiBpdC5cbiAqIEBwYXJhbSB7T2JqZWN0fVxuICovXG52YXIgbWFwU3RhdGUgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgc3RhdGVzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRNYXAoc3RhdGVzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWV4XSBtYXBTdGF0ZTogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAoc3RhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkU3RhdGUgKCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy4kc3RvcmUuc3RhdGU7XG4gICAgICB2YXIgZ2V0dGVycyA9IHRoaXMuJHN0b3JlLmdldHRlcnM7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcFN0YXRlJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IG1vZHVsZS5jb250ZXh0LnN0YXRlO1xuICAgICAgICBnZXR0ZXJzID0gbW9kdWxlLmNvbnRleHQuZ2V0dGVycztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmNhbGwodGhpcywgc3RhdGUsIGdldHRlcnMpXG4gICAgICAgIDogc3RhdGVbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgY29tbWl0dGluZyB0aGUgbXV0YXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG11dGF0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBjb21taXRgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbnRob3IgcGFyYW1zLiBZb3UgY2FuIGNvbW1pdCBtdXRhdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBNdXRhdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgbXV0YXRpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRNYXAobXV0YXRpb25zKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWV4XSBtYXBNdXRhdGlvbnM6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKG11dGF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZE11dGF0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAvLyBHZXQgdGhlIGNvbW1pdCBtZXRob2QgZnJvbSBzdG9yZVxuICAgICAgdmFyIGNvbW1pdCA9IHRoaXMuJHN0b3JlLmNvbW1pdDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwTXV0YXRpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb21taXQgPSBtb2R1bGUuY29udGV4dC5jb21taXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbY29tbWl0XS5jb25jYXQoYXJncykpXG4gICAgICAgIDogY29tbWl0LmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZ2V0dGluZyB0aGUgZ2V0dGVyc1xuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gZ2V0dGVyc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwR2V0dGVycyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBnZXR0ZXJzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRNYXAoZ2V0dGVycykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwR2V0dGVyczogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICAvLyBUaGUgbmFtZXNwYWNlIGhhcyBiZWVuIG11dGF0ZWQgYnkgbm9ybWFsaXplTmFtZXNwYWNlXG4gICAgdmFsID0gbmFtZXNwYWNlICsgdmFsO1xuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkR2V0dGVyICgpIHtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwR2V0dGVycycsIG5hbWVzcGFjZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhKHZhbCBpbiB0aGlzLiRzdG9yZS5nZXR0ZXJzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGdldHRlcjogXCIgKyB2YWwpKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1t2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBkaXNwYXRjaCB0aGUgYWN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBhY3Rpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGRpc3BhdGNoYCBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW0sIGl0IGNhbiBhY2NlcHQgYW50aG9yIHBhcmFtcy4gWW91IGNhbiBkaXNwYXRjaCBhY3Rpb24gYW5kIGRvIGFueSBvdGhlciB0aGluZ3MgaW4gdGhpcyBmdW5jdGlvbi4gc3BlY2lhbGx5LCBZb3UgbmVlZCB0byBwYXNzIGFudGhvciBwYXJhbXMgZnJvbSB0aGUgbWFwcGVkIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwQWN0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBhY3Rpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRNYXAoYWN0aW9ucykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwQWN0aW9uczogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAoYWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEFjdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgLy8gZ2V0IGRpc3BhdGNoIGZ1bmN0aW9uIGZyb20gc3RvcmVcbiAgICAgIHZhciBkaXNwYXRjaCA9IHRoaXMuJHN0b3JlLmRpc3BhdGNoO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBBY3Rpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaCA9IG1vZHVsZS5jb250ZXh0LmRpc3BhdGNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2Rpc3BhdGNoXS5jb25jYXQoYXJncykpXG4gICAgICAgIDogZGlzcGF0Y2guYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmViaW5kaW5nIG5hbWVzcGFjZSBwYXJhbSBmb3IgbWFwWFhYIGZ1bmN0aW9uIGluIHNwZWNpYWwgc2NvcGVkLCBhbmQgcmV0dXJuIHRoZW0gYnkgc2ltcGxlIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMgPSBmdW5jdGlvbiAobmFtZXNwYWNlKSB7IHJldHVybiAoe1xuICBtYXBTdGF0ZTogbWFwU3RhdGUuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwTXV0YXRpb25zOiBtYXBNdXRhdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKVxufSk7IH07XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBtYXBcbiAqIG5vcm1hbGl6ZU1hcChbMSwgMiwgM10pID0+IFsgeyBrZXk6IDEsIHZhbDogMSB9LCB7IGtleTogMiwgdmFsOiAyIH0sIHsga2V5OiAzLCB2YWw6IDMgfSBdXG4gKiBub3JtYWxpemVNYXAoe2E6IDEsIGI6IDIsIGM6IDN9KSA9PiBbIHsga2V5OiAnYScsIHZhbDogMSB9LCB7IGtleTogJ2InLCB2YWw6IDIgfSwgeyBrZXk6ICdjJywgdmFsOiAzIH0gXVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IG1hcFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVNYXAgKG1hcCkge1xuICBpZiAoIWlzVmFsaWRNYXAobWFwKSkge1xuICAgIHJldHVybiBbXVxuICB9XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1hcClcbiAgICA/IG1hcC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDoga2V5IH0pOyB9KVxuICAgIDogT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDogbWFwW2tleV0gfSk7IH0pXG59XG5cbi8qKlxuICogVmFsaWRhdGUgd2hldGhlciBnaXZlbiBtYXAgaXMgdmFsaWQgb3Igbm90XG4gKiBAcGFyYW0geyp9IG1hcFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZE1hcCAobWFwKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1hcCkgfHwgaXNPYmplY3QobWFwKVxufVxuXG4vKipcbiAqIFJldHVybiBhIGZ1bmN0aW9uIGV4cGVjdCB0d28gcGFyYW0gY29udGFpbnMgbmFtZXNwYWNlIGFuZCBtYXAuIGl0IHdpbGwgbm9ybWFsaXplIHRoZSBuYW1lc3BhY2UgYW5kIHRoZW4gdGhlIHBhcmFtJ3MgZnVuY3Rpb24gd2lsbCBoYW5kbGUgdGhlIG5ldyBuYW1lc3BhY2UgYW5kIHRoZSBtYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWVzcGFjZSAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1hcCkge1xuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xuICAgICAgbWFwID0gbmFtZXNwYWNlO1xuICAgICAgbmFtZXNwYWNlID0gJyc7XG4gICAgfSBlbHNlIGlmIChuYW1lc3BhY2UuY2hhckF0KG5hbWVzcGFjZS5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XG4gICAgICBuYW1lc3BhY2UgKz0gJy8nO1xuICAgIH1cbiAgICByZXR1cm4gZm4obmFtZXNwYWNlLCBtYXApXG4gIH1cbn1cblxuLyoqXG4gKiBTZWFyY2ggYSBzcGVjaWFsIG1vZHVsZSBmcm9tIHN0b3JlIGJ5IG5hbWVzcGFjZS4gaWYgbW9kdWxlIG5vdCBleGlzdCwgcHJpbnQgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdG9yZVxuICogQHBhcmFtIHtTdHJpbmd9IGhlbHBlclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRNb2R1bGVCeU5hbWVzcGFjZSAoc3RvcmUsIGhlbHBlciwgbmFtZXNwYWNlKSB7XG4gIHZhciBtb2R1bGUgPSBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbW9kdWxlKSB7XG4gICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gbW9kdWxlIG5hbWVzcGFjZSBub3QgZm91bmQgaW4gXCIgKyBoZWxwZXIgKyBcIigpOiBcIiArIG5hbWVzcGFjZSkpO1xuICB9XG4gIHJldHVybiBtb2R1bGVcbn1cblxudmFyIGluZGV4X2VzbSA9IHtcbiAgU3RvcmU6IFN0b3JlLFxuICBpbnN0YWxsOiBpbnN0YWxsLFxuICB2ZXJzaW9uOiAnMy4xLjMnLFxuICBtYXBTdGF0ZTogbWFwU3RhdGUsXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLFxuICBjcmVhdGVOYW1lc3BhY2VkSGVscGVyczogY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnNcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4X2VzbTtcbmV4cG9ydCB7IFN0b3JlLCBpbnN0YWxsLCBtYXBTdGF0ZSwgbWFwTXV0YXRpb25zLCBtYXBHZXR0ZXJzLCBtYXBBY3Rpb25zLCBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyB9O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IGRlZmF1bHRDb25zdHJ1Y3RvciA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcbi8vIEVkZ2UgMTQtIGlzc3VlXG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnZmlsdGVyJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSwgcmVhc29uKSB7XG4gIHZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IHJlYXNvbi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTtcbiAgdmFyIFJFUExBQ0VfS0VFUFNfJDAgPSByZWFzb24uUkVQTEFDRV9LRUVQU18kMDtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgcmVwbGFjZXIgPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiByZXBsYWNlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gcmVwbGFjZXIuY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6IG5hdGl2ZVJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKCFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSAmJiBSRVBMQUNFX0tFRVBTXyQwKSB8fFxuICAgICAgICAodHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ3N0cmluZycgJiYgcmVwbGFjZVZhbHVlLmluZGV4T2YoVU5TQUZFX1NVQlNUSVRVVEUpID09PSAtMSlcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcblxuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuXG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuIG5hdGl2ZVJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5XCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KTtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy42LjQnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaW50LXBtXCIsY2xhc3M6eydpbnQtcG0tdmVydGljYWwnOiBfdm0udmVydGljYWx9fSxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiaW50LXBtLWJ0blwiLGNsYXNzOl92bS5nZXRCdG5DbGFzcyh0cnVlKSxhdHRyczp7XCJhcmlhLWxhYmVsXCI6X3ZtLmRlY3JlbWVudEFyaWFMYWJlbCxcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnZlcnRpY2FsID8gX3ZtLmluY3JlbWVudCgpIDogX3ZtLmRlY3JlbWVudCgpfX19LFtfdm0uX3QoX3ZtLnZlcnRpY2FsID8gJ2luY3JlbWVudCcgOiAnZGVjcmVtZW50JyxbX3ZtLl92KF92bS5fcyhfdm0udmVydGljYWwgPyAnKycgOiAnLScpKV0pXSwyKSxfYygnZGl2Jyx7cmVmOlwic3BpbmJ1dHRvblwiLHN0YXRpY0NsYXNzOlwiaW50LXBtLXZhbHVlXCIsYXR0cnM6e1wicm9sZVwiOlwic3BpbmJ1dHRvblwiLFwidGFiaW5kZXhcIjpcIjBcIixcImFyaWEtdmFsdWVub3dcIjpfdm0udmFsdWUsXCJhcmlhLXZhbHVlbWluXCI6X3ZtLm1pbixcImFyaWEtdmFsdWVtYXhcIjpfdm0ubWF4LFwiYXJpYS1sYWJlbFwiOl92bS5zcGluQnV0dG9uQXJpYUxhYmVsfX0sW192bS5fdChcImRlZmF1bHRcIixbX3ZtLl92KF92bS5fcyhfdm0uaW50VmFsdWUpKV0pXSwyKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJpbnQtcG0tYnRuXCIsY2xhc3M6X3ZtLmdldEJ0bkNsYXNzKGZhbHNlKSxhdHRyczp7XCJhcmlhLWxhYmVsXCI6X3ZtLmluY3JlbWVudEFyaWFMYWJlbCxcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnZlcnRpY2FsID8gX3ZtLmRlY3JlbWVudCgpIDogX3ZtLmluY3JlbWVudCgpfX19LFtfdm0uX3QoX3ZtLnZlcnRpY2FsID8gJ2RlY3JlbWVudCcgOiAnaW5jcmVtZW50JyxbX3ZtLl92KF92bS5fcyhfdm0udmVydGljYWwgPyAnLScgOiAnKycpKV0pXSwyKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiaW50LXBtXCIgOmNsYXNzPVwieydpbnQtcG0tdmVydGljYWwnOiB2ZXJ0aWNhbH1cIj5cclxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaW50LXBtLWJ0blwiIDpjbGFzcz1cImdldEJ0bkNsYXNzKHRydWUpXCIgdi1vbjpjbGljaz1cInZlcnRpY2FsID8gaW5jcmVtZW50KCkgOiBkZWNyZW1lbnQoKVwiXHJcbiAgICAgICAgICAgICAgICA6YXJpYS1sYWJlbD1cImRlY3JlbWVudEFyaWFMYWJlbFwiIDpkaXNhYmxlZD1cImRpc2FibGVkXCI+XHJcbiAgICAgICAgICAgIDxzbG90IDpuYW1lPVwidmVydGljYWwgPyAnaW5jcmVtZW50JyA6ICdkZWNyZW1lbnQnXCI+e3sgdmVydGljYWwgPyAnKycgOiAnLScgfX08L3Nsb3Q+XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImludC1wbS12YWx1ZVwiIHJlZj1cInNwaW5idXR0b25cIiByb2xlPVwic3BpbmJ1dHRvblwiIHRhYmluZGV4PVwiMFwiXHJcbiAgICAgICAgICAgICA6YXJpYS12YWx1ZW5vdz1cInZhbHVlXCIgOmFyaWEtdmFsdWVtaW49XCJtaW5cIiA6YXJpYS12YWx1ZW1heD1cIm1heFwiIDphcmlhLWxhYmVsPVwic3BpbkJ1dHRvbkFyaWFMYWJlbFwiPlxyXG4gICAgICAgICAgICA8c2xvdD57eyBpbnRWYWx1ZSB9fTwvc2xvdD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaW50LXBtLWJ0blwiIDpjbGFzcz1cImdldEJ0bkNsYXNzKGZhbHNlKVwiIHYtb246Y2xpY2s9XCJ2ZXJ0aWNhbCA/IGRlY3JlbWVudCgpIDogaW5jcmVtZW50KClcIlxyXG4gICAgICAgICAgICAgICAgOmFyaWEtbGFiZWw9XCJpbmNyZW1lbnRBcmlhTGFiZWxcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZFwiPlxyXG4gICAgICAgICAgICA8c2xvdCA6bmFtZT1cInZlcnRpY2FsID8gJ2RlY3JlbWVudCcgOiAnaW5jcmVtZW50J1wiPnt7IHZlcnRpY2FsID8gJy0nIDogJysnIH19PC9zbG90PlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdJbnRlZ2VyUGx1c21pbnVzJyxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgZGVmYXVsdDogMCxcclxuICAgICAgICB0eXBlOiBOdW1iZXJcclxuICAgICAgfSxcclxuICAgICAgbWluOiB7XHJcbiAgICAgICAgZGVmYXVsdDogMCxcclxuICAgICAgICB0eXBlOiBOdW1iZXJcclxuICAgICAgfSxcclxuICAgICAgbWF4OiB7XHJcbiAgICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLFxyXG4gICAgICAgIHR5cGU6IE51bWJlclxyXG4gICAgICB9LFxyXG4gICAgICBzdGVwOiB7XHJcbiAgICAgICAgZGVmYXVsdDogMSxcclxuICAgICAgICB0eXBlOiBOdW1iZXJcclxuICAgICAgfSxcclxuICAgICAgdmVydGljYWw6IHtcclxuICAgICAgICBkZWZhdWx0OiBmYWxzZSxcclxuICAgICAgICB0eXBlOiBCb29sZWFuXHJcbiAgICAgIH0sXHJcbiAgICAgIGluY3JlbWVudEFyaWFMYWJlbDoge1xyXG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogU3RyaW5nXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlY3JlbWVudEFyaWFMYWJlbDoge1xyXG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogU3RyaW5nXHJcbiAgICAgIH0sXHJcbiAgICAgIHNwaW5CdXR0b25BcmlhTGFiZWw6IHtcclxuICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgIHR5cGU6IFN0cmluZ1xyXG4gICAgICB9LFxyXG4gICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW5cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRhdGEgKCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGludFZhbHVlOiAwXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb21wdXRlZDoge1xyXG4gICAgICBjYW5JbmNyZW1lbnQgKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm4gZmFsc2VcclxuICAgICAgICByZXR1cm4gKHRoaXMubWF4ID09PSB1bmRlZmluZWQgfHwgKCh0aGlzLmludFZhbHVlICsgdGhpcy5zdGVwKSA8PSB0aGlzLm1heCkpXHJcbiAgICAgIH0sXHJcbiAgICAgIGNhbkRlY3JlbWVudCAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybiBmYWxzZVxyXG4gICAgICAgIHJldHVybiAoKHRoaXMuaW50VmFsdWUgLSB0aGlzLnN0ZXApID49IHRoaXMubWluKVxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIG1vdW50ZWQgKCkge1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMua2V5VXApXHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICBrZXlVcCAoZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1NwaW5CdXR0b25Gb2N1c2VkKCkpIHtcclxuICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzMyB8fCBldmVudC5rZXlDb2RlID09PSAzOCkgeyAvLyBwYWdlIHVwIHx8IHVwIGFycm93XHJcbiAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50KClcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzNCB8fCBldmVudC5rZXlDb2RlID09PSA0MCkgeyAvLyBwYWdlIGRvd24gfHwgZG93biBhcnJvd1xyXG4gICAgICAgICAgICB0aGlzLmRlY3JlbWVudCgpXHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzYpIHsgLy8gaG9tZSBidXR0b25cclxuICAgICAgICAgICAgdGhpcy5zZXRUb01pbigpXHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBpZiBtYXgsIHNldCB0byBtYXhcclxuICAgICAgICAgIGlmICh0aGlzLm1heCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50LmtleUNvZGUgPT09IDM1KSB7IC8vIGVuZCBidXR0b25cclxuICAgICAgICAgICAgdGhpcy5zZXRUb01heCgpXHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGlzU3BpbkJ1dHRvbkZvY3VzZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMuJHJlZnMuc3BpbmJ1dHRvblxyXG4gICAgICB9LFxyXG4gICAgICBnZXRCdG5DbGFzcyAoZmlyc3RCdG4pIHtcclxuICAgICAgICBsZXQgYnRuQ2xhc3MgPSAnaW50LXBtLSdcclxuICAgICAgICBpZiAoKGZpcnN0QnRuICYmICF0aGlzLnZlcnRpY2FsKSB8fCAoIWZpcnN0QnRuICYmIHRoaXMudmVydGljYWwpKSB7XHJcbiAgICAgICAgICBidG5DbGFzcyArPSAnZGVjcmVtZW50J1xyXG4gICAgICAgICAgaWYgKCF0aGlzLmNhbkRlY3JlbWVudCkgYnRuQ2xhc3MgKz0gJyBkaXNhYmxlZCdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYnRuQ2xhc3MgKz0gJ2luY3JlbWVudCdcclxuICAgICAgICAgIGlmICghdGhpcy5jYW5JbmNyZW1lbnQpIGJ0bkNsYXNzICs9ICcgZGlzYWJsZWQnXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBidG5DbGFzc1xyXG4gICAgICB9LFxyXG4gICAgICBzZXRUb01pbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVyblxyXG4gICAgICAgIHRoaXMuaW50VmFsdWUgPSB0aGlzLm1pblxyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5pbnRWYWx1ZSlcclxuICAgICAgfSxcclxuICAgICAgc2V0VG9NYXgoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVyblxyXG4gICAgICAgIHRoaXMuaW50VmFsdWUgPSB0aGlzLm1heFxyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5pbnRWYWx1ZSlcclxuICAgICAgfSxcclxuICAgICAgaW5jcmVtZW50ICgpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW5JbmNyZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMuaW50VmFsdWUgPSB0aGlzLmludFZhbHVlICsgdGhpcy5zdGVwXHJcbiAgICAgICAgICB0aGlzLiRlbWl0KCdpcG0taW5jcmVtZW50JywgdGhpcy5pbnRWYWx1ZSlcclxuICAgICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5pbnRWYWx1ZSlcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGRlY3JlbWVudCAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FuRGVjcmVtZW50KSB7XHJcbiAgICAgICAgICB0aGlzLmludFZhbHVlID0gdGhpcy5pbnRWYWx1ZSAtIHRoaXMuc3RlcFxyXG4gICAgICAgICAgdGhpcy4kZW1pdCgnaXBtLWRlY3JlbWVudCcsIHRoaXMuaW50VmFsdWUpXHJcbiAgICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHRoaXMuaW50VmFsdWUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgd2F0Y2g6IHtcclxuICAgICAgdmFsdWU6IHtcclxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbiAobmV3VmFsLCBvbGRWYWwpIHtcclxuICAgICAgICAgIHRoaXMuaW50VmFsdWUgPSBuZXdWYWxcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVkICgpIHtcclxuICAgICAgdGhpcy5pbnRWYWx1ZSA9IHRoaXMudmFsdWVcclxuICAgICAgaWYgKHRoaXMuc3RlcCA8IDEpIHRoaXMuc3RlcCA9IDFcclxuICAgICAgaWYgKHRoaXMubWF4IDwgdGhpcy5taW4pIHRoaXMubWF4ID0gdW5kZWZpbmVkXHJcbiAgICB9XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cclxuICAgIC5pbnQtcG0ge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgICAgICAuaW50LXBtLXZhbHVlIHtcclxuICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHggMDtcclxuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjQ0NDO1xyXG4gICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAwIDEwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuaW50LXBtLWJ0biB7XHJcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNDQ0M7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNEREQ7XHJcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XHJcblxyXG4gICAgICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNDQ0M7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICYuZGlzYWJsZWQge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0VFRTtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAjNzc3O1xyXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcclxuICAgICAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFRUU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYuaW50LXBtLXZlcnRpY2FsIHtcclxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuXHJcbiAgICAgICAgICAgIC5pbnQtcG0tdmFsdWUge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAwIDFweDtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3N0eWxlPlxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMi0wIS4uLy4uLy4uL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTItMCEuLi8uLi8uLi90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi8uLi92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW50ZWdlclBsdXNtaW51cy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0ludGVnZXJQbHVzbWludXMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPThiMWZiYjk2JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0ludGVnZXJQbHVzbWludXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPThiMWZiYjk2Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI4YjFmYmI5NlwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbnZhciBuYXRpdmVBc3NpZ24gPSBPYmplY3QuYXNzaWduO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5tb2R1bGUuZXhwb3J0cyA9ICFuYXRpdmVBc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgbmF0aXZlQXNzaWduKHsgYjogMSB9LCBuYXRpdmVBc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gbmF0aXZlQXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cyhuYXRpdmVBc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xuICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IG9iamVjdEtleXMoUykuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogbmF0aXZlQXNzaWduO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgKi9cbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBkb2N1bWVudC5kb21haW4gJiYgbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpO1xuXG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcbnZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXG4gIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkge1xuICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICBpZiAoIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIGlmICghSVNfUFVSRSAmJiBnZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICBzZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpOyB9O1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvcik7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24udG9TdHJpbmc7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAodHlwZW9mIHN0b3JlLmluc3BlY3RTb3VyY2UgIT0gJ2Z1bmN0aW9uJykge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gY2hhckF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCIvKiFcbiAgKiB2dWUtcm91dGVyIHYzLjEuNlxuICAqIChjKSAyMDIwIEV2YW4gWW91XG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG4vKiAgKi9cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybiAoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25kaXRpb24pIHtcbiAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKChcIlt2dWUtcm91dGVyXSBcIiArIG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0Vycm9yIChlcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlcnIpLmluZGV4T2YoJ0Vycm9yJykgPiAtMVxufVxuXG5mdW5jdGlvbiBpc0V4dGVuZGVkRXJyb3IgKGNvbnN0cnVjdG9yLCBlcnIpIHtcbiAgcmV0dXJuIChcbiAgICBlcnIgaW5zdGFuY2VvZiBjb25zdHJ1Y3RvciB8fFxuICAgIC8vIF9uYW1lIGlzIHRvIHN1cHBvcnQgSUU5IHRvb1xuICAgIChlcnIgJiYgKGVyci5uYW1lID09PSBjb25zdHJ1Y3Rvci5uYW1lIHx8IGVyci5fbmFtZSA9PT0gY29uc3RydWN0b3IuX25hbWUpKVxuICApXG59XG5cbmZ1bmN0aW9uIGV4dGVuZCAoYSwgYikge1xuICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgIGFba2V5XSA9IGJba2V5XTtcbiAgfVxuICByZXR1cm4gYVxufVxuXG52YXIgVmlldyA9IHtcbiAgbmFtZTogJ1JvdXRlclZpZXcnLFxuICBmdW5jdGlvbmFsOiB0cnVlLFxuICBwcm9wczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0J1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKF8sIHJlZikge1xuICAgIHZhciBwcm9wcyA9IHJlZi5wcm9wcztcbiAgICB2YXIgY2hpbGRyZW4gPSByZWYuY2hpbGRyZW47XG4gICAgdmFyIHBhcmVudCA9IHJlZi5wYXJlbnQ7XG4gICAgdmFyIGRhdGEgPSByZWYuZGF0YTtcblxuICAgIC8vIHVzZWQgYnkgZGV2dG9vbHMgdG8gZGlzcGxheSBhIHJvdXRlci12aWV3IGJhZGdlXG4gICAgZGF0YS5yb3V0ZXJWaWV3ID0gdHJ1ZTtcblxuICAgIC8vIGRpcmVjdGx5IHVzZSBwYXJlbnQgY29udGV4dCdzIGNyZWF0ZUVsZW1lbnQoKSBmdW5jdGlvblxuICAgIC8vIHNvIHRoYXQgY29tcG9uZW50cyByZW5kZXJlZCBieSByb3V0ZXItdmlldyBjYW4gcmVzb2x2ZSBuYW1lZCBzbG90c1xuICAgIHZhciBoID0gcGFyZW50LiRjcmVhdGVFbGVtZW50O1xuICAgIHZhciBuYW1lID0gcHJvcHMubmFtZTtcbiAgICB2YXIgcm91dGUgPSBwYXJlbnQuJHJvdXRlO1xuICAgIHZhciBjYWNoZSA9IHBhcmVudC5fcm91dGVyVmlld0NhY2hlIHx8IChwYXJlbnQuX3JvdXRlclZpZXdDYWNoZSA9IHt9KTtcblxuICAgIC8vIGRldGVybWluZSBjdXJyZW50IHZpZXcgZGVwdGgsIGFsc28gY2hlY2sgdG8gc2VlIGlmIHRoZSB0cmVlXG4gICAgLy8gaGFzIGJlZW4gdG9nZ2xlZCBpbmFjdGl2ZSBidXQga2VwdC1hbGl2ZS5cbiAgICB2YXIgZGVwdGggPSAwO1xuICAgIHZhciBpbmFjdGl2ZSA9IGZhbHNlO1xuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50Ll9yb3V0ZXJSb290ICE9PSBwYXJlbnQpIHtcbiAgICAgIHZhciB2bm9kZURhdGEgPSBwYXJlbnQuJHZub2RlID8gcGFyZW50LiR2bm9kZS5kYXRhIDoge307XG4gICAgICBpZiAodm5vZGVEYXRhLnJvdXRlclZpZXcpIHtcbiAgICAgICAgZGVwdGgrKztcbiAgICAgIH1cbiAgICAgIGlmICh2bm9kZURhdGEua2VlcEFsaXZlICYmIHBhcmVudC5fZGlyZWN0SW5hY3RpdmUgJiYgcGFyZW50Ll9pbmFjdGl2ZSkge1xuICAgICAgICBpbmFjdGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgZGF0YS5yb3V0ZXJWaWV3RGVwdGggPSBkZXB0aDtcblxuICAgIC8vIHJlbmRlciBwcmV2aW91cyB2aWV3IGlmIHRoZSB0cmVlIGlzIGluYWN0aXZlIGFuZCBrZXB0LWFsaXZlXG4gICAgaWYgKGluYWN0aXZlKSB7XG4gICAgICB2YXIgY2FjaGVkRGF0YSA9IGNhY2hlW25hbWVdO1xuICAgICAgdmFyIGNhY2hlZENvbXBvbmVudCA9IGNhY2hlZERhdGEgJiYgY2FjaGVkRGF0YS5jb21wb25lbnQ7XG4gICAgICBpZiAoY2FjaGVkQ29tcG9uZW50KSB7XG4gICAgICAgIC8vICMyMzAxXG4gICAgICAgIC8vIHBhc3MgcHJvcHNcbiAgICAgICAgaWYgKGNhY2hlZERhdGEuY29uZmlnUHJvcHMpIHtcbiAgICAgICAgICBmaWxsUHJvcHNpbkRhdGEoY2FjaGVkQ29tcG9uZW50LCBkYXRhLCBjYWNoZWREYXRhLnJvdXRlLCBjYWNoZWREYXRhLmNvbmZpZ1Byb3BzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaChjYWNoZWRDb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVuZGVyIHByZXZpb3VzIGVtcHR5IHZpZXdcbiAgICAgICAgcmV0dXJuIGgoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtYXRjaGVkID0gcm91dGUubWF0Y2hlZFtkZXB0aF07XG4gICAgdmFyIGNvbXBvbmVudCA9IG1hdGNoZWQgJiYgbWF0Y2hlZC5jb21wb25lbnRzW25hbWVdO1xuXG4gICAgLy8gcmVuZGVyIGVtcHR5IG5vZGUgaWYgbm8gbWF0Y2hlZCByb3V0ZSBvciBubyBjb25maWcgY29tcG9uZW50XG4gICAgaWYgKCFtYXRjaGVkIHx8ICFjb21wb25lbnQpIHtcbiAgICAgIGNhY2hlW25hbWVdID0gbnVsbDtcbiAgICAgIHJldHVybiBoKClcbiAgICB9XG5cbiAgICAvLyBjYWNoZSBjb21wb25lbnRcbiAgICBjYWNoZVtuYW1lXSA9IHsgY29tcG9uZW50OiBjb21wb25lbnQgfTtcblxuICAgIC8vIGF0dGFjaCBpbnN0YW5jZSByZWdpc3RyYXRpb24gaG9va1xuICAgIC8vIHRoaXMgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGluc3RhbmNlJ3MgaW5qZWN0ZWQgbGlmZWN5Y2xlIGhvb2tzXG4gICAgZGF0YS5yZWdpc3RlclJvdXRlSW5zdGFuY2UgPSBmdW5jdGlvbiAodm0sIHZhbCkge1xuICAgICAgLy8gdmFsIGNvdWxkIGJlIHVuZGVmaW5lZCBmb3IgdW5yZWdpc3RyYXRpb25cbiAgICAgIHZhciBjdXJyZW50ID0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV07XG4gICAgICBpZiAoXG4gICAgICAgICh2YWwgJiYgY3VycmVudCAhPT0gdm0pIHx8XG4gICAgICAgICghdmFsICYmIGN1cnJlbnQgPT09IHZtKVxuICAgICAgKSB7XG4gICAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFsc28gcmVnaXN0ZXIgaW5zdGFuY2UgaW4gcHJlcGF0Y2ggaG9va1xuICAgIC8vIGluIGNhc2UgdGhlIHNhbWUgY29tcG9uZW50IGluc3RhbmNlIGlzIHJldXNlZCBhY3Jvc3MgZGlmZmVyZW50IHJvdXRlc1xuICAgIDsoZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSkpLnByZXBhdGNoID0gZnVuY3Rpb24gKF8sIHZub2RlKSB7XG4gICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnN0YW5jZSBpbiBpbml0IGhvb2tcbiAgICAvLyBpbiBjYXNlIGtlcHQtYWxpdmUgY29tcG9uZW50IGJlIGFjdGl2ZWQgd2hlbiByb3V0ZXMgY2hhbmdlZFxuICAgIGRhdGEuaG9vay5pbml0ID0gZnVuY3Rpb24gKHZub2RlKSB7XG4gICAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUgJiZcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgIT09IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdXG4gICAgICApIHtcbiAgICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGNvbmZpZ1Byb3BzID0gbWF0Y2hlZC5wcm9wcyAmJiBtYXRjaGVkLnByb3BzW25hbWVdO1xuICAgIC8vIHNhdmUgcm91dGUgYW5kIGNvbmZpZ1Byb3BzIGluIGNhY2hjZVxuICAgIGlmIChjb25maWdQcm9wcykge1xuICAgICAgZXh0ZW5kKGNhY2hlW25hbWVdLCB7XG4gICAgICAgIHJvdXRlOiByb3V0ZSxcbiAgICAgICAgY29uZmlnUHJvcHM6IGNvbmZpZ1Byb3BzXG4gICAgICB9KTtcbiAgICAgIGZpbGxQcm9wc2luRGF0YShjb21wb25lbnQsIGRhdGEsIHJvdXRlLCBjb25maWdQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgoY29tcG9uZW50LCBkYXRhLCBjaGlsZHJlbilcbiAgfVxufTtcblxuZnVuY3Rpb24gZmlsbFByb3BzaW5EYXRhIChjb21wb25lbnQsIGRhdGEsIHJvdXRlLCBjb25maWdQcm9wcykge1xuICAvLyByZXNvbHZlIHByb3BzXG4gIHZhciBwcm9wc1RvUGFzcyA9IGRhdGEucHJvcHMgPSByZXNvbHZlUHJvcHMocm91dGUsIGNvbmZpZ1Byb3BzKTtcbiAgaWYgKHByb3BzVG9QYXNzKSB7XG4gICAgLy8gY2xvbmUgdG8gcHJldmVudCBtdXRhdGlvblxuICAgIHByb3BzVG9QYXNzID0gZGF0YS5wcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHNUb1Bhc3MpO1xuICAgIC8vIHBhc3Mgbm9uLWRlY2xhcmVkIHByb3BzIGFzIGF0dHJzXG4gICAgdmFyIGF0dHJzID0gZGF0YS5hdHRycyA9IGRhdGEuYXR0cnMgfHwge307XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzVG9QYXNzKSB7XG4gICAgICBpZiAoIWNvbXBvbmVudC5wcm9wcyB8fCAhKGtleSBpbiBjb21wb25lbnQucHJvcHMpKSB7XG4gICAgICAgIGF0dHJzW2tleV0gPSBwcm9wc1RvUGFzc1trZXldO1xuICAgICAgICBkZWxldGUgcHJvcHNUb1Bhc3Nba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVByb3BzIChyb3V0ZSwgY29uZmlnKSB7XG4gIHN3aXRjaCAodHlwZW9mIGNvbmZpZykge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGNvbmZpZ1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiBjb25maWcocm91dGUpXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gY29uZmlnID8gcm91dGUucGFyYW1zIDogdW5kZWZpbmVkXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJwcm9wcyBpbiBcXFwiXCIgKyAocm91dGUucGF0aCkgKyBcIlxcXCIgaXMgYSBcIiArICh0eXBlb2YgY29uZmlnKSArIFwiLCBcIiArXG4gICAgICAgICAgXCJleHBlY3RpbmcgYW4gb2JqZWN0LCBmdW5jdGlvbiBvciBib29sZWFuLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBlbmNvZGVSZXNlcnZlUkUgPSAvWyEnKCkqXS9nO1xudmFyIGVuY29kZVJlc2VydmVSZXBsYWNlciA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpOyB9O1xudmFyIGNvbW1hUkUgPSAvJTJDL2c7XG5cbi8vIGZpeGVkIGVuY29kZVVSSUNvbXBvbmVudCB3aGljaCBpcyBtb3JlIGNvbmZvcm1hbnQgdG8gUkZDMzk4Njpcbi8vIC0gZXNjYXBlcyBbIScoKSpdXG4vLyAtIHByZXNlcnZlIGNvbW1hc1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIC5yZXBsYWNlKGVuY29kZVJlc2VydmVSRSwgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyKVxuICAucmVwbGFjZShjb21tYVJFLCAnLCcpOyB9O1xuXG52YXIgZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuXG5mdW5jdGlvbiByZXNvbHZlUXVlcnkgKFxuICBxdWVyeSxcbiAgZXh0cmFRdWVyeSxcbiAgX3BhcnNlUXVlcnlcbikge1xuICBpZiAoIGV4dHJhUXVlcnkgPT09IHZvaWQgMCApIGV4dHJhUXVlcnkgPSB7fTtcblxuICB2YXIgcGFyc2UgPSBfcGFyc2VRdWVyeSB8fCBwYXJzZVF1ZXJ5O1xuICB2YXIgcGFyc2VkUXVlcnk7XG4gIHRyeSB7XG4gICAgcGFyc2VkUXVlcnkgPSBwYXJzZShxdWVyeSB8fCAnJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIGUubWVzc2FnZSk7XG4gICAgcGFyc2VkUXVlcnkgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gZXh0cmFRdWVyeSkge1xuICAgIHBhcnNlZFF1ZXJ5W2tleV0gPSBleHRyYVF1ZXJ5W2tleV07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFF1ZXJ5XG59XG5cbmZ1bmN0aW9uIHBhcnNlUXVlcnkgKHF1ZXJ5KSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBxdWVyeSA9IHF1ZXJ5LnRyaW0oKS5yZXBsYWNlKC9eKFxcP3wjfCYpLywgJycpO1xuXG4gIGlmICghcXVlcnkpIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBxdWVyeS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gZGVjb2RlKHBhcnRzLnNoaWZ0KCkpO1xuICAgIHZhciB2YWwgPSBwYXJ0cy5sZW5ndGggPiAwXG4gICAgICA/IGRlY29kZShwYXJ0cy5qb2luKCc9JykpXG4gICAgICA6IG51bGw7XG5cbiAgICBpZiAocmVzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzW2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1trZXldKSkge1xuICAgICAgcmVzW2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba2V5XSA9IFtyZXNba2V5XSwgdmFsXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkgKG9iaikge1xuICB2YXIgcmVzID0gb2JqID8gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWwgPSBvYmpba2V5XTtcblxuICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVuY29kZShrZXkpXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHtcbiAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwyID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbDIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKVxuICAgIH1cblxuICAgIHJldHVybiBlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwpXG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5sZW5ndGggPiAwOyB9KS5qb2luKCcmJykgOiBudWxsO1xuICByZXR1cm4gcmVzID8gKFwiP1wiICsgcmVzKSA6ICcnXG59XG5cbi8qICAqL1xuXG52YXIgdHJhaWxpbmdTbGFzaFJFID0gL1xcLz8kLztcblxuZnVuY3Rpb24gY3JlYXRlUm91dGUgKFxuICByZWNvcmQsXG4gIGxvY2F0aW9uLFxuICByZWRpcmVjdGVkRnJvbSxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuXG4gIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5IHx8IHt9O1xuICB0cnkge1xuICAgIHF1ZXJ5ID0gY2xvbmUocXVlcnkpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByb3V0ZSA9IHtcbiAgICBuYW1lOiBsb2NhdGlvbi5uYW1lIHx8IChyZWNvcmQgJiYgcmVjb3JkLm5hbWUpLFxuICAgIG1ldGE6IChyZWNvcmQgJiYgcmVjb3JkLm1ldGEpIHx8IHt9LFxuICAgIHBhdGg6IGxvY2F0aW9uLnBhdGggfHwgJy8nLFxuICAgIGhhc2g6IGxvY2F0aW9uLmhhc2ggfHwgJycsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHBhcmFtczogbG9jYXRpb24ucGFyYW1zIHx8IHt9LFxuICAgIGZ1bGxQYXRoOiBnZXRGdWxsUGF0aChsb2NhdGlvbiwgc3RyaW5naWZ5UXVlcnkpLFxuICAgIG1hdGNoZWQ6IHJlY29yZCA/IGZvcm1hdE1hdGNoKHJlY29yZCkgOiBbXVxuICB9O1xuICBpZiAocmVkaXJlY3RlZEZyb20pIHtcbiAgICByb3V0ZS5yZWRpcmVjdGVkRnJvbSA9IGdldEZ1bGxQYXRoKHJlZGlyZWN0ZWRGcm9tLCBzdHJpbmdpZnlRdWVyeSk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUocm91dGUpXG59XG5cbmZ1bmN0aW9uIGNsb25lICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGNsb25lKVxuICB9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICByZXNba2V5XSA9IGNsb25lKHZhbHVlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbn1cblxuLy8gdGhlIHN0YXJ0aW5nIHJvdXRlIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5pdGlhbCBzdGF0ZVxudmFyIFNUQVJUID0gY3JlYXRlUm91dGUobnVsbCwge1xuICBwYXRoOiAnLydcbn0pO1xuXG5mdW5jdGlvbiBmb3JtYXRNYXRjaCAocmVjb3JkKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgd2hpbGUgKHJlY29yZCkge1xuICAgIHJlcy51bnNoaWZ0KHJlY29yZCk7XG4gICAgcmVjb3JkID0gcmVjb3JkLnBhcmVudDtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldEZ1bGxQYXRoIChcbiAgcmVmLFxuICBfc3RyaW5naWZ5UXVlcnlcbikge1xuICB2YXIgcGF0aCA9IHJlZi5wYXRoO1xuICB2YXIgcXVlcnkgPSByZWYucXVlcnk7IGlmICggcXVlcnkgPT09IHZvaWQgMCApIHF1ZXJ5ID0ge307XG4gIHZhciBoYXNoID0gcmVmLmhhc2g7IGlmICggaGFzaCA9PT0gdm9pZCAwICkgaGFzaCA9ICcnO1xuXG4gIHZhciBzdHJpbmdpZnkgPSBfc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgc3RyaW5naWZ5KHF1ZXJ5KSArIGhhc2hcbn1cblxuZnVuY3Rpb24gaXNTYW1lUm91dGUgKGEsIGIpIHtcbiAgaWYgKGIgPT09IFNUQVJUKSB7XG4gICAgcmV0dXJuIGEgPT09IGJcbiAgfSBlbHNlIGlmICghYikge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKGEucGF0aCAmJiBiLnBhdGgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgPT09IGIucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpICYmXG4gICAgICBhLmhhc2ggPT09IGIuaGFzaCAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KVxuICAgIClcbiAgfSBlbHNlIGlmIChhLm5hbWUgJiYgYi5uYW1lKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGEubmFtZSA9PT0gYi5uYW1lICYmXG4gICAgICBhLmhhc2ggPT09IGIuaGFzaCAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KSAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnBhcmFtcywgYi5wYXJhbXMpXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RXF1YWwgKGEsIGIpIHtcbiAgaWYgKCBhID09PSB2b2lkIDAgKSBhID0ge307XG4gIGlmICggYiA9PT0gdm9pZCAwICkgYiA9IHt9O1xuXG4gIC8vIGhhbmRsZSBudWxsIHZhbHVlICMxNTY2XG4gIGlmICghYSB8fCAhYikgeyByZXR1cm4gYSA9PT0gYiB9XG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcbiAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgYVZhbCA9IGFba2V5XTtcbiAgICB2YXIgYlZhbCA9IGJba2V5XTtcbiAgICAvLyBjaGVjayBuZXN0ZWQgZXF1YWxpdHlcbiAgICBpZiAodHlwZW9mIGFWYWwgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiVmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0RXF1YWwoYVZhbCwgYlZhbClcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhhVmFsKSA9PT0gU3RyaW5nKGJWYWwpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGlzSW5jbHVkZWRSb3V0ZSAoY3VycmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiAoXG4gICAgY3VycmVudC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpLmluZGV4T2YoXG4gICAgICB0YXJnZXQucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJy8nKVxuICAgICkgPT09IDAgJiZcbiAgICAoIXRhcmdldC5oYXNoIHx8IGN1cnJlbnQuaGFzaCA9PT0gdGFyZ2V0Lmhhc2gpICYmXG4gICAgcXVlcnlJbmNsdWRlcyhjdXJyZW50LnF1ZXJ5LCB0YXJnZXQucXVlcnkpXG4gIClcbn1cblxuZnVuY3Rpb24gcXVlcnlJbmNsdWRlcyAoY3VycmVudCwgdGFyZ2V0KSB7XG4gIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICBpZiAoIShrZXkgaW4gY3VycmVudCkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGggKFxuICByZWxhdGl2ZSxcbiAgYmFzZSxcbiAgYXBwZW5kXG4pIHtcbiAgdmFyIGZpcnN0Q2hhciA9IHJlbGF0aXZlLmNoYXJBdCgwKTtcbiAgaWYgKGZpcnN0Q2hhciA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHJlbGF0aXZlXG4gIH1cblxuICBpZiAoZmlyc3RDaGFyID09PSAnPycgfHwgZmlyc3RDaGFyID09PSAnIycpIHtcbiAgICByZXR1cm4gYmFzZSArIHJlbGF0aXZlXG4gIH1cblxuICB2YXIgc3RhY2sgPSBiYXNlLnNwbGl0KCcvJyk7XG5cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNlZ21lbnQgaWY6XG4gIC8vIC0gbm90IGFwcGVuZGluZ1xuICAvLyAtIGFwcGVuZGluZyB0byB0cmFpbGluZyBzbGFzaCAobGFzdCBzZWdtZW50IGlzIGVtcHR5KVxuICBpZiAoIWFwcGVuZCB8fCAhc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIC8vIHJlc29sdmUgcmVsYXRpdmUgcGF0aFxuICB2YXIgc2VnbWVudHMgPSByZWxhdGl2ZS5yZXBsYWNlKC9eXFwvLywgJycpLnNwbGl0KCcvJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGlmIChzZWdtZW50ID09PSAnLi4nKSB7XG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09ICcuJykge1xuICAgICAgc3RhY2sucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBlbnN1cmUgbGVhZGluZyBzbGFzaFxuICBpZiAoc3RhY2tbMF0gIT09ICcnKSB7XG4gICAgc3RhY2sudW5zaGlmdCgnJyk7XG4gIH1cblxuICByZXR1cm4gc3RhY2suam9pbignLycpXG59XG5cbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgcXVlcnkgPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgIGhhc2ggPSBwYXRoLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxdWVyeUluZGV4ID49IDApIHtcbiAgICBxdWVyeSA9IHBhdGguc2xpY2UocXVlcnlJbmRleCArIDEpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIHF1ZXJ5SW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBoYXNoOiBoYXNoXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5QYXRoIChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcL1xcLy9nLCAnLycpXG59XG5cbnZhciBpc2FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbnZhciBwYXRoVG9SZWdleHBfMSA9IHBhdGhUb1JlZ2V4cDtcbnZhciBwYXJzZV8xID0gcGFyc2U7XG52YXIgY29tcGlsZV8xID0gY29tcGlsZTtcbnZhciB0b2tlbnNUb0Z1bmN0aW9uXzEgPSB0b2tlbnNUb0Z1bmN0aW9uO1xudmFyIHRva2Vuc1RvUmVnRXhwXzEgPSB0b2tlbnNUb1JlZ0V4cDtcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIga2V5ID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHBhdGggPSAnJztcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJztcbiAgdmFyIHJlcztcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdO1xuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdO1xuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXg7XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldCk7XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aDtcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV07XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XTtcbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdO1xuICAgIHZhciBuYW1lID0gcmVzWzNdO1xuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdO1xuICAgIHZhciBncm91cCA9IHJlc1s1XTtcbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl07XG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddO1xuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gICAgICBwYXRoID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4O1xuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlcjtcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXA7XG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pO1xuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KTtcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aCk7XG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnO1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9O1xuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuO1xuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV07XG4gICAgICB2YXIgc2VnbWVudDtcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSk7XG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKTtcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5cztcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpO1xuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSk7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpO1xuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlO1xuICB2YXIgcm91dGUgPSAnJztcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCk7XG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJztcblxuICAgICAga2V5cy5wdXNoKHRva2VuKTtcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKic7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJztcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJyk7XG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyO1xuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nO1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJztcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknO1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpO1xuICAgIGtleXMgPSBbXTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbnBhdGhUb1JlZ2V4cF8xLnBhcnNlID0gcGFyc2VfMTtcbnBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUgPSBjb21waWxlXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvbl8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cF8xO1xuXG4vKiAgKi9cblxuLy8gJGZsb3ctZGlzYWJsZS1saW5lXG52YXIgcmVnZXhwQ29tcGlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gZmlsbFBhcmFtcyAoXG4gIHBhdGgsXG4gIHBhcmFtcyxcbiAgcm91dGVNc2dcbikge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIHRyeSB7XG4gICAgdmFyIGZpbGxlciA9XG4gICAgICByZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gfHxcbiAgICAgIChyZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gPSBwYXRoVG9SZWdleHBfMS5jb21waWxlKHBhdGgpKTtcblxuICAgIC8vIEZpeCAjMjUwNSByZXNvbHZpbmcgYXN0ZXJpc2sgcm91dGVzIHsgbmFtZTogJ25vdC1mb3VuZCcsIHBhcmFtczogeyBwYXRoTWF0Y2g6ICcvbm90LWZvdW5kJyB9fVxuICAgIC8vIGFuZCBmaXggIzMxMDYgc28gdGhhdCB5b3UgY2FuIHdvcmsgd2l0aCBsb2NhdGlvbiBkZXNjcmlwdG9yIG9iamVjdCBoYXZpbmcgcGFyYW1zLnBhdGhNYXRjaCBlcXVhbCB0byBlbXB0eSBzdHJpbmdcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5wYXRoTWF0Y2ggPT09ICdzdHJpbmcnKSB7IHBhcmFtc1swXSA9IHBhcmFtcy5wYXRoTWF0Y2g7IH1cblxuICAgIHJldHVybiBmaWxsZXIocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEZpeCAjMzA3MiBubyB3YXJuIGlmIGBwYXRoTWF0Y2hgIGlzIHN0cmluZ1xuICAgICAgd2Fybih0eXBlb2YgcGFyYW1zLnBhdGhNYXRjaCA9PT0gJ3N0cmluZycsIChcIm1pc3NpbmcgcGFyYW0gZm9yIFwiICsgcm91dGVNc2cgKyBcIjogXCIgKyAoZS5tZXNzYWdlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBkZWxldGUgdGhlIDAgaWYgaXQgd2FzIGFkZGVkXG4gICAgZGVsZXRlIHBhcmFtc1swXTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24gKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIGFwcGVuZCxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIG5leHQgPSB0eXBlb2YgcmF3ID09PSAnc3RyaW5nJyA/IHsgcGF0aDogcmF3IH0gOiByYXc7XG4gIC8vIG5hbWVkIHRhcmdldFxuICBpZiAobmV4dC5fbm9ybWFsaXplZCkge1xuICAgIHJldHVybiBuZXh0XG4gIH0gZWxzZSBpZiAobmV4dC5uYW1lKSB7XG4gICAgbmV4dCA9IGV4dGVuZCh7fSwgcmF3KTtcbiAgICB2YXIgcGFyYW1zID0gbmV4dC5wYXJhbXM7XG4gICAgaWYgKHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0Jykge1xuICAgICAgbmV4dC5wYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0XG4gIH1cblxuICAvLyByZWxhdGl2ZSBwYXJhbXNcbiAgaWYgKCFuZXh0LnBhdGggJiYgbmV4dC5wYXJhbXMgJiYgY3VycmVudCkge1xuICAgIG5leHQgPSBleHRlbmQoe30sIG5leHQpO1xuICAgIG5leHQuX25vcm1hbGl6ZWQgPSB0cnVlO1xuICAgIHZhciBwYXJhbXMkMSA9IGV4dGVuZChleHRlbmQoe30sIGN1cnJlbnQucGFyYW1zKSwgbmV4dC5wYXJhbXMpO1xuICAgIGlmIChjdXJyZW50Lm5hbWUpIHtcbiAgICAgIG5leHQubmFtZSA9IGN1cnJlbnQubmFtZTtcbiAgICAgIG5leHQucGFyYW1zID0gcGFyYW1zJDE7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50Lm1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgcmF3UGF0aCA9IGN1cnJlbnQubWF0Y2hlZFtjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aDtcbiAgICAgIG5leHQucGF0aCA9IGZpbGxQYXJhbXMocmF3UGF0aCwgcGFyYW1zJDEsIChcInBhdGggXCIgKyAoY3VycmVudC5wYXRoKSkpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgXCJyZWxhdGl2ZSBwYXJhbXMgbmF2aWdhdGlvbiByZXF1aXJlcyBhIGN1cnJlbnQgcm91dGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgdmFyIHBhcnNlZFBhdGggPSBwYXJzZVBhdGgobmV4dC5wYXRoIHx8ICcnKTtcbiAgdmFyIGJhc2VQYXRoID0gKGN1cnJlbnQgJiYgY3VycmVudC5wYXRoKSB8fCAnLyc7XG4gIHZhciBwYXRoID0gcGFyc2VkUGF0aC5wYXRoXG4gICAgPyByZXNvbHZlUGF0aChwYXJzZWRQYXRoLnBhdGgsIGJhc2VQYXRoLCBhcHBlbmQgfHwgbmV4dC5hcHBlbmQpXG4gICAgOiBiYXNlUGF0aDtcblxuICB2YXIgcXVlcnkgPSByZXNvbHZlUXVlcnkoXG4gICAgcGFyc2VkUGF0aC5xdWVyeSxcbiAgICBuZXh0LnF1ZXJ5LFxuICAgIHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5wYXJzZVF1ZXJ5XG4gICk7XG5cbiAgdmFyIGhhc2ggPSBuZXh0Lmhhc2ggfHwgcGFyc2VkUGF0aC5oYXNoO1xuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgaGFzaCA9IFwiI1wiICsgaGFzaDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbi8qICAqL1xuXG4vLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1Z1xudmFyIHRvVHlwZXMgPSBbU3RyaW5nLCBPYmplY3RdO1xudmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbnZhciBMaW5rID0ge1xuICBuYW1lOiAnUm91dGVyTGluaycsXG4gIHByb3BzOiB7XG4gICAgdG86IHtcbiAgICAgIHR5cGU6IHRvVHlwZXMsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnYSdcbiAgICB9LFxuICAgIGV4YWN0OiBCb29sZWFuLFxuICAgIGFwcGVuZDogQm9vbGVhbixcbiAgICByZXBsYWNlOiBCb29sZWFuLFxuICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGV2ZW50OiB7XG4gICAgICB0eXBlOiBldmVudFR5cGVzLFxuICAgICAgZGVmYXVsdDogJ2NsaWNrJ1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByb3V0ZXIgPSB0aGlzLiRyb3V0ZXI7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLiRyb3V0ZTtcbiAgICB2YXIgcmVmID0gcm91dGVyLnJlc29sdmUoXG4gICAgICB0aGlzLnRvLFxuICAgICAgY3VycmVudCxcbiAgICAgIHRoaXMuYXBwZW5kXG4gICAgKTtcbiAgICB2YXIgbG9jYXRpb24gPSByZWYubG9jYXRpb247XG4gICAgdmFyIHJvdXRlID0gcmVmLnJvdXRlO1xuICAgIHZhciBocmVmID0gcmVmLmhyZWY7XG5cbiAgICB2YXIgY2xhc3NlcyA9IHt9O1xuICAgIHZhciBnbG9iYWxBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcztcbiAgICB2YXIgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIC8vIFN1cHBvcnQgZ2xvYmFsIGVtcHR5IGFjdGl2ZSBjbGFzc1xuICAgIHZhciBhY3RpdmVDbGFzc0ZhbGxiYWNrID1cbiAgICAgIGdsb2JhbEFjdGl2ZUNsYXNzID09IG51bGwgPyAncm91dGVyLWxpbmstYWN0aXZlJyA6IGdsb2JhbEFjdGl2ZUNsYXNzO1xuICAgIHZhciBleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2sgPVxuICAgICAgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgID8gJ3JvdXRlci1saW5rLWV4YWN0LWFjdGl2ZSdcbiAgICAgICAgOiBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIHZhciBhY3RpdmVDbGFzcyA9XG4gICAgICB0aGlzLmFjdGl2ZUNsYXNzID09IG51bGwgPyBhY3RpdmVDbGFzc0ZhbGxiYWNrIDogdGhpcy5hY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzcyA9XG4gICAgICB0aGlzLmV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgICA/IGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFja1xuICAgICAgICA6IHRoaXMuZXhhY3RBY3RpdmVDbGFzcztcblxuICAgIHZhciBjb21wYXJlVGFyZ2V0ID0gcm91dGUucmVkaXJlY3RlZEZyb21cbiAgICAgID8gY3JlYXRlUm91dGUobnVsbCwgbm9ybWFsaXplTG9jYXRpb24ocm91dGUucmVkaXJlY3RlZEZyb20pLCBudWxsLCByb3V0ZXIpXG4gICAgICA6IHJvdXRlO1xuXG4gICAgY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXSA9IGlzU2FtZVJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpO1xuICAgIGNsYXNzZXNbYWN0aXZlQ2xhc3NdID0gdGhpcy5leGFjdFxuICAgICAgPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICA6IGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7XG4gICAgICAgIGlmICh0aGlzJDEucmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlci5yZXBsYWNlKGxvY2F0aW9uLCBub29wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChsb2NhdGlvbiwgbm9vcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG9uID0geyBjbGljazogZ3VhcmRFdmVudCB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgb25bZV0gPSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uW3RoaXMuZXZlbnRdID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHsgY2xhc3M6IGNsYXNzZXMgfTtcblxuICAgIHZhciBzY29wZWRTbG90ID1cbiAgICAgICF0aGlzLiRzY29wZWRTbG90cy4kaGFzTm9ybWFsICYmXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0ICYmXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0KHtcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBuYXZpZ2F0ZTogaGFuZGxlcixcbiAgICAgICAgaXNBY3RpdmU6IGNsYXNzZXNbYWN0aXZlQ2xhc3NdLFxuICAgICAgICBpc0V4YWN0QWN0aXZlOiBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICB9KTtcblxuICAgIGlmIChzY29wZWRTbG90KSB7XG4gICAgICBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHNjb3BlZFNsb3RbMF1cbiAgICAgIH0gZWxzZSBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPiAxIHx8ICFzY29wZWRTbG90Lmxlbmd0aCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIChcIlJvdXRlckxpbmsgd2l0aCB0bz1cXFwiXCIgKyAodGhpcy50bykgKyBcIlxcXCIgaXMgdHJ5aW5nIHRvIHVzZSBhIHNjb3BlZCBzbG90IGJ1dCBpdCBkaWRuJ3QgcHJvdmlkZSBleGFjdGx5IG9uZSBjaGlsZC4gV3JhcHBpbmcgdGhlIGNvbnRlbnQgd2l0aCBhIHNwYW4gZWxlbWVudC5cIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZWRTbG90Lmxlbmd0aCA9PT0gMCA/IGgoKSA6IGgoJ3NwYW4nLCB7fSwgc2NvcGVkU2xvdClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy50YWcgPT09ICdhJykge1xuICAgICAgZGF0YS5vbiA9IG9uO1xuICAgICAgZGF0YS5hdHRycyA9IHsgaHJlZjogaHJlZiB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaW5kIHRoZSBmaXJzdCA8YT4gY2hpbGQgYW5kIGFwcGx5IGxpc3RlbmVyIGFuZCBocmVmXG4gICAgICB2YXIgYSA9IGZpbmRBbmNob3IodGhpcy4kc2xvdHMuZGVmYXVsdCk7XG4gICAgICBpZiAoYSkge1xuICAgICAgICAvLyBpbiBjYXNlIHRoZSA8YT4gaXMgYSBzdGF0aWMgbm9kZVxuICAgICAgICBhLmlzU3RhdGljID0gZmFsc2U7XG4gICAgICAgIHZhciBhRGF0YSA9IChhLmRhdGEgPSBleHRlbmQoe30sIGEuZGF0YSkpO1xuICAgICAgICBhRGF0YS5vbiA9IGFEYXRhLm9uIHx8IHt9O1xuICAgICAgICAvLyB0cmFuc2Zvcm0gZXhpc3RpbmcgZXZlbnRzIGluIGJvdGggb2JqZWN0cyBpbnRvIGFycmF5cyBzbyB3ZSBjYW4gcHVzaCBsYXRlclxuICAgICAgICBmb3IgKHZhciBldmVudCBpbiBhRGF0YS5vbikge1xuICAgICAgICAgIHZhciBoYW5kbGVyJDEgPSBhRGF0YS5vbltldmVudF07XG4gICAgICAgICAgaWYgKGV2ZW50IGluIG9uKSB7XG4gICAgICAgICAgICBhRGF0YS5vbltldmVudF0gPSBBcnJheS5pc0FycmF5KGhhbmRsZXIkMSkgPyBoYW5kbGVyJDEgOiBbaGFuZGxlciQxXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwZW5kIG5ldyBsaXN0ZW5lcnMgZm9yIHJvdXRlci1saW5rXG4gICAgICAgIGZvciAodmFyIGV2ZW50JDEgaW4gb24pIHtcbiAgICAgICAgICBpZiAoZXZlbnQkMSBpbiBhRGF0YS5vbikge1xuICAgICAgICAgICAgLy8gb25bZXZlbnRdIGlzIGFsd2F5cyBhIGZ1bmN0aW9uXG4gICAgICAgICAgICBhRGF0YS5vbltldmVudCQxXS5wdXNoKG9uW2V2ZW50JDFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYURhdGEub25bZXZlbnQkMV0gPSBoYW5kbGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhQXR0cnMgPSAoYS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhLmRhdGEuYXR0cnMpKTtcbiAgICAgICAgYUF0dHJzLmhyZWYgPSBocmVmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG9lc24ndCBoYXZlIDxhPiBjaGlsZCwgYXBwbHkgbGlzdGVuZXIgdG8gc2VsZlxuICAgICAgICBkYXRhLm9uID0gb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGhpcy50YWcsIGRhdGEsIHRoaXMuJHNsb3RzLmRlZmF1bHQpXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGd1YXJkRXZlbnQgKGUpIHtcbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2l0aCBjb250cm9sIGtleXNcbiAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCB3aGVuIHByZXZlbnREZWZhdWx0IGNhbGxlZFxuICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXG4gIGlmIChlLmJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9uICE9PSAwKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IGlmIGB0YXJnZXQ9XCJfYmxhbmtcImBcbiAgaWYgKGUuY3VycmVudFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuICAgIGlmICgvXFxiX2JsYW5rXFxiL2kudGVzdCh0YXJnZXQpKSB7IHJldHVybiB9XG4gIH1cbiAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxuICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaW5kQW5jaG9yIChjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICdhJykge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiAoY2hpbGQgPSBmaW5kQW5jaG9yKGNoaWxkLmNoaWxkcmVuKSkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBfVnVlO1xuXG5mdW5jdGlvbiBpbnN0YWxsIChWdWUpIHtcbiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkICYmIF9WdWUgPT09IFZ1ZSkgeyByZXR1cm4gfVxuICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7XG5cbiAgX1Z1ZSA9IFZ1ZTtcblxuICB2YXIgaXNEZWYgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdiAhPT0gdW5kZWZpbmVkOyB9O1xuXG4gIHZhciByZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCBjYWxsVmFsKSB7XG4gICAgdmFyIGkgPSB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gICAgaWYgKGlzRGVmKGkpICYmIGlzRGVmKGkgPSBpLmRhdGEpICYmIGlzRGVmKGkgPSBpLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSkpIHtcbiAgICAgIGkodm0sIGNhbGxWYWwpO1xuICAgIH1cbiAgfTtcblxuICBWdWUubWl4aW4oe1xuICAgIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gYmVmb3JlQ3JlYXRlICgpIHtcbiAgICAgIGlmIChpc0RlZih0aGlzLiRvcHRpb25zLnJvdXRlcikpIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JvdXRlciA9IHRoaXMuJG9wdGlvbnMucm91dGVyO1xuICAgICAgICB0aGlzLl9yb3V0ZXIuaW5pdCh0aGlzKTtcbiAgICAgICAgVnVlLnV0aWwuZGVmaW5lUmVhY3RpdmUodGhpcywgJ19yb3V0ZScsIHRoaXMuX3JvdXRlci5oaXN0b3J5LmN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9ICh0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50Ll9yb3V0ZXJSb290KSB8fCB0aGlzO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCB0aGlzKTtcbiAgICB9LFxuICAgIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRyb3V0ZXInLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGVyIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGUgfVxuICB9KTtcblxuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJWaWV3JywgVmlldyk7XG4gIFZ1ZS5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBMaW5rKTtcblxuICB2YXIgc3RyYXRzID0gVnVlLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG4gIC8vIHVzZSB0aGUgc2FtZSBob29rIG1lcmdpbmcgc3RyYXRlZ3kgZm9yIHJvdXRlIGhvb2tzXG4gIHN0cmF0cy5iZWZvcmVSb3V0ZUVudGVyID0gc3RyYXRzLmJlZm9yZVJvdXRlTGVhdmUgPSBzdHJhdHMuYmVmb3JlUm91dGVVcGRhdGUgPSBzdHJhdHMuY3JlYXRlZDtcbn1cblxuLyogICovXG5cbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlTWFwIChcbiAgcm91dGVzLFxuICBvbGRQYXRoTGlzdCxcbiAgb2xkUGF0aE1hcCxcbiAgb2xkTmFtZU1hcFxuKSB7XG4gIC8vIHRoZSBwYXRoIGxpc3QgaXMgdXNlZCB0byBjb250cm9sIHBhdGggbWF0Y2hpbmcgcHJpb3JpdHlcbiAgdmFyIHBhdGhMaXN0ID0gb2xkUGF0aExpc3QgfHwgW107XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgcGF0aE1hcCA9IG9sZFBhdGhNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciBuYW1lTWFwID0gb2xkTmFtZU1hcCB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJvdXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCByb3V0ZSk7XG4gIH0pO1xuXG4gIC8vIGVuc3VyZSB3aWxkY2FyZCByb3V0ZXMgYXJlIGFsd2F5cyBhdCB0aGUgZW5kXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGF0aExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHBhdGhMaXN0W2ldID09PSAnKicpIHtcbiAgICAgIHBhdGhMaXN0LnB1c2gocGF0aExpc3Quc3BsaWNlKGksIDEpWzBdKTtcbiAgICAgIGwtLTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAvLyB3YXJuIGlmIHJvdXRlcyBkbyBub3QgaW5jbHVkZSBsZWFkaW5nIHNsYXNoZXNcbiAgICB2YXIgZm91bmQgPSBwYXRoTGlzdFxuICAgIC8vIGNoZWNrIGZvciBtaXNzaW5nIGxlYWRpbmcgc2xhc2hcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhdGgpIHsgcmV0dXJuIHBhdGggJiYgcGF0aC5jaGFyQXQoMCkgIT09ICcqJyAmJiBwYXRoLmNoYXJBdCgwKSAhPT0gJy8nOyB9KTtcblxuICAgIGlmIChmb3VuZC5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgcGF0aE5hbWVzID0gZm91bmQubWFwKGZ1bmN0aW9uIChwYXRoKSB7IHJldHVybiAoXCItIFwiICsgcGF0aCk7IH0pLmpvaW4oJ1xcbicpO1xuICAgICAgd2FybihmYWxzZSwgKFwiTm9uLW5lc3RlZCByb3V0ZXMgbXVzdCBpbmNsdWRlIGEgbGVhZGluZyBzbGFzaCBjaGFyYWN0ZXIuIEZpeCB0aGUgZm9sbG93aW5nIHJvdXRlczogXFxuXCIgKyBwYXRoTmFtZXMpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhMaXN0OiBwYXRoTGlzdCxcbiAgICBwYXRoTWFwOiBwYXRoTWFwLFxuICAgIG5hbWVNYXA6IG5hbWVNYXBcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRSb3V0ZVJlY29yZCAoXG4gIHBhdGhMaXN0LFxuICBwYXRoTWFwLFxuICBuYW1lTWFwLFxuICByb3V0ZSxcbiAgcGFyZW50LFxuICBtYXRjaEFzXG4pIHtcbiAgdmFyIHBhdGggPSByb3V0ZS5wYXRoO1xuICB2YXIgbmFtZSA9IHJvdXRlLm5hbWU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHBhdGggIT0gbnVsbCwgXCJcXFwicGF0aFxcXCIgaXMgcmVxdWlyZWQgaW4gYSByb3V0ZSBjb25maWd1cmF0aW9uLlwiKTtcbiAgICBhc3NlcnQoXG4gICAgICB0eXBlb2Ygcm91dGUuY29tcG9uZW50ICE9PSAnc3RyaW5nJyxcbiAgICAgIFwicm91dGUgY29uZmlnIFxcXCJjb21wb25lbnRcXFwiIGZvciBwYXRoOiBcIiArIChTdHJpbmcoXG4gICAgICAgIHBhdGggfHwgbmFtZVxuICAgICAgKSkgKyBcIiBjYW5ub3QgYmUgYSBcIiArIFwic3RyaW5nIGlkLiBVc2UgYW4gYWN0dWFsIGNvbXBvbmVudCBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuXG4gIHZhciBwYXRoVG9SZWdleHBPcHRpb25zID1cbiAgICByb3V0ZS5wYXRoVG9SZWdleHBPcHRpb25zIHx8IHt9O1xuICB2YXIgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVQYXRoKHBhdGgsIHBhcmVudCwgcGF0aFRvUmVnZXhwT3B0aW9ucy5zdHJpY3QpO1xuXG4gIGlmICh0eXBlb2Ygcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcGF0aFRvUmVnZXhwT3B0aW9ucy5zZW5zaXRpdmUgPSByb3V0ZS5jYXNlU2Vuc2l0aXZlO1xuICB9XG5cbiAgdmFyIHJlY29yZCA9IHtcbiAgICBwYXRoOiBub3JtYWxpemVkUGF0aCxcbiAgICByZWdleDogY29tcGlsZVJvdXRlUmVnZXgobm9ybWFsaXplZFBhdGgsIHBhdGhUb1JlZ2V4cE9wdGlvbnMpLFxuICAgIGNvbXBvbmVudHM6IHJvdXRlLmNvbXBvbmVudHMgfHwgeyBkZWZhdWx0OiByb3V0ZS5jb21wb25lbnQgfSxcbiAgICBpbnN0YW5jZXM6IHt9LFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgbWF0Y2hBczogbWF0Y2hBcyxcbiAgICByZWRpcmVjdDogcm91dGUucmVkaXJlY3QsXG4gICAgYmVmb3JlRW50ZXI6IHJvdXRlLmJlZm9yZUVudGVyLFxuICAgIG1ldGE6IHJvdXRlLm1ldGEgfHwge30sXG4gICAgcHJvcHM6XG4gICAgICByb3V0ZS5wcm9wcyA9PSBudWxsXG4gICAgICAgID8ge31cbiAgICAgICAgOiByb3V0ZS5jb21wb25lbnRzXG4gICAgICAgICAgPyByb3V0ZS5wcm9wc1xuICAgICAgICAgIDogeyBkZWZhdWx0OiByb3V0ZS5wcm9wcyB9XG4gIH07XG5cbiAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgLy8gV2FybiBpZiByb3V0ZSBpcyBuYW1lZCwgZG9lcyBub3QgcmVkaXJlY3QgYW5kIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuXG4gICAgLy8gSWYgdXNlcnMgbmF2aWdhdGUgdG8gdGhpcyByb3V0ZSBieSBuYW1lLCB0aGUgZGVmYXVsdCBjaGlsZCB3aWxsXG4gICAgLy8gbm90IGJlIHJlbmRlcmVkIChHSCBJc3N1ZSAjNjI5KVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHJvdXRlLm5hbWUgJiZcbiAgICAgICAgIXJvdXRlLnJlZGlyZWN0ICYmXG4gICAgICAgIHJvdXRlLmNoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiAvXlxcLz8kLy50ZXN0KGNoaWxkLnBhdGgpOyB9KVxuICAgICAgKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJOYW1lZCBSb3V0ZSAnXCIgKyAocm91dGUubmFtZSkgKyBcIicgaGFzIGEgZGVmYXVsdCBjaGlsZCByb3V0ZS4gXCIgK1xuICAgICAgICAgICAgXCJXaGVuIG5hdmlnYXRpbmcgdG8gdGhpcyBuYW1lZCByb3V0ZSAoOnRvPVxcXCJ7bmFtZTogJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInXFxcIiksIFwiICtcbiAgICAgICAgICAgIFwidGhlIGRlZmF1bHQgY2hpbGQgcm91dGUgd2lsbCBub3QgYmUgcmVuZGVyZWQuIFJlbW92ZSB0aGUgbmFtZSBmcm9tIFwiICtcbiAgICAgICAgICAgIFwidGhpcyByb3V0ZSBhbmQgdXNlIHRoZSBuYW1lIG9mIHRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIGZvciBuYW1lZCBcIiArXG4gICAgICAgICAgICBcImxpbmtzIGluc3RlYWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm91dGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHZhciBjaGlsZE1hdGNoQXMgPSBtYXRjaEFzXG4gICAgICAgID8gY2xlYW5QYXRoKChtYXRjaEFzICsgXCIvXCIgKyAoY2hpbGQucGF0aCkpKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBjaGlsZCwgcmVjb3JkLCBjaGlsZE1hdGNoQXMpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFwYXRoTWFwW3JlY29yZC5wYXRoXSkge1xuICAgIHBhdGhMaXN0LnB1c2gocmVjb3JkLnBhdGgpO1xuICAgIHBhdGhNYXBbcmVjb3JkLnBhdGhdID0gcmVjb3JkO1xuICB9XG5cbiAgaWYgKHJvdXRlLmFsaWFzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgYWxpYXNlcyA9IEFycmF5LmlzQXJyYXkocm91dGUuYWxpYXMpID8gcm91dGUuYWxpYXMgOiBbcm91dGUuYWxpYXNdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxpYXNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGFsaWFzID0gYWxpYXNlc1tpXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFsaWFzID09PSBwYXRoKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgKFwiRm91bmQgYW4gYWxpYXMgd2l0aCB0aGUgc2FtZSB2YWx1ZSBhcyB0aGUgcGF0aDogXFxcIlwiICsgcGF0aCArIFwiXFxcIi4gWW91IGhhdmUgdG8gcmVtb3ZlIHRoYXQgYWxpYXMuIEl0IHdpbGwgYmUgaWdub3JlZCBpbiBkZXZlbG9wbWVudC5cIilcbiAgICAgICAgKTtcbiAgICAgICAgLy8gc2tpcCBpbiBkZXYgdG8gbWFrZSBpdCB3b3JrXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciBhbGlhc1JvdXRlID0ge1xuICAgICAgICBwYXRoOiBhbGlhcyxcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuXG4gICAgICB9O1xuICAgICAgYWRkUm91dGVSZWNvcmQoXG4gICAgICAgIHBhdGhMaXN0LFxuICAgICAgICBwYXRoTWFwLFxuICAgICAgICBuYW1lTWFwLFxuICAgICAgICBhbGlhc1JvdXRlLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIHJlY29yZC5wYXRoIHx8ICcvJyAvLyBtYXRjaEFzXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChuYW1lKSB7XG4gICAgaWYgKCFuYW1lTWFwW25hbWVdKSB7XG4gICAgICBuYW1lTWFwW25hbWVdID0gcmVjb3JkO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbWF0Y2hBcykge1xuICAgICAgd2FybihcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIFwiRHVwbGljYXRlIG5hbWVkIHJvdXRlcyBkZWZpbml0aW9uOiBcIiArXG4gICAgICAgICAgXCJ7IG5hbWU6IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIsIHBhdGg6IFxcXCJcIiArIChyZWNvcmQucGF0aCkgKyBcIlxcXCIgfVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21waWxlUm91dGVSZWdleCAoXG4gIHBhdGgsXG4gIHBhdGhUb1JlZ2V4cE9wdGlvbnNcbikge1xuICB2YXIgcmVnZXggPSBwYXRoVG9SZWdleHBfMShwYXRoLCBbXSwgcGF0aFRvUmVnZXhwT3B0aW9ucyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJlZ2V4LmtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB3YXJuKFxuICAgICAgICAha2V5c1trZXkubmFtZV0sXG4gICAgICAgIChcIkR1cGxpY2F0ZSBwYXJhbSBrZXlzIGluIHJvdXRlIHdpdGggcGF0aDogXFxcIlwiICsgcGF0aCArIFwiXFxcIlwiKVxuICAgICAgKTtcbiAgICAgIGtleXNba2V5Lm5hbWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVnZXhcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUGF0aCAoXG4gIHBhdGgsXG4gIHBhcmVudCxcbiAgc3RyaWN0XG4pIHtcbiAgaWYgKCFzdHJpY3QpIHsgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwvJC8sICcnKTsgfVxuICBpZiAocGF0aFswXSA9PT0gJy8nKSB7IHJldHVybiBwYXRoIH1cbiAgaWYgKHBhcmVudCA9PSBudWxsKSB7IHJldHVybiBwYXRoIH1cbiAgcmV0dXJuIGNsZWFuUGF0aCgoKHBhcmVudC5wYXRoKSArIFwiL1wiICsgcGF0aCkpXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gY3JlYXRlTWF0Y2hlciAoXG4gIHJvdXRlcyxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHJlZiA9IGNyZWF0ZVJvdXRlTWFwKHJvdXRlcyk7XG4gIHZhciBwYXRoTGlzdCA9IHJlZi5wYXRoTGlzdDtcbiAgdmFyIHBhdGhNYXAgPSByZWYucGF0aE1hcDtcbiAgdmFyIG5hbWVNYXAgPSByZWYubmFtZU1hcDtcblxuICBmdW5jdGlvbiBhZGRSb3V0ZXMgKHJvdXRlcykge1xuICAgIGNyZWF0ZVJvdXRlTWFwKHJvdXRlcywgcGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXApO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF0Y2ggKFxuICAgIHJhdyxcbiAgICBjdXJyZW50Um91dGUsXG4gICAgcmVkaXJlY3RlZEZyb21cbiAgKSB7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24ocmF3LCBjdXJyZW50Um91dGUsIGZhbHNlLCByb3V0ZXIpO1xuICAgIHZhciBuYW1lID0gbG9jYXRpb24ubmFtZTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4ocmVjb3JkLCAoXCJSb3V0ZSB3aXRoIG5hbWUgJ1wiICsgbmFtZSArIFwiJyBkb2VzIG5vdCBleGlzdFwiKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlY29yZCkgeyByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKSB9XG4gICAgICB2YXIgcGFyYW1OYW1lcyA9IHJlY29yZC5yZWdleC5rZXlzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gIWtleS5vcHRpb25hbDsgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkubmFtZTsgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24ucGFyYW1zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBsb2NhdGlvbi5wYXJhbXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRSb3V0ZSAmJiB0eXBlb2YgY3VycmVudFJvdXRlLnBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGN1cnJlbnRSb3V0ZS5wYXJhbXMpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gbG9jYXRpb24ucGFyYW1zKSAmJiBwYXJhbU5hbWVzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5wYXJhbXNba2V5XSA9IGN1cnJlbnRSb3V0ZS5wYXJhbXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbG9jYXRpb24ucGF0aCA9IGZpbGxQYXJhbXMocmVjb3JkLnBhdGgsIGxvY2F0aW9uLnBhcmFtcywgKFwibmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aCkge1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aExpc3RbaV07XG4gICAgICAgIHZhciByZWNvcmQkMSA9IHBhdGhNYXBbcGF0aF07XG4gICAgICAgIGlmIChtYXRjaFJvdXRlKHJlY29yZCQxLnJlZ2V4LCBsb2NhdGlvbi5wYXRoLCBsb2NhdGlvbi5wYXJhbXMpKSB7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQkMSwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG5vIG1hdGNoXG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZGlyZWN0IChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb25cbiAgKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVkaXJlY3QgPSByZWNvcmQucmVkaXJlY3Q7XG4gICAgdmFyIHJlZGlyZWN0ID0gdHlwZW9mIG9yaWdpbmFsUmVkaXJlY3QgPT09ICdmdW5jdGlvbidcbiAgICAgID8gb3JpZ2luYWxSZWRpcmVjdChjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpKVxuICAgICAgOiBvcmlnaW5hbFJlZGlyZWN0O1xuXG4gICAgaWYgKHR5cGVvZiByZWRpcmVjdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlZGlyZWN0ID0geyBwYXRoOiByZWRpcmVjdCB9O1xuICAgIH1cblxuICAgIGlmICghcmVkaXJlY3QgfHwgdHlwZW9mIHJlZGlyZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSwgKFwiaW52YWxpZCByZWRpcmVjdCBvcHRpb246IFwiICsgKEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cblxuICAgIHZhciByZSA9IHJlZGlyZWN0O1xuICAgIHZhciBuYW1lID0gcmUubmFtZTtcbiAgICB2YXIgcGF0aCA9IHJlLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXJhbXMgPSBsb2NhdGlvbi5wYXJhbXM7XG4gICAgcXVlcnkgPSByZS5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSA/IHJlLnF1ZXJ5IDogcXVlcnk7XG4gICAgaGFzaCA9IHJlLmhhc093blByb3BlcnR5KCdoYXNoJykgPyByZS5oYXNoIDogaGFzaDtcbiAgICBwYXJhbXMgPSByZS5oYXNPd25Qcm9wZXJ0eSgncGFyYW1zJykgPyByZS5wYXJhbXMgOiBwYXJhbXM7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgLy8gcmVzb2x2ZWQgbmFtZWQgZGlyZWN0XG4gICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydCh0YXJnZXRSZWNvcmQsIChcInJlZGlyZWN0IGZhaWxlZDogbmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBub3QgZm91bmQuXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaCh7XG4gICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2gsXG4gICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSBpZiAocGF0aCkge1xuICAgICAgLy8gMS4gcmVzb2x2ZSByZWxhdGl2ZSByZWRpcmVjdFxuICAgICAgdmFyIHJhd1BhdGggPSByZXNvbHZlUmVjb3JkUGF0aChwYXRoLCByZWNvcmQpO1xuICAgICAgLy8gMi4gcmVzb2x2ZSBwYXJhbXNcbiAgICAgIHZhciByZXNvbHZlZFBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicmVkaXJlY3Qgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIHJhd1BhdGggKyBcIlxcXCJcIikpO1xuICAgICAgLy8gMy4gcmVtYXRjaCB3aXRoIGV4aXN0aW5nIHF1ZXJ5IGFuZCBoYXNoXG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2hcbiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFsaWFzIChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb24sXG4gICAgbWF0Y2hBc1xuICApIHtcbiAgICB2YXIgYWxpYXNlZFBhdGggPSBmaWxsUGFyYW1zKG1hdGNoQXMsIGxvY2F0aW9uLnBhcmFtcywgKFwiYWxpYXNlZCByb3V0ZSB3aXRoIHBhdGggXFxcIlwiICsgbWF0Y2hBcyArIFwiXFxcIlwiKSk7XG4gICAgdmFyIGFsaWFzZWRNYXRjaCA9IG1hdGNoKHtcbiAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgcGF0aDogYWxpYXNlZFBhdGhcbiAgICB9KTtcbiAgICBpZiAoYWxpYXNlZE1hdGNoKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9IGFsaWFzZWRNYXRjaC5tYXRjaGVkO1xuICAgICAgdmFyIGFsaWFzZWRSZWNvcmQgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07XG4gICAgICBsb2NhdGlvbi5wYXJhbXMgPSBhbGlhc2VkTWF0Y2gucGFyYW1zO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShhbGlhc2VkUmVjb3JkLCBsb2NhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVSb3V0ZSAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLnJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gcmVkaXJlY3QocmVjb3JkLCByZWRpcmVjdGVkRnJvbSB8fCBsb2NhdGlvbilcbiAgICB9XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQubWF0Y2hBcykge1xuICAgICAgcmV0dXJuIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIHJlY29yZC5tYXRjaEFzKVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcilcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGFkZFJvdXRlczogYWRkUm91dGVzXG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZSAoXG4gIHJlZ2V4LFxuICBwYXRoLFxuICBwYXJhbXNcbikge1xuICB2YXIgbSA9IHBhdGgubWF0Y2gocmVnZXgpO1xuXG4gIGlmICghbSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IG0ubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIga2V5ID0gcmVnZXgua2V5c1tpIC0gMV07XG4gICAgdmFyIHZhbCA9IHR5cGVvZiBtW2ldID09PSAnc3RyaW5nJyA/IGRlY29kZVVSSUNvbXBvbmVudChtW2ldKSA6IG1baV07XG4gICAgaWYgKGtleSkge1xuICAgICAgLy8gRml4ICMxOTk0OiB1c2luZyAqIHdpdGggcHJvcHM6IHRydWUgZ2VuZXJhdGVzIGEgcGFyYW0gbmFtZWQgMFxuICAgICAgcGFyYW1zW2tleS5uYW1lIHx8ICdwYXRoTWF0Y2gnXSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUmVjb3JkUGF0aCAocGF0aCwgcmVjb3JkKSB7XG4gIHJldHVybiByZXNvbHZlUGF0aChwYXRoLCByZWNvcmQucGFyZW50ID8gcmVjb3JkLnBhcmVudC5wYXRoIDogJy8nLCB0cnVlKVxufVxuXG4vKiAgKi9cblxuLy8gdXNlIFVzZXIgVGltaW5nIGFwaSAoaWYgcHJlc2VudCkgZm9yIG1vcmUgYWNjdXJhdGUga2V5IHByZWNpc2lvblxudmFyIFRpbWUgPVxuICBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3dcbiAgICA/IHdpbmRvdy5wZXJmb3JtYW5jZVxuICAgIDogRGF0ZTtcblxuZnVuY3Rpb24gZ2VuU3RhdGVLZXkgKCkge1xuICByZXR1cm4gVGltZS5ub3coKS50b0ZpeGVkKDMpXG59XG5cbnZhciBfa2V5ID0gZ2VuU3RhdGVLZXkoKTtcblxuZnVuY3Rpb24gZ2V0U3RhdGVLZXkgKCkge1xuICByZXR1cm4gX2tleVxufVxuXG5mdW5jdGlvbiBzZXRTdGF0ZUtleSAoa2V5KSB7XG4gIHJldHVybiAoX2tleSA9IGtleSlcbn1cblxuLyogICovXG5cbnZhciBwb3NpdGlvblN0b3JlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gc2V0dXBTY3JvbGwgKCkge1xuICAvLyBGaXggZm9yICMxNTg1IGZvciBGaXJlZm94XG4gIC8vIEZpeCBmb3IgIzIxOTUgQWRkIG9wdGlvbmFsIHRoaXJkIGF0dHJpYnV0ZSB0byB3b3JrYXJvdW5kIGEgYnVnIGluIHNhZmFyaSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTgyNjc4XG4gIC8vIEZpeCBmb3IgIzI3NzQgU3VwcG9ydCBmb3IgYXBwcyBsb2FkZWQgZnJvbSBXaW5kb3dzIGZpbGUgc2hhcmVzIG5vdCBtYXBwZWQgdG8gbmV0d29yayBkcml2ZXM6IHJlcGxhY2VkIGxvY2F0aW9uLm9yaWdpbiB3aXRoXG4gIC8vIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdFxuICAvLyBsb2NhdGlvbi5ob3N0IGNvbnRhaW5zIHRoZSBwb3J0IGFuZCBsb2NhdGlvbi5ob3N0bmFtZSBkb2Vzbid0XG4gIHZhciBwcm90b2NvbEFuZFBhdGggPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gIHZhciBhYnNvbHV0ZVBhdGggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKHByb3RvY29sQW5kUGF0aCwgJycpO1xuICAvLyBwcmVzZXJ2ZSBleGlzdGluZyBoaXN0b3J5IHN0YXRlIGFzIGl0IGNvdWxkIGJlIG92ZXJyaWRlbiBieSB0aGUgdXNlclxuICB2YXIgc3RhdGVDb3B5ID0gZXh0ZW5kKHt9LCB3aW5kb3cuaGlzdG9yeS5zdGF0ZSk7XG4gIHN0YXRlQ29weS5rZXkgPSBnZXRTdGF0ZUtleSgpO1xuICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGVDb3B5LCAnJywgYWJzb2x1dGVQYXRoKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgICBpZiAoZS5zdGF0ZSAmJiBlLnN0YXRlLmtleSkge1xuICAgICAgc2V0U3RhdGVLZXkoZS5zdGF0ZS5rZXkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVNjcm9sbCAoXG4gIHJvdXRlcixcbiAgdG8sXG4gIGZyb20sXG4gIGlzUG9wXG4pIHtcbiAgaWYgKCFyb3V0ZXIuYXBwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmVoYXZpb3IgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgaWYgKCFiZWhhdmlvcikge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJlaGF2aW9yID09PSAnZnVuY3Rpb24nLCBcInNjcm9sbEJlaGF2aW9yIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIC8vIHdhaXQgdW50aWwgcmUtcmVuZGVyIGZpbmlzaGVzIGJlZm9yZSBzY3JvbGxpbmdcbiAgcm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3NpdGlvbiA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgdmFyIHNob3VsZFNjcm9sbCA9IGJlaGF2aW9yLmNhbGwoXG4gICAgICByb3V0ZXIsXG4gICAgICB0byxcbiAgICAgIGZyb20sXG4gICAgICBpc1BvcCA/IHBvc2l0aW9uIDogbnVsbFxuICAgICk7XG5cbiAgICBpZiAoIXNob3VsZFNjcm9sbCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzaG91bGRTY3JvbGwudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc2hvdWxkU2Nyb2xsXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChzaG91bGRTY3JvbGwpIHtcbiAgICAgICAgICBzY3JvbGxUb1Bvc2l0aW9uKChzaG91bGRTY3JvbGwpLCBwb3NpdGlvbik7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgZXJyLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcm9sbFRvUG9zaXRpb24oc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICBwb3NpdGlvblN0b3JlW2tleV0gPSB7XG4gICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gcG9zaXRpb25TdG9yZVtrZXldXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFBvc2l0aW9uIChlbCwgb2Zmc2V0KSB7XG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGRvY1JlY3QgPSBkb2NFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHg6IGVsUmVjdC5sZWZ0IC0gZG9jUmVjdC5sZWZ0IC0gb2Zmc2V0LngsXG4gICAgeTogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gb2Zmc2V0LnlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4gaXNOdW1iZXIob2JqLngpIHx8IGlzTnVtYmVyKG9iai55KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPZmZzZXQgKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogMCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bWJlciAodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInXG59XG5cbnZhciBoYXNoU3RhcnRzV2l0aE51bWJlclJFID0gL14jXFxkLztcblxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbiAoc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbikge1xuICB2YXIgaXNPYmplY3QgPSB0eXBlb2Ygc2hvdWxkU2Nyb2xsID09PSAnb2JqZWN0JztcbiAgaWYgKGlzT2JqZWN0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZ2V0RWxlbWVudEJ5SWQgd291bGQgc3RpbGwgZmFpbCBpZiB0aGUgc2VsZWN0b3IgY29udGFpbnMgYSBtb3JlIGNvbXBsaWNhdGVkIHF1ZXJ5IGxpa2UgI21haW5bZGF0YS1hdHRyXVxuICAgIC8vIGJ1dCBhdCB0aGUgc2FtZSB0aW1lLCBpdCBkb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSB0byBzZWxlY3QgYW4gZWxlbWVudCB3aXRoIGFuIGlkIGFuZCBhbiBleHRyYSBzZWxlY3RvclxuICAgIHZhciBlbCA9IGhhc2hTdGFydHNXaXRoTnVtYmVyUkUudGVzdChzaG91bGRTY3JvbGwuc2VsZWN0b3IpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaG91bGRTY3JvbGwuc2VsZWN0b3Iuc2xpY2UoMSkpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNob3VsZFNjcm9sbC5zZWxlY3Rvcik7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciBvZmZzZXQgPVxuICAgICAgICBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwub2Zmc2V0ID09PSAnb2JqZWN0J1xuICAgICAgICAgID8gc2hvdWxkU2Nyb2xsLm9mZnNldFxuICAgICAgICAgIDoge307XG4gICAgICBvZmZzZXQgPSBub3JtYWxpemVPZmZzZXQob2Zmc2V0KTtcbiAgICAgIHBvc2l0aW9uID0gZ2V0RWxlbWVudFBvc2l0aW9uKGVsLCBvZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QgJiYgaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7XG4gIH1cblxuICBpZiAocG9zaXRpb24pIHtcbiAgICB3aW5kb3cuc2Nyb2xsVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBzdXBwb3J0c1B1c2hTdGF0ZSA9XG4gIGluQnJvd3NlciAmJlxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gICAgaWYgKFxuICAgICAgKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmXG4gICAgICB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmXG4gICAgICB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiZcbiAgICAgIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTFcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeVxuICB9KSgpO1xuXG5mdW5jdGlvbiBwdXNoU3RhdGUgKHVybCwgcmVwbGFjZSkge1xuICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgLy8gdHJ5Li4uY2F0Y2ggdGhlIHB1c2hTdGF0ZSBjYWxsIHRvIGdldCBhcm91bmQgU2FmYXJpXG4gIC8vIERPTSBFeGNlcHRpb24gMTggd2hlcmUgaXQgbGltaXRzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHNcbiAgdmFyIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdHJ5IHtcbiAgICBpZiAocmVwbGFjZSkge1xuICAgICAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXJcbiAgICAgIHZhciBzdGF0ZUNvcHkgPSBleHRlbmQoe30sIGhpc3Rvcnkuc3RhdGUpO1xuICAgICAgc3RhdGVDb3B5LmtleSA9IGdldFN0YXRlS2V5KCk7XG4gICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZUNvcHksICcnLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7IGtleTogc2V0U3RhdGVLZXkoZ2VuU3RhdGVLZXkoKSkgfSwgJycsIHVybCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uW3JlcGxhY2UgPyAncmVwbGFjZScgOiAnYXNzaWduJ10odXJsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlU3RhdGUgKHVybCkge1xuICBwdXNoU3RhdGUodXJsLCB0cnVlKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJ1blF1ZXVlIChxdWV1ZSwgZm4sIGNiKSB7XG4gIHZhciBzdGVwID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgY2IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHF1ZXVlW2luZGV4XSkge1xuICAgICAgICBmbihxdWV1ZVtpbmRleF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGVwKGluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3RlcCgwKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudHMgKG1hdGNoZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0bywgZnJvbSwgbmV4dCkge1xuICAgIHZhciBoYXNBc3luYyA9IGZhbHNlO1xuICAgIHZhciBwZW5kaW5nID0gMDtcbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgZmxhdE1hcENvbXBvbmVudHMobWF0Y2hlZCwgZnVuY3Rpb24gKGRlZiwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgLy8gaWYgaXQncyBhIGZ1bmN0aW9uIGFuZCBkb2Vzbid0IGhhdmUgY2lkIGF0dGFjaGVkLFxuICAgICAgLy8gYXNzdW1lIGl0J3MgYW4gYXN5bmMgY29tcG9uZW50IHJlc29sdmUgZnVuY3Rpb24uXG4gICAgICAvLyB3ZSBhcmUgbm90IHVzaW5nIFZ1ZSdzIGRlZmF1bHQgYXN5bmMgcmVzb2x2aW5nIG1lY2hhbmlzbSBiZWNhdXNlXG4gICAgICAvLyB3ZSB3YW50IHRvIGhhbHQgdGhlIG5hdmlnYXRpb24gdW50aWwgdGhlIGluY29taW5nIGNvbXBvbmVudCBoYXMgYmVlblxuICAgICAgLy8gcmVzb2x2ZWQuXG4gICAgICBpZiAodHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWYuY2lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaGFzQXN5bmMgPSB0cnVlO1xuICAgICAgICBwZW5kaW5nKys7XG5cbiAgICAgICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXNvbHZlZERlZikge1xuICAgICAgICAgIGlmIChpc0VTTW9kdWxlKHJlc29sdmVkRGVmKSkge1xuICAgICAgICAgICAgcmVzb2x2ZWREZWYgPSByZXNvbHZlZERlZi5kZWZhdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzYXZlIHJlc29sdmVkIG9uIGFzeW5jIGZhY3RvcnkgaW4gY2FzZSBpdCdzIHVzZWQgZWxzZXdoZXJlXG4gICAgICAgICAgZGVmLnJlc29sdmVkID0gdHlwZW9mIHJlc29sdmVkRGVmID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHJlc29sdmVkRGVmXG4gICAgICAgICAgICA6IF9WdWUuZXh0ZW5kKHJlc29sdmVkRGVmKTtcbiAgICAgICAgICBtYXRjaC5jb21wb25lbnRzW2tleV0gPSByZXNvbHZlZERlZjtcbiAgICAgICAgICBwZW5kaW5nLS07XG4gICAgICAgICAgaWYgKHBlbmRpbmcgPD0gMCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIHZhciBtc2cgPSBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudCBcIiArIGtleSArIFwiOiBcIiArIHJlYXNvbjtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIG1zZyk7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IgPSBpc0Vycm9yKHJlYXNvbilcbiAgICAgICAgICAgICAgPyByZWFzb25cbiAgICAgICAgICAgICAgOiBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICAgIG5leHQoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXMgPSBkZWYocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbmV3IHN5bnRheCBpbiBWdWUgMi4zXG4gICAgICAgICAgICB2YXIgY29tcCA9IHJlcy5jb21wb25lbnQ7XG4gICAgICAgICAgICBpZiAoY29tcCAmJiB0eXBlb2YgY29tcC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbXAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFoYXNBc3luYykgeyBuZXh0KCk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0TWFwQ29tcG9uZW50cyAoXG4gIG1hdGNoZWQsXG4gIGZuXG4pIHtcbiAgcmV0dXJuIGZsYXR0ZW4obWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4oXG4gICAgICBtLmNvbXBvbmVudHNba2V5XSxcbiAgICAgIG0uaW5zdGFuY2VzW2tleV0sXG4gICAgICBtLCBrZXlcbiAgICApOyB9KVxuICB9KSlcbn1cblxuZnVuY3Rpb24gZmxhdHRlbiAoYXJyKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcnIpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5mdW5jdGlvbiBpc0VTTW9kdWxlIChvYmopIHtcbiAgcmV0dXJuIG9iai5fX2VzTW9kdWxlIHx8IChoYXNTeW1ib2wgJiYgb2JqW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxufVxuXG4vLyBpbiBXZWJwYWNrIDIsIHJlcXVpcmUuZW5zdXJlIG5vdyBhbHNvIHJldHVybnMgYSBQcm9taXNlXG4vLyBzbyB0aGUgcmVzb2x2ZS9yZWplY3QgZnVuY3Rpb25zIG1heSBnZXQgY2FsbGVkIGFuIGV4dHJhIHRpbWVcbi8vIGlmIHRoZSB1c2VyIHVzZXMgYW4gYXJyb3cgZnVuY3Rpb24gc2hvcnRoYW5kIHRoYXQgaGFwcGVucyB0b1xuLy8gcmV0dXJuIHRoYXQgUHJvbWlzZS5cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICBpZiAoY2FsbGVkKSB7IHJldHVybiB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncylcbiAgfVxufVxuXG52YXIgTmF2aWdhdGlvbkR1cGxpY2F0ZWQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChFcnJvcikge1xuICBmdW5jdGlvbiBOYXZpZ2F0aW9uRHVwbGljYXRlZCAobm9ybWFsaXplZExvY2F0aW9uKSB7XG4gICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLl9uYW1lID0gJ05hdmlnYXRpb25EdXBsaWNhdGVkJztcbiAgICAvLyBwYXNzaW5nIHRoZSBtZXNzYWdlIHRvIHN1cGVyKCkgZG9lc24ndCBzZWVtIHRvIHdvcmsgaW4gdGhlIHRyYW5zcGlsZWQgdmVyc2lvblxuICAgIHRoaXMubWVzc2FnZSA9IFwiTmF2aWdhdGluZyB0byBjdXJyZW50IGxvY2F0aW9uIChcXFwiXCIgKyAobm9ybWFsaXplZExvY2F0aW9uLmZ1bGxQYXRoKSArIFwiXFxcIikgaXMgbm90IGFsbG93ZWRcIjtcbiAgICAvLyBhZGQgYSBzdGFjayBwcm9wZXJ0eSBzbyBzZXJ2aWNlcyBsaWtlIFNlbnRyeSBjYW4gY29ycmVjdGx5IGRpc3BsYXkgaXRcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywge1xuICAgICAgdmFsdWU6IG5ldyBFcnJvcigpLnN0YWNrLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvLyB3ZSBjb3VsZCBhbHNvIGhhdmUgdXNlZFxuICAgIC8vIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gICAgLy8gYnV0IGl0IG9ubHkgZXhpc3RzIG9uIG5vZGUgYW5kIGNocm9tZVxuICB9XG5cbiAgaWYgKCBFcnJvciApIE5hdmlnYXRpb25EdXBsaWNhdGVkLl9fcHJvdG9fXyA9IEVycm9yO1xuICBOYXZpZ2F0aW9uRHVwbGljYXRlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFcnJvciAmJiBFcnJvci5wcm90b3R5cGUgKTtcbiAgTmF2aWdhdGlvbkR1cGxpY2F0ZWQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTmF2aWdhdGlvbkR1cGxpY2F0ZWQ7XG5cbiAgcmV0dXJuIE5hdmlnYXRpb25EdXBsaWNhdGVkO1xufShFcnJvcikpO1xuXG4vLyBzdXBwb3J0IElFOVxuTmF2aWdhdGlvbkR1cGxpY2F0ZWQuX25hbWUgPSAnTmF2aWdhdGlvbkR1cGxpY2F0ZWQnO1xuXG4vKiAgKi9cblxudmFyIEhpc3RvcnkgPSBmdW5jdGlvbiBIaXN0b3J5IChyb3V0ZXIsIGJhc2UpIHtcbiAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG4gIHRoaXMuYmFzZSA9IG5vcm1hbGl6ZUJhc2UoYmFzZSk7XG4gIC8vIHN0YXJ0IHdpdGggYSByb3V0ZSBvYmplY3QgdGhhdCBzdGFuZHMgZm9yIFwibm93aGVyZVwiXG4gIHRoaXMuY3VycmVudCA9IFNUQVJUO1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gIHRoaXMucmVhZHlDYnMgPSBbXTtcbiAgdGhpcy5yZWFkeUVycm9yQ2JzID0gW107XG4gIHRoaXMuZXJyb3JDYnMgPSBbXTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbiAoY2IpIHtcbiAgdGhpcy5jYiA9IGNiO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUub25SZWFkeSA9IGZ1bmN0aW9uIG9uUmVhZHkgKGNiLCBlcnJvckNiKSB7XG4gIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgY2IoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlYWR5Q2JzLnB1c2goY2IpO1xuICAgIGlmIChlcnJvckNiKSB7XG4gICAgICB0aGlzLnJlYWR5RXJyb3JDYnMucHVzaChlcnJvckNiKTtcbiAgICB9XG4gIH1cbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuZXJyb3JDYnMucHVzaChlcnJvckNiKTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLnRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIHRyYW5zaXRpb25UbyAoXG4gIGxvY2F0aW9uLFxuICBvbkNvbXBsZXRlLFxuICBvbkFib3J0XG4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgcm91dGUgPSB0aGlzLnJvdXRlci5tYXRjaChsb2NhdGlvbiwgdGhpcy5jdXJyZW50KTtcbiAgdGhpcy5jb25maXJtVHJhbnNpdGlvbihcbiAgICByb3V0ZSxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzJDEudXBkYXRlUm91dGUocm91dGUpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIHRoaXMkMS5lbnN1cmVVUkwoKTtcblxuICAgICAgLy8gZmlyZSByZWFkeSBjYnMgb25jZVxuICAgICAgaWYgKCF0aGlzJDEucmVhZHkpIHtcbiAgICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcyQxLnJlYWR5Q2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgY2Iocm91dGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChvbkFib3J0KSB7XG4gICAgICAgIG9uQWJvcnQoZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnIgJiYgIXRoaXMkMS5yZWFkeSkge1xuICAgICAgICB0aGlzJDEucmVhZHkgPSB0cnVlO1xuICAgICAgICB0aGlzJDEucmVhZHlFcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb24gKHJvdXRlLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gIHZhciBhYm9ydCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAvLyBhZnRlciBtZXJnaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL3B1bGwvMjc3MSB3ZVxuICAgIC8vIFdoZW4gdGhlIHVzZXIgbmF2aWdhdGVzIHRocm91Z2ggaGlzdG9yeSB0aHJvdWdoIGJhY2svZm9yd2FyZCBidXR0b25zXG4gICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gdGhyb3cgdGhlIGVycm9yLiBXZSBvbmx5IHRocm93IGl0IGlmIGRpcmVjdGx5IGNhbGxpbmdcbiAgICAvLyBwdXNoL3JlcGxhY2UuIFRoYXQncyB3aHkgaXQncyBub3QgaW5jbHVkZWQgaW4gaXNFcnJvclxuICAgIGlmICghaXNFeHRlbmRlZEVycm9yKE5hdmlnYXRpb25EdXBsaWNhdGVkLCBlcnIpICYmIGlzRXJyb3IoZXJyKSkge1xuICAgICAgaWYgKHRoaXMkMS5lcnJvckNicy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcyQxLmVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKGZhbHNlLCAndW5jYXVnaHQgZXJyb3IgZHVyaW5nIHJvdXRlIG5hdmlnYXRpb246Jyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25BYm9ydCAmJiBvbkFib3J0KGVycik7XG4gIH07XG4gIGlmIChcbiAgICBpc1NhbWVSb3V0ZShyb3V0ZSwgY3VycmVudCkgJiZcbiAgICAvLyBpbiB0aGUgY2FzZSB0aGUgcm91dGUgbWFwIGhhcyBiZWVuIGR5bmFtaWNhbGx5IGFwcGVuZGVkIHRvXG4gICAgcm91dGUubWF0Y2hlZC5sZW5ndGggPT09IGN1cnJlbnQubWF0Y2hlZC5sZW5ndGhcbiAgKSB7XG4gICAgdGhpcy5lbnN1cmVVUkwoKTtcbiAgICByZXR1cm4gYWJvcnQobmV3IE5hdmlnYXRpb25EdXBsaWNhdGVkKHJvdXRlKSlcbiAgfVxuXG4gIHZhciByZWYgPSByZXNvbHZlUXVldWUoXG4gICAgdGhpcy5jdXJyZW50Lm1hdGNoZWQsXG4gICAgcm91dGUubWF0Y2hlZFxuICApO1xuICAgIHZhciB1cGRhdGVkID0gcmVmLnVwZGF0ZWQ7XG4gICAgdmFyIGRlYWN0aXZhdGVkID0gcmVmLmRlYWN0aXZhdGVkO1xuICAgIHZhciBhY3RpdmF0ZWQgPSByZWYuYWN0aXZhdGVkO1xuXG4gIHZhciBxdWV1ZSA9IFtdLmNvbmNhdChcbiAgICAvLyBpbi1jb21wb25lbnQgbGVhdmUgZ3VhcmRzXG4gICAgZXh0cmFjdExlYXZlR3VhcmRzKGRlYWN0aXZhdGVkKSxcbiAgICAvLyBnbG9iYWwgYmVmb3JlIGhvb2tzXG4gICAgdGhpcy5yb3V0ZXIuYmVmb3JlSG9va3MsXG4gICAgLy8gaW4tY29tcG9uZW50IHVwZGF0ZSBob29rc1xuICAgIGV4dHJhY3RVcGRhdGVIb29rcyh1cGRhdGVkKSxcbiAgICAvLyBpbi1jb25maWcgZW50ZXIgZ3VhcmRzXG4gICAgYWN0aXZhdGVkLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5iZWZvcmVFbnRlcjsgfSksXG4gICAgLy8gYXN5bmMgY29tcG9uZW50c1xuICAgIHJlc29sdmVBc3luY0NvbXBvbmVudHMoYWN0aXZhdGVkKVxuICApO1xuXG4gIHRoaXMucGVuZGluZyA9IHJvdXRlO1xuICB2YXIgaXRlcmF0b3IgPSBmdW5jdGlvbiAoaG9vaywgbmV4dCkge1xuICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgIHJldHVybiBhYm9ydCgpXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBob29rKHJvdXRlLCBjdXJyZW50LCBmdW5jdGlvbiAodG8pIHtcbiAgICAgICAgaWYgKHRvID09PSBmYWxzZSB8fCBpc0Vycm9yKHRvKSkge1xuICAgICAgICAgIC8vIG5leHQoZmFsc2UpIC0+IGFib3J0IG5hdmlnYXRpb24sIGVuc3VyZSBjdXJyZW50IFVSTFxuICAgICAgICAgIHRoaXMkMS5lbnN1cmVVUkwodHJ1ZSk7XG4gICAgICAgICAgYWJvcnQodG8pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdG8ubmFtZSA9PT0gJ3N0cmluZycpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBuZXh0KCcvJykgb3IgbmV4dCh7IHBhdGg6ICcvJyB9KSAtPiByZWRpcmVjdFxuICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gJ29iamVjdCcgJiYgdG8ucmVwbGFjZSkge1xuICAgICAgICAgICAgdGhpcyQxLnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzJDEucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNvbmZpcm0gdHJhbnNpdGlvbiBhbmQgcGFzcyBvbiB0aGUgdmFsdWVcbiAgICAgICAgICBuZXh0KHRvKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWJvcnQoZSk7XG4gICAgfVxuICB9O1xuXG4gIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3N0RW50ZXJDYnMgPSBbXTtcbiAgICB2YXIgaXNWYWxpZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5jdXJyZW50ID09PSByb3V0ZTsgfTtcbiAgICAvLyB3YWl0IHVudGlsIGFzeW5jIGNvbXBvbmVudHMgYXJlIHJlc29sdmVkIGJlZm9yZVxuICAgIC8vIGV4dHJhY3RpbmcgaW4tY29tcG9uZW50IGVudGVyIGd1YXJkc1xuICAgIHZhciBlbnRlckd1YXJkcyA9IGV4dHJhY3RFbnRlckd1YXJkcyhhY3RpdmF0ZWQsIHBvc3RFbnRlckNicywgaXNWYWxpZCk7XG4gICAgdmFyIHF1ZXVlID0gZW50ZXJHdWFyZHMuY29uY2F0KHRoaXMkMS5yb3V0ZXIucmVzb2x2ZUhvb2tzKTtcbiAgICBydW5RdWV1ZShxdWV1ZSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgICAgcmV0dXJuIGFib3J0KClcbiAgICAgIH1cbiAgICAgIHRoaXMkMS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgaWYgKHRoaXMkMS5yb3V0ZXIuYXBwKSB7XG4gICAgICAgIHRoaXMkMS5yb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcG9zdEVudGVyQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICBjYigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS51cGRhdGVSb3V0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVJvdXRlIChyb3V0ZSkge1xuICB2YXIgcHJldiA9IHRoaXMuY3VycmVudDtcbiAgdGhpcy5jdXJyZW50ID0gcm91dGU7XG4gIHRoaXMuY2IgJiYgdGhpcy5jYihyb3V0ZSk7XG4gIHRoaXMucm91dGVyLmFmdGVySG9va3MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICAgIGhvb2sgJiYgaG9vayhyb3V0ZSwgcHJldik7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZSAoYmFzZSkge1xuICBpZiAoIWJhc2UpIHtcbiAgICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcbiAgICAgIHZhciBiYXNlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcbiAgICAgIC8vIHN0cmlwIGZ1bGwgVVJMIG9yaWdpblxuICAgICAgYmFzZSA9IGJhc2UucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC9bXlxcL10rLywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlID0gJy8nO1xuICAgIH1cbiAgfVxuICAvLyBtYWtlIHN1cmUgdGhlcmUncyB0aGUgc3RhcnRpbmcgc2xhc2hcbiAgaWYgKGJhc2UuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBiYXNlID0gJy8nICsgYmFzZTtcbiAgfVxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2xhc2hcbiAgcmV0dXJuIGJhc2UucmVwbGFjZSgvXFwvJC8sICcnKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUXVldWUgKFxuICBjdXJyZW50LFxuICBuZXh0XG4pIHtcbiAgdmFyIGk7XG4gIHZhciBtYXggPSBNYXRoLm1heChjdXJyZW50Lmxlbmd0aCwgbmV4dC5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICBpZiAoY3VycmVudFtpXSAhPT0gbmV4dFtpXSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVkOiBuZXh0LnNsaWNlKDAsIGkpLFxuICAgIGFjdGl2YXRlZDogbmV4dC5zbGljZShpKSxcbiAgICBkZWFjdGl2YXRlZDogY3VycmVudC5zbGljZShpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZHMgKFxuICByZWNvcmRzLFxuICBuYW1lLFxuICBiaW5kLFxuICByZXZlcnNlXG4pIHtcbiAgdmFyIGd1YXJkcyA9IGZsYXRNYXBDb21wb25lbnRzKHJlY29yZHMsIGZ1bmN0aW9uIChkZWYsIGluc3RhbmNlLCBtYXRjaCwga2V5KSB7XG4gICAgdmFyIGd1YXJkID0gZXh0cmFjdEd1YXJkKGRlZiwgbmFtZSk7XG4gICAgaWYgKGd1YXJkKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShndWFyZClcbiAgICAgICAgPyBndWFyZC5tYXAoZnVuY3Rpb24gKGd1YXJkKSB7IHJldHVybiBiaW5kKGd1YXJkLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSk7IH0pXG4gICAgICAgIDogYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZsYXR0ZW4ocmV2ZXJzZSA/IGd1YXJkcy5yZXZlcnNlKCkgOiBndWFyZHMpXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZCAoXG4gIGRlZixcbiAga2V5XG4pIHtcbiAgaWYgKHR5cGVvZiBkZWYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBleHRlbmQgbm93IHNvIHRoYXQgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZC5cbiAgICBkZWYgPSBfVnVlLmV4dGVuZChkZWYpO1xuICB9XG4gIHJldHVybiBkZWYub3B0aW9uc1trZXldXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RMZWF2ZUd1YXJkcyAoZGVhY3RpdmF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoZGVhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUxlYXZlJywgYmluZEd1YXJkLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VXBkYXRlSG9va3MgKHVwZGF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHModXBkYXRlZCwgJ2JlZm9yZVJvdXRlVXBkYXRlJywgYmluZEd1YXJkKVxufVxuXG5mdW5jdGlvbiBiaW5kR3VhcmQgKGd1YXJkLCBpbnN0YW5jZSkge1xuICBpZiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRSb3V0ZUd1YXJkICgpIHtcbiAgICAgIHJldHVybiBndWFyZC5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RW50ZXJHdWFyZHMgKFxuICBhY3RpdmF0ZWQsXG4gIGNicyxcbiAgaXNWYWxpZFxuKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKFxuICAgIGFjdGl2YXRlZCxcbiAgICAnYmVmb3JlUm91dGVFbnRlcicsXG4gICAgZnVuY3Rpb24gKGd1YXJkLCBfLCBtYXRjaCwga2V5KSB7XG4gICAgICByZXR1cm4gYmluZEVudGVyR3VhcmQoZ3VhcmQsIG1hdGNoLCBrZXksIGNicywgaXNWYWxpZClcbiAgICB9XG4gIClcbn1cblxuZnVuY3Rpb24gYmluZEVudGVyR3VhcmQgKFxuICBndWFyZCxcbiAgbWF0Y2gsXG4gIGtleSxcbiAgY2JzLFxuICBpc1ZhbGlkXG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJvdXRlRW50ZXJHdWFyZCAodG8sIGZyb20sIG5leHQpIHtcbiAgICByZXR1cm4gZ3VhcmQodG8sIGZyb20sIGZ1bmN0aW9uIChjYikge1xuICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gIzc1MFxuICAgICAgICAgIC8vIGlmIGEgcm91dGVyLXZpZXcgaXMgd3JhcHBlZCB3aXRoIGFuIG91dC1pbiB0cmFuc2l0aW9uLFxuICAgICAgICAgIC8vIHRoZSBpbnN0YW5jZSBtYXkgbm90IGhhdmUgYmVlbiByZWdpc3RlcmVkIGF0IHRoaXMgdGltZS5cbiAgICAgICAgICAvLyB3ZSB3aWxsIG5lZWQgdG8gcG9sbCBmb3IgcmVnaXN0cmF0aW9uIHVudGlsIGN1cnJlbnQgcm91dGVcbiAgICAgICAgICAvLyBpcyBubyBsb25nZXIgdmFsaWQuXG4gICAgICAgICAgcG9sbChjYiwgbWF0Y2guaW5zdGFuY2VzLCBrZXksIGlzVmFsaWQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG5leHQoY2IpO1xuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gcG9sbCAoXG4gIGNiLCAvLyBzb21laG93IGZsb3cgY2Fubm90IGluZmVyIHRoaXMgaXMgYSBmdW5jdGlvblxuICBpbnN0YW5jZXMsXG4gIGtleSxcbiAgaXNWYWxpZFxuKSB7XG4gIGlmIChcbiAgICBpbnN0YW5jZXNba2V5XSAmJlxuICAgICFpbnN0YW5jZXNba2V5XS5faXNCZWluZ0Rlc3Ryb3llZCAvLyBkbyBub3QgcmV1c2UgYmVpbmcgZGVzdHJveWVkIGluc3RhbmNlXG4gICkge1xuICAgIGNiKGluc3RhbmNlc1trZXldKTtcbiAgfSBlbHNlIGlmIChpc1ZhbGlkKCkpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHBvbGwoY2IsIGluc3RhbmNlcywga2V5LCBpc1ZhbGlkKTtcbiAgICB9LCAxNik7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIVE1MNUhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5KSB7XG4gIGZ1bmN0aW9uIEhUTUw1SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcblxuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHNldHVwU2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRMb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMuYmFzZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG5cbiAgICAgIC8vIEF2b2lkaW5nIGZpcnN0IGBwb3BzdGF0ZWAgZXZlbnQgZGlzcGF0Y2hlZCBpbiBzb21lIGJyb3dzZXJzIGJ1dCBmaXJzdFxuICAgICAgLy8gaGlzdG9yeSByb3V0ZSBub3QgdXBkYXRlZCBzaW5jZSBhc3luYyBndWFyZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcyQxLmJhc2UpO1xuICAgICAgaWYgKHRoaXMkMS5jdXJyZW50ID09PSBTVEFSVCAmJiBsb2NhdGlvbiA9PT0gaW5pdExvY2F0aW9uKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgaGFuZGxlU2Nyb2xsKHJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEhUTUw1SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5O1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSAmJiBIaXN0b3J5LnByb3RvdHlwZSApO1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSFRNTDVIaXN0b3J5O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaFN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJlcGxhY2VTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICBpZiAoZ2V0TG9jYXRpb24odGhpcy5iYXNlKSAhPT0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGNsZWFuUGF0aCh0aGlzLmJhc2UgKyB0aGlzLmN1cnJlbnQuZnVsbFBhdGgpO1xuICAgICAgcHVzaCA/IHB1c2hTdGF0ZShjdXJyZW50KSA6IHJlcGxhY2VTdGF0ZShjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRMb2NhdGlvbih0aGlzLmJhc2UpXG4gIH07XG5cbiAgcmV0dXJuIEhUTUw1SGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbiAoYmFzZSkge1xuICB2YXIgcGF0aCA9IGRlY29kZVVSSSh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICBpZiAoYmFzZSAmJiBwYXRoLmluZGV4T2YoYmFzZSkgPT09IDApIHtcbiAgICBwYXRoID0gcGF0aC5zbGljZShiYXNlLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgd2luZG93LmxvY2F0aW9uLmhhc2hcbn1cblxuLyogICovXG5cbnZhciBIYXNoSGlzdG9yeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEhpc3RvcnkpIHtcbiAgZnVuY3Rpb24gSGFzaEhpc3RvcnkgKHJvdXRlciwgYmFzZSwgZmFsbGJhY2spIHtcbiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcbiAgICAvLyBjaGVjayBoaXN0b3J5IGZhbGxiYWNrIGRlZXBsaW5raW5nXG4gICAgaWYgKGZhbGxiYWNrICYmIGNoZWNrRmFsbGJhY2sodGhpcy5iYXNlKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGVuc3VyZVNsYXNoKCk7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkgKSBIYXNoSGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5O1xuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5ICYmIEhpc3RvcnkucHJvdG90eXBlICk7XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhhc2hIaXN0b3J5O1xuXG4gIC8vIHRoaXMgaXMgZGVsYXllZCB1bnRpbCB0aGUgYXBwIG1vdW50c1xuICAvLyB0byBhdm9pZCB0aGUgaGFzaGNoYW5nZSBsaXN0ZW5lciBiZWluZyBmaXJlZCB0b28gZWFybHlcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnNldHVwTGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHNldHVwU2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBzdXBwb3J0c1B1c2hTdGF0ZSA/ICdwb3BzdGF0ZScgOiAnaGFzaGNoYW5nZScsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG4gICAgICAgIGlmICghZW5zdXJlU2xhc2goKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHRoaXMkMS50cmFuc2l0aW9uVG8oZ2V0SGFzaCgpLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICAgICAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgcHVzaEhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudC5mdWxsUGF0aDtcbiAgICBpZiAoZ2V0SGFzaCgpICE9PSBjdXJyZW50KSB7XG4gICAgICBwdXNoID8gcHVzaEhhc2goY3VycmVudCkgOiByZXBsYWNlSGFzaChjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEhhc2goKVxuICB9O1xuXG4gIHJldHVybiBIYXNoSGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBjaGVja0ZhbGxiYWNrIChiYXNlKSB7XG4gIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGJhc2UpO1xuICBpZiAoIS9eXFwvIy8udGVzdChsb2NhdGlvbikpIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShjbGVhblBhdGgoYmFzZSArICcvIycgKyBsb2NhdGlvbikpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuZnVuY3Rpb24gZW5zdXJlU2xhc2ggKCkge1xuICB2YXIgcGF0aCA9IGdldEhhc2goKTtcbiAgaWYgKHBhdGguY2hhckF0KDApID09PSAnLycpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJlcGxhY2VIYXNoKCcvJyArIHBhdGgpO1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaCAoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIC8vIGVtcHR5IHBhdGhcbiAgaWYgKGluZGV4IDwgMCkgeyByZXR1cm4gJycgfVxuXG4gIGhyZWYgPSBocmVmLnNsaWNlKGluZGV4ICsgMSk7XG4gIC8vIGRlY29kZSB0aGUgaGFzaCBidXQgbm90IHRoZSBzZWFyY2ggb3IgaGFzaFxuICAvLyBhcyBzZWFyY2gocXVlcnkpIGlzIGFscmVhZHkgZGVjb2RlZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjcwOFxuICB2YXIgc2VhcmNoSW5kZXggPSBocmVmLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4IDwgMCkge1xuICAgIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaEluZGV4ID4gLTEpIHtcbiAgICAgIGhyZWYgPSBkZWNvZGVVUkkoaHJlZi5zbGljZSgwLCBoYXNoSW5kZXgpKSArIGhyZWYuc2xpY2UoaGFzaEluZGV4KTtcbiAgICB9IGVsc2UgeyBocmVmID0gZGVjb2RlVVJJKGhyZWYpOyB9XG4gIH0gZWxzZSB7XG4gICAgaHJlZiA9IGRlY29kZVVSSShocmVmLnNsaWNlKDAsIHNlYXJjaEluZGV4KSkgKyBocmVmLnNsaWNlKHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiBocmVmXG59XG5cbmZ1bmN0aW9uIGdldFVybCAocGF0aCkge1xuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaSA9IGhyZWYuaW5kZXhPZignIycpO1xuICB2YXIgYmFzZSA9IGkgPj0gMCA/IGhyZWYuc2xpY2UoMCwgaSkgOiBocmVmO1xuICByZXR1cm4gKGJhc2UgKyBcIiNcIiArIHBhdGgpXG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoIChwYXRoKSB7XG4gIGlmIChzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgIHB1c2hTdGF0ZShnZXRVcmwocGF0aCkpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaCAocGF0aCkge1xuICBpZiAoc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICByZXBsYWNlU3RhdGUoZ2V0VXJsKHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShnZXRVcmwocGF0aCkpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgQWJzdHJhY3RIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSkge1xuICBmdW5jdGlvbiBBYnN0cmFjdEhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIEhpc3RvcnkuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB0aGlzLmluZGV4ID0gLTE7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkgKSBBYnN0cmFjdEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUgKTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFic3RyYWN0SGlzdG9yeTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICB0aGlzJDEuc3RhY2sgPSB0aGlzJDEuc3RhY2suc2xpY2UoMCwgdGhpcyQxLmluZGV4ICsgMSkuY29uY2F0KHJvdXRlKTtcbiAgICAgICAgdGhpcyQxLmluZGV4Kys7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCkuY29uY2F0KHJvdXRlKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuaW5kZXggKyBuO1xuICAgIGlmICh0YXJnZXRJbmRleCA8IDAgfHwgdGFyZ2V0SW5kZXggPj0gdGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgcm91dGUgPSB0aGlzLnN0YWNrW3RhcmdldEluZGV4XTtcbiAgICB0aGlzLmNvbmZpcm1UcmFuc2l0aW9uKFxuICAgICAgcm91dGUsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMkMS5pbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgICB0aGlzJDEudXBkYXRlUm91dGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGlzRXh0ZW5kZWRFcnJvcihOYXZpZ2F0aW9uRHVwbGljYXRlZCwgZXJyKSkge1xuICAgICAgICAgIHRoaXMkMS5pbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGN1cnJlbnQgPyBjdXJyZW50LmZ1bGxQYXRoIDogJy8nXG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKCkge1xuICAgIC8vIG5vb3BcbiAgfTtcblxuICByZXR1cm4gQWJzdHJhY3RIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbi8qICAqL1xuXG5cblxudmFyIFZ1ZVJvdXRlciA9IGZ1bmN0aW9uIFZ1ZVJvdXRlciAob3B0aW9ucykge1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICB0aGlzLmFwcCA9IG51bGw7XG4gIHRoaXMuYXBwcyA9IFtdO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLmJlZm9yZUhvb2tzID0gW107XG4gIHRoaXMucmVzb2x2ZUhvb2tzID0gW107XG4gIHRoaXMuYWZ0ZXJIb29rcyA9IFtdO1xuICB0aGlzLm1hdGNoZXIgPSBjcmVhdGVNYXRjaGVyKG9wdGlvbnMucm91dGVzIHx8IFtdLCB0aGlzKTtcblxuICB2YXIgbW9kZSA9IG9wdGlvbnMubW9kZSB8fCAnaGFzaCc7XG4gIHRoaXMuZmFsbGJhY2sgPSBtb2RlID09PSAnaGlzdG9yeScgJiYgIXN1cHBvcnRzUHVzaFN0YXRlICYmIG9wdGlvbnMuZmFsbGJhY2sgIT09IGZhbHNlO1xuICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgIG1vZGUgPSAnaGFzaCc7XG4gIH1cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICBtb2RlID0gJ2Fic3RyYWN0JztcbiAgfVxuICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhUTUw1SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIYXNoSGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UsIHRoaXMuZmFsbGJhY2spO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdhYnN0cmFjdCc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgQWJzdHJhY3RIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIChcImludmFsaWQgbW9kZTogXCIgKyBtb2RlKSk7XG4gICAgICB9XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGN1cnJlbnRSb3V0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIHJlZGlyZWN0ZWRGcm9tXG4pIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmN1cnJlbnRSb3V0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LmN1cnJlbnRcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKGFwcCAvKiBWdWUgY29tcG9uZW50IGluc3RhbmNlICovKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnQoXG4gICAgaW5zdGFsbC5pbnN0YWxsZWQsXG4gICAgXCJub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gY2FsbCBgVnVlLnVzZShWdWVSb3V0ZXIpYCBcIiArXG4gICAgXCJiZWZvcmUgY3JlYXRpbmcgcm9vdCBpbnN0YW5jZS5cIlxuICApO1xuXG4gIHRoaXMuYXBwcy5wdXNoKGFwcCk7XG5cbiAgLy8gc2V0IHVwIGFwcCBkZXN0cm95ZWQgaGFuZGxlclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjYzOVxuICBhcHAuJG9uY2UoJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNsZWFuIG91dCBhcHAgZnJvbSB0aGlzLmFwcHMgYXJyYXkgb25jZSBkZXN0cm95ZWRcbiAgICB2YXIgaW5kZXggPSB0aGlzJDEuYXBwcy5pbmRleE9mKGFwcCk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHsgdGhpcyQxLmFwcHMuc3BsaWNlKGluZGV4LCAxKTsgfVxuICAgIC8vIGVuc3VyZSB3ZSBzdGlsbCBoYXZlIGEgbWFpbiBhcHAgb3IgbnVsbCBpZiBubyBhcHBzXG4gICAgLy8gd2UgZG8gbm90IHJlbGVhc2UgdGhlIHJvdXRlciBzbyBpdCBjYW4gYmUgcmV1c2VkXG4gICAgaWYgKHRoaXMkMS5hcHAgPT09IGFwcCkgeyB0aGlzJDEuYXBwID0gdGhpcyQxLmFwcHNbMF0gfHwgbnVsbDsgfVxuICB9KTtcblxuICAvLyBtYWluIGFwcCBwcmV2aW91c2x5IGluaXRpYWxpemVkXG4gIC8vIHJldHVybiBhcyB3ZSBkb24ndCBuZWVkIHRvIHNldCB1cCBuZXcgaGlzdG9yeSBsaXN0ZW5lclxuICBpZiAodGhpcy5hcHApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRoaXMuYXBwID0gYXBwO1xuXG4gIHZhciBoaXN0b3J5ID0gdGhpcy5oaXN0b3J5O1xuXG4gIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSFRNTDVIaXN0b3J5KSB7XG4gICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSk7XG4gIH0gZWxzZSBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhhc2hIaXN0b3J5KSB7XG4gICAgdmFyIHNldHVwSGFzaExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaGlzdG9yeS5zZXR1cExpc3RlbmVycygpO1xuICAgIH07XG4gICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oXG4gICAgICBoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpLFxuICAgICAgc2V0dXBIYXNoTGlzdGVuZXIsXG4gICAgICBzZXR1cEhhc2hMaXN0ZW5lclxuICAgICk7XG4gIH1cblxuICBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAocm91dGUpIHtcbiAgICB0aGlzJDEuYXBwcy5mb3JFYWNoKGZ1bmN0aW9uIChhcHApIHtcbiAgICAgIGFwcC5fcm91dGUgPSByb3V0ZTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZUVhY2ggPSBmdW5jdGlvbiBiZWZvcmVFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYmVmb3JlSG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iZWZvcmVSZXNvbHZlID0gZnVuY3Rpb24gYmVmb3JlUmVzb2x2ZSAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLnJlc29sdmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFmdGVyRWFjaCA9IGZ1bmN0aW9uIGFmdGVyRWFjaCAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLmFmdGVySG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5vblJlYWR5ID0gZnVuY3Rpb24gb25SZWFkeSAoY2IsIGVycm9yQ2IpIHtcbiAgdGhpcy5oaXN0b3J5Lm9uUmVhZHkoY2IsIGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25FcnJvcihlcnJvckNiKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghb25Db21wbGV0ZSAmJiAhb25BYm9ydCAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdGhpcyQxLmhpc3RvcnkucHVzaChsb2NhdGlvbiwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHRoaXMuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KTtcbiAgfVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFvbkNvbXBsZXRlICYmICFvbkFib3J0ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0aGlzJDEuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgdGhpcy5oaXN0b3J5LmdvKG4pO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24gYmFjayAoKSB7XG4gIHRoaXMuZ28oLTEpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gZm9yd2FyZCAoKSB7XG4gIHRoaXMuZ28oMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmdldE1hdGNoZWRDb21wb25lbnRzID0gZnVuY3Rpb24gZ2V0TWF0Y2hlZENvbXBvbmVudHMgKHRvKSB7XG4gIHZhciByb3V0ZSA9IHRvXG4gICAgPyB0by5tYXRjaGVkXG4gICAgICA/IHRvXG4gICAgICA6IHRoaXMucmVzb2x2ZSh0bykucm91dGVcbiAgICA6IHRoaXMuY3VycmVudFJvdXRlO1xuICBpZiAoIXJvdXRlKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgcm91dGUubWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIG0uY29tcG9uZW50c1trZXldXG4gICAgfSlcbiAgfSkpXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlIChcbiAgdG8sXG4gIGN1cnJlbnQsXG4gIGFwcGVuZFxuKSB7XG4gIGN1cnJlbnQgPSBjdXJyZW50IHx8IHRoaXMuaGlzdG9yeS5jdXJyZW50O1xuICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVMb2NhdGlvbihcbiAgICB0byxcbiAgICBjdXJyZW50LFxuICAgIGFwcGVuZCxcbiAgICB0aGlzXG4gICk7XG4gIHZhciByb3V0ZSA9IHRoaXMubWF0Y2gobG9jYXRpb24sIGN1cnJlbnQpO1xuICB2YXIgZnVsbFBhdGggPSByb3V0ZS5yZWRpcmVjdGVkRnJvbSB8fCByb3V0ZS5mdWxsUGF0aDtcbiAgdmFyIGJhc2UgPSB0aGlzLmhpc3RvcnkuYmFzZTtcbiAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGJhc2UsIGZ1bGxQYXRoLCB0aGlzLm1vZGUpO1xuICByZXR1cm4ge1xuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICByb3V0ZTogcm91dGUsXG4gICAgaHJlZjogaHJlZixcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIG5vcm1hbGl6ZWRUbzogbG9jYXRpb24sXG4gICAgcmVzb2x2ZWQ6IHJvdXRlXG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWRkUm91dGVzID0gZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgdGhpcy5tYXRjaGVyLmFkZFJvdXRlcyhyb3V0ZXMpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlUm91dGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySG9vayAobGlzdCwgZm4pIHtcbiAgbGlzdC5wdXNoKGZuKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGxpc3QuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkgeyBsaXN0LnNwbGljZShpLCAxKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhyZWYgKGJhc2UsIGZ1bGxQYXRoLCBtb2RlKSB7XG4gIHZhciBwYXRoID0gbW9kZSA9PT0gJ2hhc2gnID8gJyMnICsgZnVsbFBhdGggOiBmdWxsUGF0aDtcbiAgcmV0dXJuIGJhc2UgPyBjbGVhblBhdGgoYmFzZSArICcvJyArIHBhdGgpIDogcGF0aFxufVxuXG5WdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7XG5WdWVSb3V0ZXIudmVyc2lvbiA9ICczLjEuNic7XG5cbmlmIChpbkJyb3dzZXIgJiYgd2luZG93LlZ1ZSkge1xuICB3aW5kb3cuVnVlLnVzZShWdWVSb3V0ZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWdWVSb3V0ZXI7XG4iLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcIlZ1ZUxvYWRpbmdcIixbXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlZ1ZUxvYWRpbmc9ZSgpOnQuVnVlTG9hZGluZz1lKCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gaShuKXtpZihlW25dKXJldHVybiBlW25dLmV4cG9ydHM7dmFyIHI9ZVtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbbl0uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsaSksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gaS5tPXQsaS5jPWUsaS5kPWZ1bmN0aW9uKHQsZSxuKXtpLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxpLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0saS50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1pKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoaS5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgciBpbiB0KWkuZChuLHIsZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxyKSk7cmV0dXJuIG59LGkubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gaS5kKGUsXCJhXCIsZSksZX0saS5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxpLnA9XCJcIixpKGkucz0xKX0oW2Z1bmN0aW9uKHQsZSxpKXt9LGZ1bmN0aW9uKHQsZSxpKXtcInVzZSBzdHJpY3RcIjtpLnIoZSk7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cuSFRNTEVsZW1lbnQ6T2JqZWN0LHI9e21vdW50ZWQ6ZnVuY3Rpb24oKXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLHRoaXMuZm9jdXNJbil9LG1ldGhvZHM6e2ZvY3VzSW46ZnVuY3Rpb24odCl7aWYodGhpcy5pc0FjdGl2ZSYmdC50YXJnZXQhPT10aGlzLiRlbCYmIXRoaXMuJGVsLmNvbnRhaW5zKHQudGFyZ2V0KSl7dmFyIGU9dGhpcy5jb250YWluZXI/dGhpcy5jb250YWluZXI6dGhpcy5pc0Z1bGxQYWdlP251bGw6dGhpcy4kZWwucGFyZW50RWxlbWVudDsodGhpcy5pc0Z1bGxQYWdlfHxlJiZlLmNvbnRhaW5zKHQudGFyZ2V0KSkmJih0LnByZXZlbnREZWZhdWx0KCksdGhpcy4kZWwuZm9jdXMoKSl9fX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsdGhpcy5mb2N1c0luKX19O2Z1bmN0aW9uIGEodCxlLGksbixyLGEsbyxzKXt2YXIgdSxsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dC5vcHRpb25zOnQ7aWYoZSYmKGwucmVuZGVyPWUsbC5zdGF0aWNSZW5kZXJGbnM9aSxsLl9jb21waWxlZD0hMCksbiYmKGwuZnVuY3Rpb25hbD0hMCksYSYmKGwuX3Njb3BlSWQ9XCJkYXRhLXYtXCIrYSksbz8odT1mdW5jdGlvbih0KXsodD10fHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KHQ9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsdCksdCYmdC5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJnQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sbC5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9cz9mdW5jdGlvbigpe3IuY2FsbCh0aGlzLHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCl9OnIpLHUpaWYobC5mdW5jdGlvbmFsKXtsLl9pbmplY3RTdHlsZXM9dTt2YXIgYz1sLnJlbmRlcjtsLnJlbmRlcj1mdW5jdGlvbih0LGUpe3JldHVybiB1LmNhbGwoZSksYyh0LGUpfX1lbHNle3ZhciBkPWwuYmVmb3JlQ3JlYXRlO2wuYmVmb3JlQ3JlYXRlPWQ/W10uY29uY2F0KGQsdSk6W3VdfXJldHVybntleHBvcnRzOnQsb3B0aW9uczpsfX12YXIgbz1hKHtuYW1lOlwic3Bpbm5lclwiLHByb3BzOntjb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiMwMDBcIn0saGVpZ2h0Ont0eXBlOk51bWJlcixkZWZhdWx0OjY0fSx3aWR0aDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo2NH19fSwoZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRjcmVhdGVFbGVtZW50LGU9dGhpcy5fc2VsZi5fY3x8dDtyZXR1cm4gZShcInN2Z1wiLHthdHRyczp7dmlld0JveDpcIjAgMCAzOCAzOFwiLHhtbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIix3aWR0aDp0aGlzLndpZHRoLGhlaWdodDp0aGlzLmhlaWdodCxzdHJva2U6dGhpcy5jb2xvcn19LFtlKFwiZ1wiLHthdHRyczp7ZmlsbDpcIm5vbmVcIixcImZpbGwtcnVsZVwiOlwiZXZlbm9kZFwifX0sW2UoXCJnXCIse2F0dHJzOnt0cmFuc2Zvcm06XCJ0cmFuc2xhdGUoMSAxKVwiLFwic3Ryb2tlLXdpZHRoXCI6XCIyXCJ9fSxbZShcImNpcmNsZVwiLHthdHRyczp7XCJzdHJva2Utb3BhY2l0eVwiOlwiLjI1XCIsY3g6XCIxOFwiLGN5OlwiMThcIixyOlwiMThcIn19KSxlKFwicGF0aFwiLHthdHRyczp7ZDpcIk0zNiAxOGMwLTkuOTQtOC4wNi0xOC0xOC0xOFwifX0sW2UoXCJhbmltYXRlVHJhbnNmb3JtXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwidHJhbnNmb3JtXCIsdHlwZTpcInJvdGF0ZVwiLGZyb206XCIwIDE4IDE4XCIsdG86XCIzNjAgMTggMThcIixkdXI6XCIwLjhzXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSldLDEpXSldKV0pfSksW10sITEsbnVsbCxudWxsLG51bGwpLmV4cG9ydHMscz1hKHtuYW1lOlwiZG90c1wiLHByb3BzOntjb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiMwMDBcIn0saGVpZ2h0Ont0eXBlOk51bWJlcixkZWZhdWx0OjI0MH0sd2lkdGg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6NjB9fX0sKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kY3JlYXRlRWxlbWVudCxlPXRoaXMuX3NlbGYuX2N8fHQ7cmV0dXJuIGUoXCJzdmdcIix7YXR0cnM6e3ZpZXdCb3g6XCIwIDAgMTIwIDMwXCIseG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLGZpbGw6dGhpcy5jb2xvcix3aWR0aDp0aGlzLndpZHRoLGhlaWdodDp0aGlzLmhlaWdodH19LFtlKFwiY2lyY2xlXCIse2F0dHJzOntjeDpcIjE1XCIsY3k6XCIxNVwiLHI6XCIxNVwifX0sW2UoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiclwiLGZyb206XCIxNVwiLHRvOlwiMTVcIixiZWdpbjpcIjBzXCIsZHVyOlwiMC44c1wiLHZhbHVlczpcIjE1Ozk7MTVcIixjYWxjTW9kZTpcImxpbmVhclwiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pLGUoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiZmlsbC1vcGFjaXR5XCIsZnJvbTpcIjFcIix0bzpcIjFcIixiZWdpbjpcIjBzXCIsZHVyOlwiMC44c1wiLHZhbHVlczpcIjE7LjU7MVwiLGNhbGNNb2RlOlwibGluZWFyXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSldKSxlKFwiY2lyY2xlXCIse2F0dHJzOntjeDpcIjYwXCIsY3k6XCIxNVwiLHI6XCI5XCIsXCJmaWxsLW9wYWNpdHlcIjpcIjAuM1wifX0sW2UoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiclwiLGZyb206XCI5XCIsdG86XCI5XCIsYmVnaW46XCIwc1wiLGR1cjpcIjAuOHNcIix2YWx1ZXM6XCI5OzE1OzlcIixjYWxjTW9kZTpcImxpbmVhclwiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pLGUoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiZmlsbC1vcGFjaXR5XCIsZnJvbTpcIjAuNVwiLHRvOlwiMC41XCIsYmVnaW46XCIwc1wiLGR1cjpcIjAuOHNcIix2YWx1ZXM6XCIuNTsxOy41XCIsY2FsY01vZGU6XCJsaW5lYXJcIixyZXBlYXRDb3VudDpcImluZGVmaW5pdGVcIn19KV0pLGUoXCJjaXJjbGVcIix7YXR0cnM6e2N4OlwiMTA1XCIsY3k6XCIxNVwiLHI6XCIxNVwifX0sW2UoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiclwiLGZyb206XCIxNVwiLHRvOlwiMTVcIixiZWdpbjpcIjBzXCIsZHVyOlwiMC44c1wiLHZhbHVlczpcIjE1Ozk7MTVcIixjYWxjTW9kZTpcImxpbmVhclwiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pLGUoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiZmlsbC1vcGFjaXR5XCIsZnJvbTpcIjFcIix0bzpcIjFcIixiZWdpbjpcIjBzXCIsZHVyOlwiMC44c1wiLHZhbHVlczpcIjE7LjU7MVwiLGNhbGNNb2RlOlwibGluZWFyXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSldKV0pfSksW10sITEsbnVsbCxudWxsLG51bGwpLmV4cG9ydHMsdT1hKHtuYW1lOlwiYmFyc1wiLHByb3BzOntjb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiMwMDBcIn0saGVpZ2h0Ont0eXBlOk51bWJlcixkZWZhdWx0OjQwfSx3aWR0aDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo0MH19fSwoZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRjcmVhdGVFbGVtZW50LGU9dGhpcy5fc2VsZi5fY3x8dDtyZXR1cm4gZShcInN2Z1wiLHthdHRyczp7eG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLHZpZXdCb3g6XCIwIDAgMzAgMzBcIixoZWlnaHQ6dGhpcy5oZWlnaHQsd2lkdGg6dGhpcy53aWR0aCxmaWxsOnRoaXMuY29sb3J9fSxbZShcInJlY3RcIix7YXR0cnM6e3g6XCIwXCIseTpcIjEzXCIsd2lkdGg6XCI0XCIsaGVpZ2h0OlwiNVwifX0sW2UoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiaGVpZ2h0XCIsYXR0cmlidXRlVHlwZTpcIlhNTFwiLHZhbHVlczpcIjU7MjE7NVwiLGJlZ2luOlwiMHNcIixkdXI6XCIwLjZzXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSksZShcImFuaW1hdGVcIix7YXR0cnM6e2F0dHJpYnV0ZU5hbWU6XCJ5XCIsYXR0cmlidXRlVHlwZTpcIlhNTFwiLHZhbHVlczpcIjEzOyA1OyAxM1wiLGJlZ2luOlwiMHNcIixkdXI6XCIwLjZzXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSldKSxlKFwicmVjdFwiLHthdHRyczp7eDpcIjEwXCIseTpcIjEzXCIsd2lkdGg6XCI0XCIsaGVpZ2h0OlwiNVwifX0sW2UoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiaGVpZ2h0XCIsYXR0cmlidXRlVHlwZTpcIlhNTFwiLHZhbHVlczpcIjU7MjE7NVwiLGJlZ2luOlwiMC4xNXNcIixkdXI6XCIwLjZzXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSksZShcImFuaW1hdGVcIix7YXR0cnM6e2F0dHJpYnV0ZU5hbWU6XCJ5XCIsYXR0cmlidXRlVHlwZTpcIlhNTFwiLHZhbHVlczpcIjEzOyA1OyAxM1wiLGJlZ2luOlwiMC4xNXNcIixkdXI6XCIwLjZzXCIscmVwZWF0Q291bnQ6XCJpbmRlZmluaXRlXCJ9fSldKSxlKFwicmVjdFwiLHthdHRyczp7eDpcIjIwXCIseTpcIjEzXCIsd2lkdGg6XCI0XCIsaGVpZ2h0OlwiNVwifX0sW2UoXCJhbmltYXRlXCIse2F0dHJzOnthdHRyaWJ1dGVOYW1lOlwiaGVpZ2h0XCIsYXR0cmlidXRlVHlwZTpcIlhNTFwiLHZhbHVlczpcIjU7MjE7NVwiLGJlZ2luOlwiMC4zc1wiLGR1cjpcIjAuNnNcIixyZXBlYXRDb3VudDpcImluZGVmaW5pdGVcIn19KSxlKFwiYW5pbWF0ZVwiLHthdHRyczp7YXR0cmlidXRlTmFtZTpcInlcIixhdHRyaWJ1dGVUeXBlOlwiWE1MXCIsdmFsdWVzOlwiMTM7IDU7IDEzXCIsYmVnaW46XCIwLjNzXCIsZHVyOlwiMC42c1wiLHJlcGVhdENvdW50OlwiaW5kZWZpbml0ZVwifX0pXSldKX0pLFtdLCExLG51bGwsbnVsbCxudWxsKS5leHBvcnRzLGw9YSh7bmFtZTpcInZ1ZS1sb2FkaW5nXCIsbWl4aW5zOltyXSxwcm9wczp7YWN0aXZlOkJvb2xlYW4scHJvZ3JhbW1hdGljOkJvb2xlYW4sY29udGFpbmVyOltPYmplY3QsRnVuY3Rpb24sbl0saXNGdWxsUGFnZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHRyYW5zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJmYWRlXCJ9LGNhbkNhbmNlbDpCb29sZWFuLG9uQ2FuY2VsOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6ZnVuY3Rpb24oKXt9fSxjb2xvcjpTdHJpbmcsYmFja2dyb3VuZENvbG9yOlN0cmluZyxvcGFjaXR5Ok51bWJlcix3aWR0aDpOdW1iZXIsaGVpZ2h0Ok51bWJlcix6SW5kZXg6TnVtYmVyLGxvYWRlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInNwaW5uZXJcIn19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aXNBY3RpdmU6dGhpcy5hY3RpdmV9fSxjb21wb25lbnRzOntTcGlubmVyOm8sRG90czpzLEJhcnM6dX0sYmVmb3JlTW91bnQ6ZnVuY3Rpb24oKXt0aGlzLnByb2dyYW1tYXRpYyYmKHRoaXMuY29udGFpbmVyPyh0aGlzLmlzRnVsbFBhZ2U9ITEsdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy4kZWwpKTpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuJGVsKSl9LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLnByb2dyYW1tYXRpYyYmKHRoaXMuaXNBY3RpdmU9ITApLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLHRoaXMua2V5UHJlc3MpfSxtZXRob2RzOntjYW5jZWw6ZnVuY3Rpb24oKXt0aGlzLmNhbkNhbmNlbCYmdGhpcy5pc0FjdGl2ZSYmKHRoaXMuaGlkZSgpLHRoaXMub25DYW5jZWwuYXBwbHkobnVsbCxhcmd1bWVudHMpKX0saGlkZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kZW1pdChcImhpZGVcIiksdGhpcy4kZW1pdChcInVwZGF0ZTphY3RpdmVcIiwhMSksdGhpcy5wcm9ncmFtbWF0aWMmJih0aGlzLmlzQWN0aXZlPSExLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dmFyIGU7dC4kZGVzdHJveSgpLHZvaWQgMCE9PShlPXQuJGVsKS5yZW1vdmU/ZS5yZW1vdmUoKTplLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KSwxNTApKX0sa2V5UHJlc3M6ZnVuY3Rpb24odCl7Mjc9PT10LmtleUNvZGUmJnRoaXMuY2FuY2VsKCl9fSx3YXRjaDp7YWN0aXZlOmZ1bmN0aW9uKHQpe3RoaXMuaXNBY3RpdmU9dH19LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIix0aGlzLmtleVByZXNzKX19LChmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LGk9dC5fc2VsZi5fY3x8ZTtyZXR1cm4gaShcInRyYW5zaXRpb25cIix7YXR0cnM6e25hbWU6dC50cmFuc2l0aW9ufX0sW2koXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOnQuaXNBY3RpdmUsZXhwcmVzc2lvbjpcImlzQWN0aXZlXCJ9XSxzdGF0aWNDbGFzczpcInZsZC1vdmVybGF5IGlzLWFjdGl2ZVwiLGNsYXNzOntcImlzLWZ1bGwtcGFnZVwiOnQuaXNGdWxsUGFnZX0sc3R5bGU6e3pJbmRleDp0LnpJbmRleH0sYXR0cnM6e3RhYmluZGV4OlwiMFwiLFwiYXJpYS1idXN5XCI6dC5pc0FjdGl2ZSxcImFyaWEtbGFiZWxcIjpcIkxvYWRpbmdcIn19LFtpKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmxkLWJhY2tncm91bmRcIixzdHlsZTp7YmFja2dyb3VuZDp0LmJhY2tncm91bmRDb2xvcixvcGFjaXR5OnQub3BhY2l0eX0sb246e2NsaWNrOmZ1bmN0aW9uKGUpe3JldHVybiBlLnByZXZlbnREZWZhdWx0KCksdC5jYW5jZWwoZSl9fX0pLGkoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2bGQtaWNvblwifSxbdC5fdChcImJlZm9yZVwiKSx0Ll90KFwiZGVmYXVsdFwiLFtpKHQubG9hZGVyLHt0YWc6XCJjb21wb25lbnRcIixhdHRyczp7Y29sb3I6dC5jb2xvcix3aWR0aDp0LndpZHRoLGhlaWdodDp0LmhlaWdodH19KV0pLHQuX3QoXCJhZnRlclwiKV0sMildKV0pfSksW10sITEsbnVsbCxudWxsLG51bGwpLmV4cG9ydHMsYz1mdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30saT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307cmV0dXJue3Nob3c6ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06ZSxyPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTppLGE9e3Byb2dyYW1tYXRpYzohMH0sbz1PYmplY3QuYXNzaWduKHt9LGUsbixhKSxzPW5ldyh0LmV4dGVuZChsKSkoe2VsOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikscHJvcHNEYXRhOm99KSx1PU9iamVjdC5hc3NpZ24oe30saSxyKTtyZXR1cm4gT2JqZWN0LmtleXModSkubWFwKChmdW5jdGlvbih0KXtzLiRzbG90c1t0XT11W3RdfSkpLHN9fX07aSgwKTtsLmluc3RhbGw9ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9LG49Yyh0LGUsaSk7dC4kbG9hZGluZz1uLHQucHJvdG90eXBlLiRsb2FkaW5nPW59O2UuZGVmYXVsdD1sfV0pLmRlZmF1bHR9KSk7IiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi8uLi9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi8uLi8uLi9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPThiMWZiYjk2Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi8uLi9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi8uLi8uLi9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbnRlZ2VyUGx1c21pbnVzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPThiMWZiYjk2Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZIHx8IHN0aWNreUhlbHBlcnMuQlJPS0VOX0NBUkVUO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gcmVnZXhwRmxhZ3MuY2FsbChyZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IGZsYWdzLnJlcGxhY2UoJ3knLCAnJyk7XG4gICAgICBpZiAoZmxhZ3MuaW5kZXhPZignZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBTdHJpbmcoc3RyKS5zbGljZShyZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgc3RyW3JlLmxhc3RJbmRleCAtIDFdICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwoc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gbWF0Y2guaW5wdXQuc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlRGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9mYWlscycpO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvcixcbi8vIHNvIHdlIHVzZSBhbiBpbnRlcm1lZGlhdGUgZnVuY3Rpb24uXG5mdW5jdGlvbiBSRShzLCBmKSB7XG4gIHJldHVybiBSZWdFeHAocywgZik7XG59XG5cbmV4cG9ydHMuVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbiAgdmFyIHJlID0gUkUoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuZXhwb3J0cy5CUk9LRU5fQ0FSRVQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSBSRSgnXnInLCAnZ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ3N0cicpICE9IG51bGw7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBzZXR0ZXIuY2FsbChPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5pZiAoJHN0cmluZ2lmeSkge1xuICB2YXIgRk9SQ0VEX0pTT05fU1RSSU5HSUZZID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gICAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgfSk7XG5cbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgIHZhciAkcmVwbGFjZXI7XG4gICAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGluZGV4KSBhcmdzLnB1c2goYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICAgICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiAkc3RyaW5naWZ5LmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG4vLyBTYWZhcmkgYnVnIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDA4MjlcbnZhciBOT05fR0VORVJJQyA9ICEhTmF0aXZlUHJvbWlzZSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIE5hdGl2ZVByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10uY2FsbCh7IHRoZW46IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGBQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmZpbmFsbHlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogTk9OX0dFTkVSSUMgfSwge1xuICAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBnZXRCdWlsdEluKCdQcm9taXNlJykpO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICAgIHJldHVybiB0aGlzLnRoZW4oXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseSxcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHlcbiAgICApO1xuICB9XG59KTtcblxuLy8gcGF0Y2ggbmF0aXZlIFByb21pc2UucHJvdG90eXBlIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG5pZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJyAmJiAhTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSkge1xuICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ2ZpbmFsbHknLCBnZXRCdWlsdEluKCdQcm9taXNlJykucHJvdG90eXBlWydmaW5hbGx5J10pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcblxudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyIE5hdGl2ZU51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIE51bWJlclByb3RvdHlwZSA9IE5hdGl2ZU51bWJlci5wcm90b3R5cGU7XG5cbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DTEFTU09GID0gY2xhc3NvZihjcmVhdGUoTnVtYmVyUHJvdG90eXBlKSkgPT0gTlVNQkVSO1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9udW1iZXJcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICB2YXIgZmlyc3QsIHRoaXJkLCByYWRpeCwgbWF4Q29kZSwgZGlnaXRzLCBsZW5ndGgsIGluZGV4LCBjb2RlO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IHRyaW0oaXQpO1xuICAgIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZGlnaXRzID0gaXQuc2xpY2UoMik7XG4gICAgICBsZW5ndGggPSBkaWdpdHMubGVuZ3RoO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG4vLyBgTnVtYmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbnVtYmVyLWNvbnN0cnVjdG9yXG5pZiAoaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpKSB7XG4gIHZhciBOdW1iZXJXcmFwcGVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIGR1bW15ID0gdGhpcztcbiAgICByZXR1cm4gZHVtbXkgaW5zdGFuY2VvZiBOdW1iZXJXcmFwcGVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ0xBU1NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgTnVtYmVyUHJvdG90eXBlLnZhbHVlT2YuY2FsbChkdW1teSk7IH0pIDogY2xhc3NvZihkdW1teSkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVOdW1iZXIodG9OdW1iZXIoaXQpKSwgZHVtbXksIE51bWJlcldyYXBwZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gREVTQ1JJUFRPUlMgPyBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZU51bWJlcikgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzIwMTUgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzIwMTUgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhOYXRpdmVOdW1iZXIsIGtleSA9IGtleXNbal0pICYmICFoYXMoTnVtYmVyV3JhcHBlciwga2V5KSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoTnVtYmVyV3JhcHBlciwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTmF0aXZlTnVtYmVyLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgTnVtYmVyV3JhcHBlci5wcm90b3R5cGUgPSBOdW1iZXJQcm90b3R5cGU7XG4gIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG4gIHJlZGVmaW5lKGdsb2JhbCwgTlVNQkVSLCBOdW1iZXJXcmFwcGVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjYWNoZSA9IHt9O1xuXG52YXIgdGhyb3dlciA9IGZ1bmN0aW9uIChpdCkgeyB0aHJvdyBpdDsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIG9wdGlvbnMpIHtcbiAgaWYgKGhhcyhjYWNoZSwgTUVUSE9EX05BTUUpKSByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdO1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgdmFyIEFDQ0VTU09SUyA9IGhhcyhvcHRpb25zLCAnQUNDRVNTT1JTJykgPyBvcHRpb25zLkFDQ0VTU09SUyA6IGZhbHNlO1xuICB2YXIgYXJndW1lbnQwID0gaGFzKG9wdGlvbnMsIDApID8gb3B0aW9uc1swXSA6IHRocm93ZXI7XG4gIHZhciBhcmd1bWVudDEgPSBoYXMob3B0aW9ucywgMSkgPyBvcHRpb25zWzFdIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV0gPSAhIW1ldGhvZCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIGlmIChBQ0NFU1NPUlMgJiYgIURFU0NSSVBUT1JTKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgTyA9IHsgbGVuZ3RoOiAtMSB9O1xuXG4gICAgaWYgKEFDQ0VTU09SUykgZGVmaW5lUHJvcGVydHkoTywgMSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IHRocm93ZXIgfSk7XG4gICAgZWxzZSBPWzFdID0gMTtcblxuICAgIG1ldGhvZC5jYWxsKE8sIGFyZ3VtZW50MCwgYXJndW1lbnQxKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxuaWYgKEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICghSVNfUFVSRSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcgPSBGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZztcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIShOQU1FIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChNdXRhdGlvbk9ic2VydmVyICYmICFJU19JT1MpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgZWxzZSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNilcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBuYXRpdmVJbmRleE9mID0gW10uaW5kZXhPZjtcblxudmFyIE5FR0FUSVZFX1pFUk8gPSAhIW5hdGl2ZUluZGV4T2YgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2luZGV4T2YnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdpbmRleE9mJywgeyBBQ0NFU1NPUlM6IHRydWUsIDE6IDAgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gbmF0aXZlSW5kZXhPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuYXNzaWduICE9PSBhc3NpZ24gfSwge1xuICBhc3NpZ246IGFzc2lnblxufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pXG4gICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ2EnLnJlcGxhY2UoLy4vLCAnJDAnKSA9PT0gJyQwJztcbn0pKCk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhKFxuICAgICAgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgJiZcbiAgICAgIFJFUExBQ0VfS0VFUFNfJDAgJiZcbiAgICAgICFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgICkpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSwge1xuICAgICAgUkVQTEFDRV9LRUVQU18kMDogUkVQTEFDRV9LRUVQU18kMCxcbiAgICAgIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFOiBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgIH0pO1xuICAgIHZhciBzdHJpbmdNZXRob2QgPSBtZXRob2RzWzBdO1xuICAgIHZhciByZWdleE1ldGhvZCA9IG1ldGhvZHNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmluZ01ldGhvZCk7XG4gICAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cblxuICBpZiAoc2hhbSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG4vLyBGRjQ5LSBpc3N1ZVxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBrZXksIGRlc2NyaXB0b3I7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5ID0ga2V5c1tpbmRleCsrXSk7XG4gICAgICBpZiAoZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IEZBSUxTX09OX1BSSU1JVElWRVM7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JbmRleGVkT2JqZWN0KGl0KSwga2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xudmFyIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5O1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IGluc3BlY3RTb3VyY2UoUHJvbWlzZUNvbnN0cnVjdG9yKSAhPT0gU3RyaW5nKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIGlmICghR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSkge1xuICAgIC8vIFY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgIGlmIChWOF9WRVJTSU9OID09PSA2NikgcmV0dXJuIHRydWU7XG4gICAgLy8gVW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIGlmICghSVNfTk9ERSAmJiB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ICE9ICdmdW5jdGlvbicpIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIFdlIG5lZWQgUHJvbWlzZSNmaW5hbGx5IGluIHRoZSBwdXJlIHZlcnNpb24gZm9yIHByZXZlbnRpbmcgcHJvdG90eXBlIHBvbGx1dGlvblxuICBpZiAoSVNfUFVSRSAmJiAhUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZVsnZmluYWxseSddKSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgY2FuJ3QgdXNlIEBAc3BlY2llcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbiAgaWYgKFY4X1ZFUlNJT04gPj0gNTEgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFByb21pc2VDb25zdHJ1Y3RvcikpIHJldHVybiBmYWxzZTtcbiAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlQ29uc3RydWN0b3IucmVzb2x2ZSgxKTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICByZXR1cm4gIShwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlKTtcbn0pO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9IEZPUkNFRCB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBQcm9taXNlQ29uc3RydWN0b3IuYWxsKGl0ZXJhYmxlKVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBzdGF0ZS5yZWFjdGlvbnM7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IGNoYWluW2luZGV4KytdO1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgICAgICAgICAgIHN0YXRlLnJlamVjdGlvbiA9IEhBTkRMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUucmVhY3Rpb25zID0gW107XG4gICAgc3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXN0YXRlLnJlamVjdGlvbikgb25VbmhhbmRsZWQocHJvbWlzZSwgc3RhdGUpO1xuICB9KTtcbn07XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKG5hbWUsIHByb21pc2UsIHJlYXNvbikge1xuICB2YXIgZXZlbnQsIGhhbmRsZXI7XG4gIGlmIChESVNQQVRDSF9FVkVOVCkge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQucHJvbWlzZSA9IHByb21pc2U7XG4gICAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICAgIGV2ZW50LmluaXRFdmVudChuYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZ2xvYmFsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9IGVsc2UgZXZlbnQgPSB7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcmVhc29uIH07XG4gIGlmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgfSk7XG59O1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgcHJvbWlzZSwgc3RhdGUsIHVud3JhcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm4ocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuICB9O1xufTtcblxudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgc3RhdGUuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgbm90aWZ5KHByb21pc2UsIHN0YXRlLCB0cnVlKTtcbn07XG5cbnZhciBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlc29sdmUsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZWplY3QsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgd3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbnRlcm5hbFJlamVjdChwcm9taXNlLCB7IGRvbmU6IGZhbHNlIH0sIGVycm9yLCBzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoRk9SQ0VEKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB0aGlzLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHRoaXMsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHRoaXMsIHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICB0eXBlOiBQUk9NSVNFLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBub3RpZmllZDogZmFsc2UsXG4gICAgICBwYXJlbnQ6IGZhbHNlLFxuICAgICAgcmVhY3Rpb25zOiBbXSxcbiAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICBzdGF0ZTogUEVORElORyxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgICBzdGF0ZS5yZWFjdGlvbnMucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORykgbm90aWZ5KHRoaXMsIHN0YXRlLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2UucHJvdG90eXBlLnRoZW47XG5cbiAgICAvLyB3cmFwIG5hdGl2ZSBQcm9taXNlI3RoZW4gZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbiAgICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG5hdGl2ZVRoZW4uY2FsbCh0aGF0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xuXG4gICAgLy8gd3JhcCBmZXRjaCByZXN1bHRcbiAgICBpZiAodHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKSAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShQcm9taXNlQ29uc3RydWN0b3IsICRmZXRjaC5hcHBseShnbG9iYWwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNhcnJheVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjbGFzc29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiAhU3ltYm9sLnNoYW1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Qcm9taXNlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==